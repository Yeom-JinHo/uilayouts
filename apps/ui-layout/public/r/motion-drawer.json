{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "motion-drawer",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/motion-drawer.tsx",
      "content": "'use client';\r\nimport React, { useState } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport { Menu, X } from 'lucide-react';\r\n\r\nexport type SideMenuDirection = 'left' | 'right';\r\nexport type ButtonOpeningVariants = 'push' | 'merge' | 'stay';\r\n\r\ninterface SideMenuProps {\r\n  // Appearance\r\n  overlayColor?: string;\r\n  width?: number;\r\n  direction?: SideMenuDirection;\r\n  backgroundColor?: string;\r\n\r\n  // Content\r\n  children: React.ReactNode;\r\n\r\n  // Behavior\r\n  isOpen?: boolean;\r\n  onToggle?: (isOpen: boolean) => void;\r\n  showToggleButton?: boolean;\r\n  toggleButtonText?: {\r\n    open: string;\r\n    close: string;\r\n  };\r\n\r\n  // Styling\r\n  className?: string;\r\n  contentClassName?: string;\r\n  overlayClassName?: string;\r\n\r\n  // Animation\r\n  animationConfig?: {\r\n    type?: 'spring' | 'tween';\r\n    damping?: number;\r\n    stiffness?: number;\r\n    duration?: number;\r\n  };\r\n\r\n  // Drag behavior\r\n  enableDrag?: boolean;\r\n  dragThreshold?: number;\r\n\r\n  // New prop\r\n  buttonOpeningVariants?: ButtonOpeningVariants;\r\n}\r\n\r\nconst getOpenButtonVariants = (\r\n  direction: SideMenuDirection,\r\n  width: number,\r\n  type: ButtonOpeningVariants\r\n) => {\r\n  switch (type) {\r\n    case 'merge':\r\n      return direction === 'left'\r\n        ? {\r\n            closed: { x: 0, opacity: 1, scale: 1, borderRadius: '0.5rem' },\r\n            open: {\r\n              x: width - 68,\r\n              opacity: 0,\r\n              scale: 1,\r\n              borderRadius: '0rem',\r\n            },\r\n          }\r\n        : {\r\n            closed: { x: 0, opacity: 1, scale: 1, borderRadius: '0.5rem' },\r\n            open: {\r\n              x: 68 - width,\r\n              opacity: 0,\r\n              scale: 1,\r\n              borderRadius: '0rem',\r\n            },\r\n          };\r\n\r\n    case 'push':\r\n      return direction === 'left'\r\n        ? { closed: { x: 0, opacity: 1 }, open: { x: width + 20, opacity: 0 } }\r\n        : {\r\n            closed: { x: 0, opacity: 1 },\r\n            open: { x: -(width + 20), opacity: 0 },\r\n          };\r\n\r\n    case 'stay':\r\n    default:\r\n      return {\r\n        closed: { x: 0, opacity: 1 },\r\n        open: { x: 0, opacity: 0 },\r\n      };\r\n  }\r\n};\r\n\r\nconst MotionDrawer: React.FC<SideMenuProps> = ({\r\n  // Appearance\r\n  overlayColor = 'rgba(0, 0, 0, 0.3)',\r\n  width = 300,\r\n  direction = 'left',\r\n  backgroundColor = '#ffffff',\r\n\r\n  // Content\r\n  children,\r\n\r\n  // Behavior\r\n  isOpen: controlledIsOpen,\r\n  onToggle,\r\n  showToggleButton = true,\r\n\r\n  // Styling\r\n  className = '',\r\n  contentClassName = '',\r\n  overlayClassName = '',\r\n\r\n  // Animation\r\n  animationConfig = {\r\n    type: 'spring',\r\n    damping: 25,\r\n    stiffness: 120,\r\n  },\r\n\r\n  // Drag behavior\r\n  enableDrag = true,\r\n  dragThreshold = 0.3,\r\n\r\n  buttonOpeningVariants = 'merge',\r\n}) => {\r\n  const [internalIsOpen, setInternalIsOpen] = useState<boolean>(false);\r\n\r\n  const isOpen =\r\n    controlledIsOpen !== undefined ? controlledIsOpen : internalIsOpen;\r\n  const setIsOpen = (value: boolean) => {\r\n    if (controlledIsOpen === undefined) {\r\n      setInternalIsOpen(value);\r\n    }\r\n    onToggle?.(value);\r\n  };\r\n\r\n  const getDrawerVariants = () => {\r\n    if (direction === 'left') {\r\n      return {\r\n        closed: { x: -width },\r\n        open: { x: 0 },\r\n      };\r\n    } else {\r\n      return {\r\n        closed: { x: width },\r\n        open: { x: 0 },\r\n      };\r\n    }\r\n  };\r\n\r\n  const buttonVariants = getOpenButtonVariants(\r\n    direction,\r\n    width,\r\n    buttonOpeningVariants\r\n  );\r\n\r\n  const getDragConstraints = () => {\r\n    if (direction === 'left') {\r\n      return { left: -width, right: 0 };\r\n    } else {\r\n      return { left: 0, right: width };\r\n    }\r\n  };\r\n\r\n  const handleDragEnd = (_event: any, info: any) => {\r\n    if (!enableDrag) return;\r\n\r\n    const threshold = width * dragThreshold;\r\n    const dragDistance = Math.abs(info.offset.x);\r\n\r\n    if (direction === 'left') {\r\n      const isDraggingLeft = info.offset.x < 0;\r\n      if (isDraggingLeft && dragDistance > threshold && isOpen) {\r\n        setIsOpen(false);\r\n      } else if (!isDraggingLeft && dragDistance > threshold && !isOpen) {\r\n        setIsOpen(true);\r\n      }\r\n    } else {\r\n      const isDraggingRight = info.offset.x > 0;\r\n      if (isDraggingRight && dragDistance > threshold && isOpen) {\r\n        setIsOpen(false);\r\n      } else if (!isDraggingRight && dragDistance > threshold && !isOpen) {\r\n        setIsOpen(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const drawerPositionClasses = direction === 'left' ? 'left-0' : 'right-0';\r\n  const openButtonPositionClasses =\r\n    direction === 'left' ? 'top-4 left-4' : 'top-4 right-4';\r\n\r\n  return (\r\n    <>\r\n      {showToggleButton && (\r\n        <motion.button\r\n          className={`fixed z-50 text-primary cursor-pointer ${openButtonPositionClasses}`}\r\n          onClick={() => setIsOpen(true)}\r\n          variants={buttonVariants}\r\n          animate={isOpen ? 'open' : 'closed'}\r\n          transition={animationConfig}\r\n          whileHover={{ scale: 1.05 }}\r\n          whileTap={{ scale: 0.95 }}\r\n        >\r\n          <Menu />\r\n          {/* Open */}\r\n        </motion.button>\r\n      )}\r\n\r\n      <AnimatePresence>\r\n        {isOpen && (\r\n          <div\r\n            className={`fixed w-full h-full top-0 left-0 z-9999 ${className}`}\r\n          >\r\n            {/* Overlay */}\r\n            <motion.div\r\n              className={`absolute w-full h-full top-0 left-0 ${overlayClassName}`}\r\n              style={{ backgroundColor: overlayColor }}\r\n              onClick={() => setIsOpen(false)}\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n              transition={{ duration: 0.3 }}\r\n            />\r\n\r\n            {/* Drawer */}\r\n            <motion.div\r\n              className={`absolute h-full shadow-[8px_1px_21px_0px_rgba(17,17,26,0.1)] ${drawerPositionClasses} ${contentClassName}`}\r\n              style={{\r\n                backgroundColor,\r\n                width: `${width}px`,\r\n                padding: '60px 30px 30px 30px',\r\n                boxSizing: 'border-box',\r\n              }}\r\n              drag={enableDrag ? 'x' : false}\r\n              dragElastic={0.1}\r\n              dragConstraints={getDragConstraints()}\r\n              dragMomentum={false}\r\n              onDragEnd={handleDragEnd}\r\n              variants={getDrawerVariants()}\r\n              initial='closed'\r\n              animate='open'\r\n              exit='closed'\r\n              transition={animationConfig}\r\n            >\r\n              {/* Close Button */}\r\n              {showToggleButton && (\r\n                <motion.button\r\n                  className='absolute top-2 right-4 p-2 text-black cursor-pointer'\r\n                  onClick={() => setIsOpen(false)}\r\n                  whileHover={{ scale: 1.1 }}\r\n                  whileTap={{ scale: 0.9 }}\r\n                  transition={{ duration: 0.2 }}\r\n                >\r\n                  <X size={20} /> {/* Close */}\r\n                </motion.button>\r\n              )}\r\n\r\n              {/* Content */}\r\n              <div className='h-full overflow-y-auto'>{children}</div>\r\n            </motion.div>\r\n          </div>\r\n        )}\r\n      </AnimatePresence>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MotionDrawer;\r\n",
      "type": "registry:component"
    }
  ]
}