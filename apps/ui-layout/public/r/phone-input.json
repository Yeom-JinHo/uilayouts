{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "phone-input",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "react-phone-number-input",
    "zod"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/phone-input.tsx",
      "content": "'use client';\r\nimport { CheckIcon, ChevronsUpDown } from 'lucide-react';\r\nimport * as React from 'react';\r\nimport * as RPNInput from 'react-phone-number-input';\r\nimport flags from 'react-phone-number-input/flags';\r\nimport { Button } from '@/components/website/ui/button';\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from '@/components/website/ui/command';\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from '@/components/website/ui/popover';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { ScrollArea } from '@/components/website/ui/scroll-area';\r\n\r\ntype PhoneInputProps = Omit<\r\n  React.InputHTMLAttributes<HTMLInputElement>,\r\n  'onChange' | 'value'\r\n> &\r\n  Omit<RPNInput.Props<typeof RPNInput.default>, 'onChange'> & {\r\n    onChange?: (value: RPNInput.Value) => void;\r\n  };\r\nconst PhoneInput: React.ForwardRefExoticComponent<PhoneInputProps> =\r\n  React.forwardRef<React.ElementRef<typeof RPNInput.default>, PhoneInputProps>(\r\n    ({ className, onChange, ...props }, ref) => {\r\n      return (\r\n        <RPNInput.default\r\n          ref={ref}\r\n          className={cn('flex', className)}\r\n          flagComponent={FlagComponent}\r\n          countrySelectComponent={CountrySelect}\r\n          inputComponent={InputComponent}\r\n          /**\r\n           * Handles the onChange event.\r\n           *\r\n           * react-phone-number-input might trigger the onChange event as undefined\r\n           * when a valid phone number is not entered. To prevent this,\r\n           * the value is coerced to an empty string.\r\n           *\r\n           * @param {E164Number | undefined} value - The entered value\r\n           */\r\n          // @ts-ignore\r\n          onChange={(value) => onChange?.(value || '')}\r\n          {...props}\r\n        />\r\n      );\r\n    }\r\n  );\r\nPhoneInput.displayName = 'PhoneInput';\r\n\r\nconst InputComponent = React.forwardRef<HTMLInputElement, any>(\r\n  ({ className, ...props }, ref) => (\r\n    <input\r\n      className={cn(\r\n        'rounded-e-lg rounded-s-none px-2 bg-primary-base outline-none w-full ',\r\n        className\r\n      )}\r\n      {...props}\r\n      ref={ref}\r\n    />\r\n  )\r\n);\r\nInputComponent.displayName = 'InputComponent';\r\n\r\ntype CountrySelectOption = { label: string; value: RPNInput.Country };\r\n\r\ntype CountrySelectProps = {\r\n  disabled?: boolean;\r\n  value: RPNInput.Country;\r\n  onChange: (value: RPNInput.Country) => void;\r\n  options: CountrySelectOption[];\r\n};\r\n\r\nconst CountrySelect = ({\r\n  disabled,\r\n  value,\r\n  onChange,\r\n  options,\r\n}: CountrySelectProps) => {\r\n  const handleSelect = React.useCallback(\r\n    (country: RPNInput.Country) => {\r\n      onChange(country);\r\n    },\r\n    [onChange]\r\n  );\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          type='button'\r\n          variant={'outline'}\r\n          className={cn('flex gap-1 rounded-e-none bg-primary-base rounded-s-lg px-3')}\r\n          disabled={disabled}\r\n        >\r\n          <FlagComponent country={value} countryName={value} />\r\n          <ChevronsUpDown\r\n            className={cn(\r\n              '-mr-2 h-4 w-4 opacity-50',\r\n              disabled ? 'hidden' : 'opacity-100'\r\n            )}\r\n          />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className='w-[300px] p-0'>\r\n        <Command className='dark:bg-neutral-950 border dark:border-neutral-800 border-neutral-200'>\r\n          <CommandList>\r\n            <ScrollArea className='h-72'>\r\n              <CommandInput placeholder='Search country...' />\r\n              <CommandEmpty>No country found.</CommandEmpty>\r\n              <CommandGroup>\r\n                {options\r\n                  .filter((x) => x.value)\r\n                  .map((option) => (\r\n                    <CommandItem\r\n                      className='gap-2'\r\n                      key={option.value}\r\n                      onSelect={() => handleSelect(option.value)}\r\n                    >\r\n                      <FlagComponent\r\n                        country={option.value}\r\n                        countryName={option.label}\r\n                      />\r\n                      <span className='flex-1 text-sm'>{option.label}</span>\r\n                      {option.value && (\r\n                        <span className='text-foreground/50 text-sm'>\r\n                          {`+${RPNInput.getCountryCallingCode(option.value)}`}\r\n                        </span>\r\n                      )}\r\n                      <CheckIcon\r\n                        className={cn(\r\n                          'ml-auto h-4 w-4',\r\n                          option.value === value ? 'opacity-100' : 'opacity-0'\r\n                        )}\r\n                      />\r\n                    </CommandItem>\r\n                  ))}\r\n              </CommandGroup>\r\n            </ScrollArea>\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst FlagComponent = ({ country, countryName }: RPNInput.FlagProps) => {\r\n  const Flag = flags[country];\r\n\r\n  return (\r\n    <span className='bg-foreground/20 flex h-4 w-6 overflow-hidden rounded-sm'>\r\n      {Flag && <Flag title={countryName} />}\r\n    </span>\r\n  );\r\n};\r\nFlagComponent.displayName = 'FlagComponent';\r\n\r\nexport { PhoneInput };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./registry/components/globe/globe.tsx",
      "content": "'use client';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport createGlobe from 'cobe';\r\nimport { cn } from '@/lib/utils';\r\ninterface EarthProps {\r\n  className?: string;\r\n  theta?: number;\r\n  dark?: number;\r\n  scale?: number;\r\n  diffuse?: number;\r\n  mapSamples?: number;\r\n  mapBrightness?: number;\r\n  baseColor?: [number, number, number];\r\n  markerColor?: [number, number, number];\r\n  glowColor?: [number, number, number];\r\n}\r\nconst Earth: React.FC<EarthProps> = ({\r\n  className,\r\n  theta = 0.25,\r\n  dark = 1,\r\n  scale = 1.1,\r\n  diffuse = 1.2,\r\n  mapSamples = 40000,\r\n  mapBrightness = 6,\r\n  baseColor = [0.4, 0.6509, 1],\r\n  markerColor = [1, 0, 0],\r\n  glowColor = [0.2745, 0.5765, 0.898],\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    let width = 0;\r\n    const onResize = () =>\r\n      canvasRef.current && (width = canvasRef.current.offsetWidth);\r\n    window.addEventListener('resize', onResize);\r\n    onResize();\r\n    let phi = 0;\r\n\r\n    onResize();\r\n    const globe = createGlobe(canvasRef.current!, {\r\n      devicePixelRatio: 2,\r\n      width: width * 2,\r\n      height: width * 2,\r\n      phi: 0,\r\n      theta: theta,\r\n      dark: dark,\r\n      scale: scale,\r\n      diffuse: diffuse,\r\n      mapSamples: mapSamples,\r\n      mapBrightness: mapBrightness,\r\n      baseColor: baseColor,\r\n      markerColor: markerColor,\r\n      glowColor: glowColor,\r\n      opacity: 1,\r\n      offset: [0, 0],\r\n      markers: [\r\n        // longitude latitude\r\n      ],\r\n      onRender: (state: Record<string, any>) => {\r\n        // Called on every animation frame.\r\n        // `state` will be an empty object, return updated params.\\\r\n        state.phi = phi;\r\n        phi += 0.003;\r\n      },\r\n    });\r\n\r\n    return () => {\r\n      globe.destroy();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'flex items-center justify-center z-[10] w-full max-w-[350px] mx-auto',\r\n        className\r\n      )}\r\n    >\r\n      <canvas\r\n        ref={canvasRef}\r\n        style={{\r\n          width: '100%',\r\n          height: '100%',\r\n          maxWidth: '100%',\r\n          aspectRatio: '1',\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Earth;",
      "type": "registry:component"
    }
  ]
}