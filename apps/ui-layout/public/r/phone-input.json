{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "phone-input",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "react-phone-number-input",
    "zod"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/phone-input.tsx",
      "content": "'use client';\r\nimport { CheckIcon, ChevronsUpDown } from 'lucide-react';\r\nimport * as React from 'react';\r\nimport * as RPNInput from 'react-phone-number-input';\r\nimport flags from 'react-phone-number-input/flags';\r\nimport { Button } from '@/components/website/ui/button';\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from '@/components/website/ui/command';\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from '@/components/website/ui/popover';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { ScrollArea } from '@/components/website/ui/scroll-area';\r\n\r\ntype PhoneInputProps = Omit<\r\n  React.InputHTMLAttributes<HTMLInputElement>,\r\n  'onChange' | 'value'\r\n> &\r\n  Omit<RPNInput.Props<typeof RPNInput.default>, 'onChange'> & {\r\n    onChange?: (value: RPNInput.Value) => void;\r\n  };\r\nconst PhoneInput: React.ForwardRefExoticComponent<PhoneInputProps> =\r\n  React.forwardRef<React.ElementRef<typeof RPNInput.default>, PhoneInputProps>(\r\n    ({ className, onChange, ...props }, ref) => {\r\n      return (\r\n        <RPNInput.default\r\n          ref={ref}\r\n          className={cn('flex', className)}\r\n          flagComponent={FlagComponent}\r\n          countrySelectComponent={CountrySelect}\r\n          inputComponent={InputComponent}\r\n          /**\r\n           * Handles the onChange event.\r\n           *\r\n           * react-phone-number-input might trigger the onChange event as undefined\r\n           * when a valid phone number is not entered. To prevent this,\r\n           * the value is coerced to an empty string.\r\n           *\r\n           * @param {E164Number | undefined} value - The entered value\r\n           */\r\n          // @ts-ignore\r\n          onChange={(value) => onChange?.(value || '')}\r\n          {...props}\r\n        />\r\n      );\r\n    }\r\n  );\r\nPhoneInput.displayName = 'PhoneInput';\r\n\r\nconst InputComponent = React.forwardRef<HTMLInputElement, any>(\r\n  ({ className, ...props }, ref) => (\r\n    <input\r\n      className={cn(\r\n        'rounded-e-lg rounded-s-none px-2 bg-primary-base outline-hidden w-full ',\r\n        className\r\n      )}\r\n      {...props}\r\n      ref={ref}\r\n    />\r\n  )\r\n);\r\nInputComponent.displayName = 'InputComponent';\r\n\r\ntype CountrySelectOption = { label: string; value: RPNInput.Country };\r\n\r\ntype CountrySelectProps = {\r\n  disabled?: boolean;\r\n  value: RPNInput.Country;\r\n  onChange: (value: RPNInput.Country) => void;\r\n  options: CountrySelectOption[];\r\n};\r\n\r\nconst CountrySelect = ({\r\n  disabled,\r\n  value,\r\n  onChange,\r\n  options,\r\n}: CountrySelectProps) => {\r\n  const handleSelect = React.useCallback(\r\n    (country: RPNInput.Country) => {\r\n      onChange(country);\r\n    },\r\n    [onChange]\r\n  );\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          type='button'\r\n          variant={'outline'}\r\n          className={cn('flex gap-1 rounded-e-none bg-primary-base rounded-s-lg px-3')}\r\n          disabled={disabled}\r\n        >\r\n          <FlagComponent country={value} countryName={value} />\r\n          <ChevronsUpDown\r\n            className={cn(\r\n              '-mr-2 h-4 w-4 opacity-50',\r\n              disabled ? 'hidden' : 'opacity-100'\r\n            )}\r\n          />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className='w-[300px] p-0'>\r\n        <Command className='dark:bg-neutral-950 border dark:border-neutral-800 border-neutral-200'>\r\n          <CommandList>\r\n            <ScrollArea className='h-72'>\r\n              <CommandInput placeholder='Search country...' />\r\n              <CommandEmpty>No country found.</CommandEmpty>\r\n              <CommandGroup>\r\n                {options\r\n                  .filter((x) => x.value)\r\n                  .map((option) => (\r\n                    <CommandItem\r\n                      className='gap-2'\r\n                      key={option.value}\r\n                      onSelect={() => handleSelect(option.value)}\r\n                    >\r\n                      <FlagComponent\r\n                        country={option.value}\r\n                        countryName={option.label}\r\n                      />\r\n                      <span className='flex-1 text-sm'>{option.label}</span>\r\n                      {option.value && (\r\n                        <span className='text-foreground/50 text-sm'>\r\n                          {`+${RPNInput.getCountryCallingCode(option.value)}`}\r\n                        </span>\r\n                      )}\r\n                      <CheckIcon\r\n                        className={cn(\r\n                          'ml-auto h-4 w-4',\r\n                          option.value === value ? 'opacity-100' : 'opacity-0'\r\n                        )}\r\n                      />\r\n                    </CommandItem>\r\n                  ))}\r\n              </CommandGroup>\r\n            </ScrollArea>\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst FlagComponent = ({ country, countryName }: RPNInput.FlagProps) => {\r\n  const Flag = flags[country];\r\n\r\n  return (\r\n    <span className='bg-foreground/20 flex h-4 w-6 overflow-hidden rounded-xs'>\r\n      {Flag && <Flag title={countryName} />}\r\n    </span>\r\n  );\r\n};\r\nFlagComponent.displayName = 'FlagComponent';\r\n\r\nexport { PhoneInput };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/button.tsx",
      "content": "import * as React from 'react';\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n        destructive:\r\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\r\n        outline:\r\n          'border border-input dark:bg-neutral-800 bg-neutral-50 hover:bg-accent hover:text-accent-foreground',\r\n        secondary:\r\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n        link: 'text-primary underline-offset-4 hover:underline',\r\n        uilayouts:\r\n          'dark:bg-zinc-900 bg-neutral-200 dark:text-white text-black border dark:border-neutral-800',\r\n      },\r\n      size: {\r\n        default: 'h-10 px-4 py-2',\r\n        sm: 'h-9 rounded-md px-3',\r\n        lg: 'h-11 rounded-md px-8',\r\n        icon: 'h-10 w-10',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nButton.displayName = 'Button';\r\n\r\nexport { Button, buttonVariants };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/command.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { type DialogProps } from '@radix-ui/react-dialog';\r\n\r\nimport { Command as CommandPrimitive } from 'cmdk';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { Dialog, DialogContent } from '@/components/website/ui/dialog';\r\nimport { Search } from 'lucide-react';\r\n\r\nconst Command = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive\r\n    ref={ref}\r\n    className={cn(\r\n      'flex h-full w-full flex-col overflow-hidden rounded-md dark:bg-neutral-800 bg-neutral-50 text-popover-foreground',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nCommand.displayName = CommandPrimitive.displayName;\r\n\r\ninterface CommandDialogProps extends DialogProps {}\r\n\r\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\r\n  return (\r\n    <Dialog {...props}>\r\n      <DialogContent className='overflow-hidden p-0'>\r\n        <Command className='[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5'>\r\n          {children}\r\n        </Command>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst CommandInput = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Input>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\r\n>(({ className, ...props }, ref) => (\r\n  <div className='flex items-center border-b px-3' cmdk-input-wrapper=''>\r\n    <Search className='mr-2 h-4 w-4 shrink-0 opacity-50' />\r\n    <CommandPrimitive.Input\r\n      ref={ref}\r\n      className={cn(\r\n        'flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </div>\r\n));\r\n\r\nCommandInput.displayName = CommandPrimitive.Input.displayName;\r\n\r\nconst CommandList = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.List\r\n    ref={ref}\r\n    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandList.displayName = CommandPrimitive.List.displayName;\r\n\r\nconst CommandEmpty = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Empty>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\r\n>((props, ref) => (\r\n  <CommandPrimitive.Empty\r\n    ref={ref}\r\n    className='py-6 text-center text-sm'\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\r\n\r\nconst CommandGroup = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Group>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Group\r\n    ref={ref}\r\n    className={cn(\r\n      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\r\n\r\nconst CommandSeparator = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Separator\r\n    ref={ref}\r\n    className={cn('-mx-1 h-px bg-border', className)}\r\n    {...props}\r\n  />\r\n));\r\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\r\n\r\nconst CommandItem = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      'relative flex cursor-default select-none items-center rounded-xs px-2 py-1.5 text-sm outline-hidden dark:aria-selected:bg-neutral-950 aria-selected:bg-neutral-200 aria-selected:text-accent-foreground data-[disabled=\"true\"]:pointer-events-none data-[disabled=\"true\"]:opacity-50',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandItem.displayName = CommandPrimitive.Item.displayName;\r\n\r\nconst CommandShortcut = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLSpanElement>) => {\r\n  return (\r\n    <span\r\n      className={cn(\r\n        'ml-auto text-xs tracking-widest text-muted-foreground',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\nCommandShortcut.displayName = 'CommandShortcut';\r\n\r\nexport {\r\n  Command,\r\n  CommandDialog,\r\n  CommandInput,\r\n  CommandList,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandItem,\r\n  CommandShortcut,\r\n  CommandSeparator,\r\n};\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/popover.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as PopoverPrimitive from '@radix-ui/react-popover';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst Popover = PopoverPrimitive.Root;\r\n\r\nconst PopoverTrigger = PopoverPrimitive.Trigger;\r\n\r\nconst PopoverContent = React.forwardRef<\r\n  React.ElementRef<typeof PopoverPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\r\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\r\n  <PopoverPrimitive.Portal>\r\n    <PopoverPrimitive.Content\r\n      ref={ref}\r\n      align={align}\r\n      sideOffset={sideOffset}\r\n      className={cn(\r\n        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-hidden data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </PopoverPrimitive.Portal>\r\n));\r\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\r\n\r\nexport { Popover, PopoverTrigger, PopoverContent };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/scroll-area.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst ScrollArea = React.forwardRef<\r\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <ScrollAreaPrimitive.Root\r\n    ref={ref}\r\n    className={cn('relative overflow-hidden', className)}\r\n    {...props}\r\n  >\r\n    <ScrollAreaPrimitive.Viewport className='h-full w-full rounded-[inherit]'>\r\n      {children}\r\n    </ScrollAreaPrimitive.Viewport>\r\n    <ScrollBar />\r\n    <ScrollAreaPrimitive.Corner />\r\n  </ScrollAreaPrimitive.Root>\r\n));\r\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\r\n\r\nconst ScrollBar = React.forwardRef<\r\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\r\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n>(({ className, orientation = 'vertical', ...props }, ref) => (\r\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\r\n    ref={ref}\r\n    orientation={orientation}\r\n    className={cn(\r\n      'flex touch-none select-none transition-colors',\r\n      orientation === 'vertical' &&\r\n        'h-full w-2.5 border-l border-l-transparent p-px',\r\n      orientation === 'horizontal' &&\r\n        'h-2.5 flex-col border-t border-t-transparent p-px',\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ScrollAreaPrimitive.ScrollAreaThumb className='relative flex-1 rounded-full dark:bg-neutral-800 bg-neutral-200' />\r\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n));\r\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\r\n\r\nexport { ScrollArea, ScrollBar };\r\n",
      "type": "registry:component"
    }
  ]
}