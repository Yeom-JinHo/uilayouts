{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tags-input",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/tags-input.tsx",
      "content": "'use client';\nimport React, { useState, useRef, useEffect } from 'react';\n\ninterface TagsInputProps {\n  tags: string[];\n  setTags: React.Dispatch<React.SetStateAction<string[]>>;\n  editTag?: boolean;\n}\n\nexport const TagsInput: React.FC<TagsInputProps> = ({\n  tags,\n  setTags,\n  editTag = true,\n}) => {\n  const [input, setInput] = useState('');\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\n  const editInputRef = useRef<HTMLInputElement>(null);\n\n  const handleAddTag = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const trimmedInput = input.trim();\n\n    if ((e.key === 'Enter' || e.key === ',') && trimmedInput) {\n      e.preventDefault();\n      if (editingIndex !== null) {\n        const updatedTags = [...tags];\n        updatedTags[editingIndex] = trimmedInput;\n        setTags(updatedTags);\n        setEditingIndex(null);\n      } else if (!tags.includes(trimmedInput)) {\n        setTags([...tags, trimmedInput]);\n      }\n      setInput('');\n    }\n  };\n\n  const handleRemoveTag = (tag: string) => {\n    setTags(tags.filter((t) => t !== tag));\n    if (editingIndex !== null) {\n      setEditingIndex(null);\n    }\n  };\n\n  const handleEditTag = (index: number) => {\n    if (editTag) {\n      setInput(tags[index]);\n      setEditingIndex(index);\n      setTimeout(() => editInputRef.current?.focus(), 0); // Focus on edit input\n    }\n  };\n\n  const handleBlur = () => {\n    if (editingIndex !== null) {\n      const updatedTags = [...tags];\n      const trimmedInput = input.trim();\n      if (trimmedInput) {\n        updatedTags[editingIndex] = trimmedInput;\n      } else {\n        updatedTags.splice(editingIndex, 1);\n      }\n      setTags(updatedTags);\n      setEditingIndex(null);\n    }\n    setInput('');\n  };\n\n  useEffect(() => {\n    // Resize the input width based on text content\n    if (editInputRef.current) {\n      editInputRef.current.style.width = `${input.length + 1}ch`;\n    }\n  }, [input]);\n\n  return (\n    <div className='flex flex-wrap items-center gap-2 p-2 border-2 rounded-md focus-within:border-blue-500 bg-primary-base'>\n      {tags.map((tag, index) => (\n        <div key={tag} className='relative'>\n          {editTag && editingIndex === index ? (\n            <input\n              ref={editInputRef}\n              type='text'\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleAddTag}\n              onBlur={handleBlur}\n              className='px-2 py-1 text-sm border   rounded outline-none'\n              placeholder='Edit tag...'\n              style={{ width: `${input.length + 1 * 1.2}px` }}\n              autoFocus\n            />\n          ) : (\n            <span\n              onClick={() => handleEditTag(index)}\n              className='flex items-center gap-2 px-1 pl-2 py-1 text-sm font-medium text-white bg-blue-500 rounded cursor-pointer hover:bg-blue-600'\n            >\n              {tag}\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleRemoveTag(tag);\n                }}\n                className='text-primary  px-1 focus:outline-none bg-primary-base rounded'\n              >\n                &times;\n              </button>\n            </span>\n          )}\n        </div>\n      ))}\n      <input\n        type='text'\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        onKeyDown={handleAddTag}\n        className={`flex-grow px-2 py-1 text-sm border-none outline-none bg-primary-base rounded-md ${\n          editingIndex !== null ? 'opacity-0' : 'opacity-100'\n        }`}\n        placeholder='Add a tag...'\n      />\n    </div>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}