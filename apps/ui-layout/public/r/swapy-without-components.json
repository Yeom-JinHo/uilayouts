{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "swapy-without-components",
  "type": "registry:component",
  "dependencies": [
    "swapy"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/swapy/swapy-without-components.tsx",
      "content": "\"use client\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Swapy } from \"swapy\";\r\nimport { createSwapy } from \"swapy\";\r\n\r\nconst slots = [\r\n  { slot: \"a\", content: \"A\", bg: \"bg-emerald-500\", hasHandle: false },\r\n  { slot: \"b\", content: \"B\", bg: \"bg-rose-500\", hasHandle: true },\r\n  { slot: \"c\", content: \"C\", bg: \"bg-blue-500\", hasHandle: false },\r\n  { slot: \"d\", content: \"D\", bg: \"bg-purple-500\", hasHandle: false },\r\n  { slot: \"e\", content: \"E\", bg: \"bg-pink-500\", hasHandle: false },\r\n  { slot: \"f\", content: \"F\", bg: \"bg-yellow-400\", hasHandle: true },\r\n  { slot: \"g\", content: \"G\", bg: \"bg-green-500\", hasHandle: true },\r\n  { slot: \"h\", content: \"H\", bg: \"bg-orange-500\", hasHandle: false },\r\n  { slot: \"i\", content: \"I\", bg: \"bg-cyan-500\", hasHandle: false },\r\n];\r\n\r\nfunction index() {\r\n  const swapyRef = useRef<Swapy | null>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (containerRef.current) {\r\n      swapyRef.current = createSwapy(containerRef.current, {\r\n        // animation: 'dynamic'\r\n        // swapMode: 'drop',\r\n        // autoScrollOnDrag: true,\r\n        // enabled: true,\r\n        // dragAxis: 'x',\r\n        // dragOnHold: true\r\n      });\r\n\r\n      // swapyRef.current.enable(false)\r\n      // swapyRef.current.destroy()\r\n      // console.log(swapyRef.current.slotItemMap())\r\n\r\n      swapyRef.current.onBeforeSwap((event) => {\r\n        console.log(\"beforeSwap\", event);\r\n        // This is for dynamically enabling and disabling swapping.\r\n        // Return true to allow swapping, and return false to prevent swapping.\r\n        return true;\r\n      });\r\n\r\n      swapyRef.current.onSwapStart((event) => {\r\n        console.log(\"start\", event);\r\n      });\r\n      swapyRef.current.onSwap((event) => {\r\n        console.log(\"swap\", event);\r\n      });\r\n      swapyRef.current.onSwapEnd((event) => {\r\n        console.log(\"end\", event);\r\n      });\r\n    }\r\n    return () => {\r\n      swapyRef.current?.destroy();\r\n    };\r\n  }, []);\r\n  return (\r\n    <div\r\n      className=\"w-full mx-auto grid xl:grid-cols-[3fr_5fr_2fr]  md:grid-cols-[3fr_5fr_2fr] grid-cols-[3fr_5fr_2fr] gap-4\"\r\n      ref={containerRef}\r\n    >\r\n      {slots.map(({ slot, content, bg, hasHandle }) => (\r\n        <div\r\n          key={slot}\r\n          className={`slot w-full h-32 rounded-[10px] data-swapy-highlighted:bg-neutral-200 dark:data-swapy-highlighted:bg-neutral-800`}\r\n          data-swapy-slot={slot}\r\n        >\r\n          {content && (\r\n            <div\r\n              className={`item relative flex flex-col items-center justify-center rounded-[10px] w-full h-full  ${bg}`}\r\n              data-swapy-item={slot}\r\n            >\r\n              {hasHandle && (\r\n                <div\r\n                  className=\"cursor-grab w-6 h-6 opacity-50 absolute top-[14px] left-[10px]\"\r\n                  data-swapy-handle\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"24\"\r\n                    height=\"24\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"2\"\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    className=\"lucide lucide-grip-vertical-icon lucide-grip-vertical\"\r\n                  >\r\n                    <circle cx=\"9\" cy=\"12\" r=\"1\" />\r\n                    <circle cx=\"9\" cy=\"5\" r=\"1\" />\r\n                    <circle cx=\"9\" cy=\"19\" r=\"1\" />\r\n                    <circle cx=\"15\" cy=\"12\" r=\"1\" />\r\n                    <circle cx=\"15\" cy=\"5\" r=\"1\" />\r\n                    <circle cx=\"15\" cy=\"19\" r=\"1\" />\r\n                  </svg>\r\n                </div>\r\n              )}\r\n              <div>{content}</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default index;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/ui/swapy.tsx",
      "content": "'use client';\r\n\r\nimport type React from 'react';\r\nimport { useEffect, useRef } from 'react';\r\nimport { createSwapy, type SlotItemMapArray } from 'swapy';\r\nimport { cn } from '@/lib/utils';\r\n\r\ntype AnimationType = 'dynamic' | 'spring' | 'none';\r\ntype SwapMode = 'hover' | 'drop';\r\n\r\ntype Config = {\r\n  animation: AnimationType;\r\n  continuousMode: boolean;\r\n  manualSwap: boolean;\r\n  swapMode: SwapMode;\r\n  autoScrollOnDrag: boolean;\r\n};\r\n\r\ntype SwapyLayoutProps = {\r\n  id: string;\r\n  enable?: boolean;\r\n  onSwap?: (event: { newSlotItemMap: { asArray: SlotItemMapArray } }) => void;\r\n  config?: Partial<Config>;\r\n  className?: string;\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport const SwapyLayout = ({\r\n  id,\r\n  onSwap,\r\n  config = {},\r\n  className,\r\n  children,\r\n}: SwapyLayoutProps) => {\r\n  const containerRef = useRef<HTMLDivElement | null>(null);\r\n  const swapyRef = useRef<ReturnType<typeof createSwapy> | null>(null);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n    if (!container) return;\r\n\r\n    swapyRef.current = createSwapy(container, config);\r\n\r\n    if (onSwap) {\r\n      swapyRef.current.onSwap(onSwap);\r\n    }\r\n\r\n    return () => {\r\n      swapyRef.current?.destroy();\r\n    };\r\n  }, [config, onSwap]);\r\n\r\n  return (\r\n    <div id={id} ref={containerRef} className={className}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const DragHandle = ({ className }: { className?: string }) => {\r\n  return (\r\n    <div\r\n      data-swapy-handle\r\n      className={cn(\r\n        'absolute top-2 left-2 cursor-grab  text-gray-500  rounded-md bg-transparent  active:cursor-grabbing  ',\r\n        className\r\n      )}\r\n    >\r\n      <svg\r\n        xmlns='http://www.w3.org/2000/svg'\r\n        width='24'\r\n        height='24'\r\n        viewBox='0 0 24 24'\r\n        fill='none'\r\n        stroke='currentColor'\r\n        strokeWidth='2'\r\n        strokeLinecap='round'\r\n        strokeLinejoin='round'\r\n        className='lucide lucide-grip-vertical-icon lucide-grip-vertical opacity-80'\r\n      >\r\n        <circle cx='9' cy='12' r='1' />\r\n        <circle cx='9' cy='5' r='1' />\r\n        <circle cx='9' cy='19' r='1' />\r\n        <circle cx='15' cy='12' r='1' />\r\n        <circle cx='15' cy='5' r='1' />\r\n        <circle cx='15' cy='19' r='1' />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const SwapySlot = ({\r\n  id,\r\n  className,\r\n  children,\r\n}: {\r\n  id: string;\r\n  className?: string;\r\n  children: React.ReactNode;\r\n}) => {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'data-swapy-highlighted:bg-neutral-200 dark:data-swapy-highlighted:bg-neutral-800',\r\n        className\r\n      )}\r\n      data-swapy-slot={id}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst dragOpacityClassMap: Record<number, string> = {\r\n  10: 'data-swapy-dragging:opacity-10',\r\n  20: 'data-swapy-dragging:opacity-20',\r\n  30: 'data-swapy-dragging:opacity-30',\r\n  40: 'data-swapy-dragging:opacity-40',\r\n  50: 'data-swapy-dragging:opacity-50',\r\n  60: 'data-swapy-dragging:opacity-60',\r\n  70: 'data-swapy-dragging:opacity-70',\r\n  80: 'data-swapy-dragging:opacity-80',\r\n  90: 'data-swapy-dragging:opacity-90',\r\n  100: 'data-swapy-dragging:opacity-100',\r\n};\r\n\r\nexport const SwapyItem = ({\r\n  id,\r\n  className,\r\n  children,\r\n  dragItemOpacity = 100, // default to 100\r\n}: {\r\n  id: string;\r\n  className?: string;\r\n  children: React.ReactNode;\r\n  dragItemOpacity?: number;\r\n}) => {\r\n  const opacityClass =\r\n    dragOpacityClassMap[dragItemOpacity] ?? 'data-swapy-dragging:opacity-50';\r\n  return (\r\n    <div className={cn(opacityClass, className)} data-swapy-item={id}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}