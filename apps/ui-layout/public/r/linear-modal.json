{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "linear-modal",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/linear-modal.tsx",
      "content": "'use client';\r\n\r\nimport React, {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useId,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport {\r\n  motion,\r\n  AnimatePresence,\r\n  MotionConfig,\r\n  Transition,\r\n  Variant,\r\n} from 'motion/react';\r\nimport { createPortal } from 'react-dom';\r\nimport { cn } from '@/lib/utils';\r\nimport { XIcon } from 'lucide-react';\r\n\r\ninterface DialogContextType {\r\n  isOpen: boolean;\r\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n  uniqueId: string;\r\n  triggerRef: React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nconst DialogContext = React.createContext<DialogContextType | null>(null);\r\n\r\nfunction useDialog() {\r\n  const context = useContext(DialogContext);\r\n  if (!context) {\r\n    throw new Error('useDialog must be used within a DialogProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\ntype DialogProviderProps = {\r\n  children: React.ReactNode;\r\n  transition?: Transition;\r\n};\r\n\r\nfunction DialogProvider({ children, transition }: DialogProviderProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const uniqueId = useId();\r\n  const triggerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const contextValue = useMemo(\r\n    () => ({ isOpen, setIsOpen, uniqueId, triggerRef }),\r\n    [isOpen, uniqueId]\r\n  );\r\n\r\n  return (\r\n    <DialogContext.Provider\r\n      //@ts-ignore\r\n      value={contextValue}\r\n    >\r\n      <MotionConfig transition={transition}>{children}</MotionConfig>\r\n    </DialogContext.Provider>\r\n  );\r\n}\r\n\r\ntype DialogProps = {\r\n  children: React.ReactNode;\r\n  transition?: Transition;\r\n};\r\n\r\nfunction Dialog({ children, transition }: DialogProps) {\r\n  return (\r\n    <DialogProvider>\r\n      <MotionConfig transition={transition}>{children}</MotionConfig>\r\n    </DialogProvider>\r\n  );\r\n}\r\n\r\ntype DialogTriggerProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n  triggerRef?: React.RefObject<HTMLDivElement>;\r\n};\r\n\r\nfunction DialogTrigger({\r\n  children,\r\n  className,\r\n  style,\r\n  triggerRef,\r\n}: DialogTriggerProps) {\r\n  const { setIsOpen, isOpen, uniqueId } = useDialog();\r\n\r\n  const handleClick = useCallback(() => {\r\n    setIsOpen(!isOpen);\r\n  }, [isOpen, setIsOpen]);\r\n\r\n  const handleKeyDown = useCallback(\r\n    (event: React.KeyboardEvent) => {\r\n      if (event.key === 'Enter' || event.key === ' ') {\r\n        event.preventDefault();\r\n        setIsOpen(!isOpen);\r\n      }\r\n    },\r\n    [isOpen, setIsOpen]\r\n  );\r\n\r\n  return (\r\n    <motion.div\r\n      ref={triggerRef}\r\n      layoutId={`dialog-${uniqueId}`}\r\n      className={cn('relative cursor-pointer', className)}\r\n      onClick={handleClick}\r\n      onKeyDown={handleKeyDown}\r\n      style={style}\r\n      role='button'\r\n      aria-haspopup='dialog'\r\n      aria-expanded={isOpen}\r\n      aria-controls={`dialog-content-${uniqueId}`}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\ntype DialogContent = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogContent({ children, className, style }: DialogContent) {\r\n  const { setIsOpen, isOpen, uniqueId, triggerRef } = useDialog();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [firstFocusableElement, setFirstFocusableElement] =\r\n    useState<HTMLElement | null>(null);\r\n  const [lastFocusableElement, setLastFocusableElement] =\r\n    useState<HTMLElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        setIsOpen(false);\r\n      }\r\n      if (event.key === 'Tab') {\r\n        if (!firstFocusableElement || !lastFocusableElement) return;\r\n\r\n        if (event.shiftKey) {\r\n          if (document.activeElement === firstFocusableElement) {\r\n            event.preventDefault();\r\n            lastFocusableElement.focus();\r\n          }\r\n        } else {\r\n          if (document.activeElement === lastFocusableElement) {\r\n            event.preventDefault();\r\n            firstFocusableElement.focus();\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [setIsOpen, firstFocusableElement, lastFocusableElement]);\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      document.body.style.overflow = 'hidden';\r\n\r\n      const focusableElements = containerRef.current?.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      if (focusableElements && focusableElements.length > 0) {\r\n        setFirstFocusableElement(focusableElements[0] as HTMLElement);\r\n        setLastFocusableElement(\r\n          focusableElements[focusableElements.length - 1] as HTMLElement\r\n        );\r\n        // Delay focus slightly to allow animation to start\r\n        requestAnimationFrame(() => {\r\n          (focusableElements[0] as HTMLElement).focus();\r\n        });\r\n      }\r\n\r\n      if (containerRef.current) {\r\n        containerRef.current.scrollTop = 0;\r\n      }\r\n    } else {\r\n      document.body.style.overflow = '';\r\n      triggerRef.current?.focus();\r\n    }\r\n  }, [isOpen, triggerRef]);\r\n\r\n  return (\r\n    <>\r\n      <motion.div\r\n        ref={containerRef}\r\n        layoutId={`dialog-${uniqueId}`}\r\n        className={cn('overflow-hidden', className)}\r\n        style={{\r\n          ...style,\r\n          willChange: 'transform, opacity', // GPU acceleration\r\n        }}\r\n        role='dialog'\r\n        aria-modal='true'\r\n        aria-labelledby={`dialog-title-${uniqueId}`}\r\n        aria-describedby={`dialog-description-${uniqueId}`}\r\n        initial={{ scale: 0.95, opacity: 0 }}\r\n        animate={{ scale: 1, opacity: 1 }}\r\n        exit={{ scale: 0.95, opacity: 0 }}\r\n        transition={{\r\n          type: 'spring',\r\n          damping: 25,\r\n          stiffness: 300,\r\n          mass: 0.8,\r\n        }}\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </>\r\n  );\r\n}\r\ntype DialogContainerProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  overlayClassName?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogContainer({\r\n  children,\r\n  className,\r\n  overlayClassName,\r\n}: DialogContainerProps) {\r\n  const { isOpen, setIsOpen, uniqueId } = useDialog();\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const drawerWrapper = document.querySelectorAll('[drawer-wrapper]');\r\n\r\n    if (isOpen) {\r\n      document.body.classList.add('overflow-hidden');\r\n      drawerWrapper.forEach((wrapper) => wrapper?.classList.add('open'));\r\n    } else {\r\n      document.body.classList.remove('overflow-hidden');\r\n      drawerWrapper.forEach((wrapper) => wrapper?.classList.remove('open'));\r\n    }\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [isOpen]);\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n    return () => {\r\n      setMounted(false);\r\n    };\r\n  }, []);\r\n\r\n  if (!mounted) return null;\r\n\r\n  return createPortal(\r\n    <AnimatePresence initial={false} mode='wait'>\r\n      {isOpen && (\r\n        <>\r\n          <motion.div\r\n            key={`backdrop-${uniqueId}`}\r\n            data-lenis-prevent\r\n            className={cn(\r\n              'fixed inset-0 h-full z-50 w-full backdrop-blur-xl dark:bg-[radial-gradient(125%_125%_at_50%_10%,#050505_40%,#243aff_100%)] bg-[radial-gradient(125%_125%_at_50%_10%,#ffffff_40%,#243aff_100%)]',\r\n              overlayClassName\r\n            )}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            transition={{\r\n              duration: 0.2,\r\n              ease: [0.4, 0.0, 0.4, 1],\r\n            }}\r\n            onClick={() => setIsOpen(false)}\r\n          ></motion.div>\r\n          <motion.div\r\n            className={cn(`fixed inset-0 z-50 w-fit mx-auto`, className)}\r\n            style={{ willChange: 'transform' }} // GPU acceleration for transforms\r\n          >\r\n            {children}\r\n          </motion.div>\r\n        </>\r\n      )}\r\n    </AnimatePresence>,\r\n    document.body\r\n  );\r\n}\r\ntype DialogTitleProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogTitle({ children, className, style }: DialogTitleProps) {\r\n  const { uniqueId } = useDialog();\r\n\r\n  return (\r\n    <motion.h1\r\n      layoutId={`dialog-title-container-${uniqueId}`}\r\n      className={className}\r\n      style={style}\r\n      layout\r\n    >\r\n      {children}\r\n    </motion.h1>\r\n  );\r\n}\r\n\r\ntype DialogSubtitleProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogSubtitle({ children, className, style }: DialogSubtitleProps) {\r\n  const { uniqueId } = useDialog();\r\n\r\n  return (\r\n    <motion.div\r\n      layoutId={`dialog-subtitle-container-${uniqueId}`}\r\n      className={className}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\ntype DialogDescriptionProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  disableLayoutAnimation?: boolean;\r\n  variants?: {\r\n    initial: Variant;\r\n    animate: Variant;\r\n    exit: Variant;\r\n  };\r\n};\r\n\r\nfunction DialogDescription({\r\n  children,\r\n  className,\r\n  variants,\r\n  disableLayoutAnimation,\r\n}: DialogDescriptionProps) {\r\n  const { uniqueId } = useDialog();\r\n\r\n  return (\r\n    <motion.div\r\n      key={`dialog-description-${uniqueId}`}\r\n      layoutId={\r\n        disableLayoutAnimation\r\n          ? undefined\r\n          : `dialog-description-content-${uniqueId}`\r\n      }\r\n      variants={variants}\r\n      className={className}\r\n      initial='initial'\r\n      animate='animate'\r\n      exit='exit'\r\n      id={`dialog-description-${uniqueId}`}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\ntype DialogImageProps = {\r\n  src: string;\r\n  alt: string;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogImage({ src, alt, className, style }: DialogImageProps) {\r\n  const { uniqueId } = useDialog();\r\n\r\n  return (\r\n    <motion.img\r\n      src={src}\r\n      alt={alt}\r\n      className={cn(className)}\r\n      layoutId={`dialog-img-${uniqueId}`}\r\n      style={style}\r\n    />\r\n  );\r\n}\r\n\r\ntype DialogCloseProps = {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  variants?: {\r\n    initial: Variant;\r\n    animate: Variant;\r\n    exit: Variant;\r\n  };\r\n};\r\n\r\nfunction DialogClose({ children, className, variants }: DialogCloseProps) {\r\n  const { setIsOpen, uniqueId } = useDialog();\r\n\r\n  const handleClose = useCallback(() => {\r\n    setIsOpen(false);\r\n  }, [setIsOpen]);\r\n\r\n  return (\r\n    <motion.button\r\n      onClick={handleClose}\r\n      type='button'\r\n      aria-label='Close dialog'\r\n      key={`dialog-close-${uniqueId}`}\r\n      className={cn('absolute right-6 top-6 text-white', className)}\r\n      initial='initial'\r\n      animate='animate'\r\n      exit='exit'\r\n      variants={variants}\r\n    >\r\n      {children || <XIcon size={24} />}\r\n    </motion.button>\r\n  );\r\n}\r\n\r\nexport {\r\n  Dialog,\r\n  DialogTrigger,\r\n  DialogContainer,\r\n  DialogContent,\r\n  DialogClose,\r\n  DialogTitle,\r\n  DialogSubtitle,\r\n  DialogDescription,\r\n  DialogImage,\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}