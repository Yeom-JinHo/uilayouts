{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "motion-number-input",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/motion-number/motion-number-input.tsx",
      "content": "'use client';\r\nimport { cn } from '@/lib/utils';\r\nimport NumberFlow from '@number-flow/react';\r\nimport { Minus, Plus } from 'lucide-react';\r\nimport * as React from 'react';\r\n\r\ntype Props = {\r\n  value?: number;\r\n  min?: number;\r\n  max?: number;\r\n  onChange?: (value: number) => void;\r\n};\r\n\r\nexport function Input({\r\n  value = 0,\r\n  min = -Infinity,\r\n  max = Infinity,\r\n  onChange,\r\n}: Props) {\r\n  const defaultValue = React.useRef(value);\r\n  const inputRef = React.useRef<HTMLInputElement>(null);\r\n  const [animated, setAnimated] = React.useState(true);\r\n  // Hide the caret during transitions so you can't see it shifting around:\r\n  const [showCaret, setShowCaret] = React.useState(true);\r\n\r\n  const handleInput: React.ChangeEventHandler<HTMLInputElement> = ({\r\n    currentTarget: el,\r\n  }) => {\r\n    setAnimated(false);\r\n    if (el.value === '') {\r\n      onChange?.(defaultValue.current);\r\n      return;\r\n    }\r\n    const num = parseInt(el.value);\r\n    if (\r\n      isNaN(num) ||\r\n      (min != null && num < min) ||\r\n      (max != null && num > max)\r\n    ) {\r\n      // Revert input's value:\r\n      el.value = String(value);\r\n    } else {\r\n      // Manually update value in case they e.g. start with a \"0\" or end with a \".\"\r\n      // which won't trigger a DOM update (because the number is the same):\r\n      el.value = String(num);\r\n      onChange?.(num);\r\n    }\r\n  };\r\n\r\n  const handlePointerDown =\r\n    (diff: number) => (event: React.PointerEvent<HTMLButtonElement>) => {\r\n      setAnimated(true);\r\n      if (event.pointerType === 'mouse') {\r\n        event?.preventDefault();\r\n        inputRef.current?.focus();\r\n      }\r\n      const newVal = Math.min(Math.max(value + diff, min), max);\r\n      onChange?.(newVal);\r\n    };\r\n\r\n  return (\r\n    <div className='group flex items-stretch rounded-md text-3xl font-semibold border w-fit mx-auto dark:bg-neutral-950 bg-neutral-50'>\r\n      <button\r\n        aria-hidden\r\n        tabIndex={-1}\r\n        className='flex items-center pl-[.5em] pr-[.325em]'\r\n        disabled={min != null && value <= min}\r\n        onPointerDown={handlePointerDown(-1)}\r\n      >\r\n        <Minus className='size-4' absoluteStrokeWidth strokeWidth={3.5} />\r\n      </button>\r\n      <div className=\"relative grid items-center justify-items-center text-center [grid-template-areas:'overlap'] *:[grid-area:overlap]\">\r\n        <input\r\n          ref={inputRef}\r\n          className={cn(\r\n            showCaret ? 'caret-primary' : 'caret-transparent',\r\n            'spin-hide w-[1.5em] bg-transparent py-2 text-center font-[inherit] text-transparent outline-hidden appearance-none'\r\n          )}\r\n          // Make sure to disable kerning, to match NumberFlow:\r\n          style={{ fontKerning: 'none' }}\r\n          type='number'\r\n          min={min}\r\n          step={1}\r\n          autoComplete='off'\r\n          inputMode='numeric'\r\n          max={max}\r\n          value={value}\r\n          onInput={handleInput}\r\n        />\r\n        <NumberFlow\r\n          value={value}\r\n          format={{ useGrouping: false }}\r\n          aria-hidden\r\n          animated={animated}\r\n          onAnimationsStart={() => setShowCaret(false)}\r\n          onAnimationsFinish={() => setShowCaret(true)}\r\n          className='pointer-events-none'\r\n          willChange\r\n        />\r\n      </div>\r\n      <button\r\n        aria-hidden\r\n        tabIndex={-1}\r\n        className='flex items-center pl-[.325em] pr-[.5em]'\r\n        disabled={max != null && value >= max}\r\n        onPointerDown={handlePointerDown(1)}\r\n      >\r\n        <Plus className='size-4' absoluteStrokeWidth strokeWidth={3.5} />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function index() {\r\n  const [value, setValue] = React.useState(0);\r\n  return (\r\n    <>\r\n      <Input value={value} min={0} max={99} onChange={setValue} />\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}