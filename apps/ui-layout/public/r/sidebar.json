{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sidebar",
  "type": "registry:component",
  "dependencies": [
    "vaul",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/drawer/vaul-sidebar.tsx",
      "content": "'use client';\r\nimport React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  ReactNode,\r\n} from 'react';\r\nimport { X } from 'lucide-react';\r\nimport { Drawer as VaulSidebar } from 'vaul';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface DrawerContextProps {\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n}\r\n\r\nconst DrawerContext = createContext<DrawerContextProps | undefined>(undefined);\r\n\r\nconst useSidebarDrawer = () => {\r\n  const context = useContext(DrawerContext);\r\n  if (!context) {\r\n    throw new Error('useDrawer must be used within a DrawerProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface DrawerSidebarProps {\r\n  children: ReactNode;\r\n  open?: boolean;\r\n  setOpen?: (open: boolean) => void;\r\n  direction?: 'left' | 'right';\r\n  outsideClose?: boolean;\r\n  className?: string;\r\n  triggerClassName?: string;\r\n  DefaultTrigger?: () => React.ReactNode; // Changed to a function that returns ReactNode\r\n}\r\n\r\nexport function SidebarDrawer({\r\n  children,\r\n  open: controlledOpen,\r\n  setOpen: controlledSetOpen,\r\n  direction = 'left',\r\n  outsideClose = true,\r\n  className,\r\n  triggerClassName,\r\n  DefaultTrigger, // Now a function prop\r\n}: DrawerSidebarProps) {\r\n  const [internalOpen, setInternalOpen] = useState(false);\r\n  const open = controlledOpen !== undefined ? controlledOpen : internalOpen;\r\n  const setOpen =\r\n    controlledSetOpen !== undefined ? controlledSetOpen : setInternalOpen;\r\n\r\n  const [isDesktop, setIsDesktop] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(min-width: 768px)');\r\n    const handleMediaChange = (event: MediaQueryListEvent) => {\r\n      setIsDesktop(event.matches);\r\n    };\r\n\r\n    setIsDesktop(mediaQuery.matches);\r\n    mediaQuery.addEventListener('change', handleMediaChange);\r\n\r\n    return () => {\r\n      mediaQuery.removeEventListener('change', handleMediaChange);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DrawerContext.Provider value={{ open, setOpen }}>\r\n      <>\r\n        {DefaultTrigger && (\r\n          <div onClick={() => setOpen(true)}>{DefaultTrigger()}</div>\r\n        )}\r\n\r\n        <VaulSidebar.Root\r\n          open={open}\r\n          direction={direction === 'right' ? 'right' : 'left'}\r\n          onOpenChange={setOpen}\r\n          dismissible={isDesktop ? false : true}\r\n        >\r\n          <VaulSidebar.Portal>\r\n            <VaulSidebar.Overlay\r\n              className='fixed inset-0 dark:bg-black/40 bg-white/50 backdrop-blur-sm z-50  '\r\n              onClick={() => setOpen(false)}\r\n            />\r\n            <VaulSidebar.Content\r\n              className={cn(\r\n                ` border-l z-50  ${\r\n                  outsideClose\r\n                    ? 'sm:w-[450px] w-[90%] h-[100%]  dark:bg-zinc-950 bg-zinc-100'\r\n                    : `w-full h-[100%]  `\r\n                } fixed bottom-0  ${\r\n                  direction === 'right' ? 'right-0' : 'left-0'\r\n                }`,\r\n                className\r\n              )}\r\n            >\r\n              <div\r\n                className={`${\r\n                  outsideClose\r\n                    ? 'w-full h-full'\r\n                    : 'dark:bg-gray-900 relative bg-white   border-r sm:w-[450px] w-[90%] h-full'\r\n                } `}\r\n              >\r\n                {isDesktop ? (\r\n                  <>\r\n                    <button\r\n                      className='flex justify-end w-full absolute right-2 top-2'\r\n                      onClick={() => setOpen(false)}\r\n                    >\r\n                      <X />\r\n                    </button>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <div\r\n                      className={`absolute top-[40%] ${\r\n                        direction === 'right' ? 'left-2' : 'right-2'\r\n                      } mx-auto h-16 w-[0.30rem] flex-shrink-0 rounded-full bg-gray-600 my-4`}\r\n                    />\r\n                  </>\r\n                )}\r\n                {children}\r\n              </div>\r\n            </VaulSidebar.Content>\r\n          </VaulSidebar.Portal>\r\n        </VaulSidebar.Root>\r\n      </>\r\n    </DrawerContext.Provider>\r\n  );\r\n}\r\n\r\nexport function DrawerContent({ children }: { children: ReactNode }) {\r\n  return <>{children}</>;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}