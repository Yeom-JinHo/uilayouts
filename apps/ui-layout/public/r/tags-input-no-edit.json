{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tags-input-no-edit",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/form/tags-input/tagsedit-false.tsx",
      "content": "'use client';\r\n\r\nimport { TagsInput } from '@/components/ui/tags-input';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\nexport default function App() {\r\n  const [tags, setTags] = useState<string[]>([]);\r\n\r\n  return (\r\n    <div className='max-w-md mx-auto py-16'>\r\n      <TagsInput\r\n        tags={tags}\r\n        setTags={setTags}\r\n        editTag={false}\r\n        className='lg:w-96 '\r\n      />\r\n      {/* <div className='mt-4'>\r\n        <p>Current Tags:</p>\r\n        <div className='flex gap-2 mt-2'>\r\n          {tags.map((tag) => (\r\n            <span\r\n              key={tag}\r\n              className='px-2 py-1 text-sm text-gray-700 bg-gray-200 rounded-sm'\r\n            >\r\n              {tag}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/ui/tags-input.tsx",
      "content": "'use client';\r\nimport { cn } from '@/lib/utils';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\ninterface TagsInputProps {\r\n  tags: string[];\r\n  setTags: React.Dispatch<React.SetStateAction<string[]>>;\r\n  editTag?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport const TagsInput: React.FC<TagsInputProps> = ({\r\n  tags,\r\n  setTags,\r\n  editTag = true,\r\n  className,\r\n}) => {\r\n  const [input, setInput] = useState('');\r\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\r\n  const editInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const handleAddTag = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const trimmedInput = input.trim();\r\n\r\n    if ((e.key === 'Enter' || e.key === ',') && trimmedInput) {\r\n      e.preventDefault();\r\n      if (editingIndex !== null) {\r\n        const updatedTags = [...tags];\r\n        updatedTags[editingIndex] = trimmedInput;\r\n        setTags(updatedTags);\r\n        setEditingIndex(null);\r\n      } else if (!tags.includes(trimmedInput)) {\r\n        setTags([...tags, trimmedInput]);\r\n      }\r\n      setInput('');\r\n    }\r\n  };\r\n\r\n  const handleRemoveTag = (tag: string) => {\r\n    setTags(tags.filter((t) => t !== tag));\r\n    if (editingIndex !== null) {\r\n      setEditingIndex(null);\r\n    }\r\n  };\r\n\r\n  const handleEditTag = (index: number) => {\r\n    if (editTag) {\r\n      setInput(tags[index]);\r\n      setEditingIndex(index);\r\n      setTimeout(() => editInputRef.current?.focus(), 0);\r\n    }\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (editingIndex !== null) {\r\n      const updatedTags = [...tags];\r\n      const trimmedInput = input.trim();\r\n      if (trimmedInput) {\r\n        updatedTags[editingIndex] = trimmedInput;\r\n      } else {\r\n        updatedTags.splice(editingIndex, 1);\r\n      }\r\n      setTags(updatedTags);\r\n      setEditingIndex(null);\r\n    }\r\n    setInput('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editInputRef.current) {\r\n      editInputRef.current.style.width = `${input.length + 1}ch`;\r\n    }\r\n  }, [input]);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'flex flex-wrap w-full items-center gap-2 p-2 border-2 rounded-md focus-within:border-blue-500 dark:bg-neutral-950 bg-neutral-50',\r\n        className\r\n      )}\r\n    >\r\n      {tags.map((tag, index) => (\r\n        <div key={tag} className='relative'>\r\n          {editTag && editingIndex === index ? (\r\n            <input\r\n              ref={editInputRef}\r\n              type='text'\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyDown={handleAddTag}\r\n              onBlur={handleBlur}\r\n              className='px-2 py-1 text-sm border dark:bg-neutral-950 bg-neutral-200 rounded-sm outline-hidden'\r\n              placeholder='Edit tag...'\r\n              style={{ width: `${input.length + 1 * 1.2}px` }}\r\n              autoFocus\r\n            />\r\n          ) : (\r\n            <div\r\n              onClick={() => handleEditTag(index)}\r\n              className='flex items-center gap-2 px-1 pl-2 py-1 text-sm font-medium text-white bg-blue-500 rounded-sm cursor-pointer hover:bg-blue-600'\r\n            >\r\n              {tag}\r\n              <button\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  handleRemoveTag(tag);\r\n                }}\r\n                className='text-primary px-1 focus:outline-hidden bg-primary-base rounded-sm'\r\n              >\r\n                &times;\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ))}\r\n      <input\r\n        type='text'\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        onKeyDown={handleAddTag}\r\n        className={`grow px-2 py-1 text-sm border-none outline-hidden  dark:bg-neutral-800 bg-neutral-50 rounded-md ${\r\n          editingIndex !== null ? 'opacity-0' : 'opacity-100'\r\n        }`}\r\n        placeholder='Add a tag...'\r\n      />\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}