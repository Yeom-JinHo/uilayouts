{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "faq-accordion",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/accordion/faq.tsx",
      "content": "'use client';\r\nimport React, { useState } from 'react';\r\nimport { AnimatePresence, motion } from 'motion/react';\r\nimport { Plus } from 'lucide-react';\r\nconst tabs = [\r\n  {\r\n    title: 'How do UI components improve UX?',\r\n    description:\r\n      'UI components can improve UX by providing familiar, consistent interactions that make it easy for users to navigate and interact with an application.',\r\n    imageUrl:\r\n      'https://images.unsplash.com/photo-1709949908058-a08659bfa922?q=80&w=1200&auto=format',\r\n  },\r\n  {\r\n    title: 'Common UI component design challenges?',\r\n    description:\r\n      'Some common challenges include maintaining consistency across different devices and screen sizes, ensuring compatibility with various browsers and assistive technologies, and balancing flexibility with ease of use.',\r\n    imageUrl:\r\n      'https://images.unsplash.com/photo-1548192746-dd526f154ed9?q=80&w=1200&auto=format',\r\n  },\r\n  {\r\n    title: 'Ensuring UI component responsiveness?',\r\n    description:\r\n      '     Developers can ensure the responsiveness of UI components by using techniques such as fluid layouts, flexible grids, and media queries to adapt the components to different screen sizes and orientations.',\r\n    imageUrl:\r\n      'https://images.unsplash.com/photo-1693581176773-a5f2362209e6?q=80&w=1200&auto=format',\r\n  },\r\n];\r\nfunction index() {\r\n  const [activeIndex, setActiveIndex] = useState<number | null>(0);\r\n  const [activeItem, setActiveItem] = useState<\r\n    | {\r\n      title: string;\r\n      description: string;\r\n      imageUrl: string;\r\n    }\r\n    | undefined\r\n  >(tabs[0]);\r\n\r\n  const handleClick = async (index: number) => {\r\n    setActiveIndex(activeIndex === index ? null : index);\r\n    const newActiveItem = tabs.find((_, i) => i === index);\r\n    setActiveItem(newActiveItem);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='container mx-auto pb-10 pt-2'>\r\n        <h1 className='uppercase text-center text-4xl font-bold pt-2 pb-4'>\r\n          FAQ\r\n        </h1>\r\n        <div className='h-fit border  rounded-lg p-2 dark:bg-[#111111] bg-[#F2F2F2]'>\r\n          {tabs.map((tab, index) => (\r\n            <motion.div\r\n              key={index}\r\n              className={`overflow-hidden ${index !== tabs.length - 1 ? 'border-b' : ''\r\n                }`}\r\n              onClick={() => handleClick(index)}\r\n            >\r\n              <button\r\n                className={`p-3 px-2 w-full cursor-pointer sm:text-base text-xs items-center transition-all font-semibold dark:text-white text-black   flex gap-2 \r\n               `}\r\n              >\r\n                <Plus\r\n                  className={`${activeIndex === index ? 'rotate-45' : 'rotate-0 '\r\n                    } transition-transform ease-in-out w-5 h-5  dark:text-gray-200 text-gray-600`}\r\n                />\r\n                {tab.title}\r\n              </button>\r\n              <AnimatePresence mode='sync'>\r\n                {activeIndex === index && (\r\n                  <motion.div\r\n                    initial={{ height: 0, opacity: 0 }}\r\n                    animate={{ height: 'auto', opacity: 1 }}\r\n                    exit={{ height: 0, opacity: 0 }}\r\n                    transition={{\r\n                      duration: 0.3,\r\n                      ease: 'easeInOut',\r\n                      delay: 0.14,\r\n                    }}\r\n                  >\r\n                    <p\r\n                      className={`dark:text-white text-black p-3 xl:text-base sm:text-sm text-xs pt-0 w-[90%]`}\r\n                    >\r\n                      {tab.description}\r\n                    </p>\r\n                  </motion.div>\r\n                )}\r\n              </AnimatePresence>\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default index;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/ui/accordion.tsx",
      "content": "'use client';\r\nimport React, { ReactNode, ReactElement, isValidElement } from 'react';\r\nimport { AnimatePresence, motion } from 'motion/react';\r\nimport { ChevronDown } from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ntype AccordionContextType = {\r\n  isActive: boolean;\r\n  value: string;\r\n  onChangeIndex: (value: string) => void;\r\n};\r\n\r\nconst AccordionContext = React.createContext<AccordionContextType>({\r\n  isActive: false,\r\n  value: '',\r\n  onChangeIndex: () => {},\r\n});\r\n\r\nconst useAccordion = () => React.useContext(AccordionContext);\r\n\r\nexport function AccordionContainer({\r\n  children,\r\n  className,\r\n}: {\r\n  children: ReactNode;\r\n  className?: string;\r\n}) {\r\n  return (\r\n    <div className={cn('grid grid-cols-2 gap-1', className)}>{children}</div>\r\n  );\r\n}\r\n\r\nexport function AccordionWrapper({ children }: { children: ReactNode }) {\r\n  return <div>{children}</div>;\r\n}\r\n\r\nexport function Accordion({\r\n  children,\r\n  multiple,\r\n  defaultValue,\r\n}: {\r\n  children: ReactNode;\r\n  multiple?: boolean;\r\n  defaultValue?: string | string[];\r\n}) {\r\n  const [activeIndex, setActiveIndex] = React.useState<string[]>(\r\n    multiple\r\n      ? defaultValue\r\n        ? Array.isArray(defaultValue)\r\n          ? defaultValue\r\n          : [defaultValue]\r\n        : []\r\n      : defaultValue\r\n        ? Array.isArray(defaultValue)\r\n          ? [defaultValue[0]]\r\n          : [defaultValue]\r\n        : []\r\n  );\r\n\r\n  function onChangeIndex(value: string) {\r\n    setActiveIndex((currentActiveIndex) => {\r\n      if (!multiple) {\r\n        return value === currentActiveIndex[0] ? [] : [value];\r\n      }\r\n\r\n      if (currentActiveIndex.includes(value)) {\r\n        return currentActiveIndex.filter((i) => i !== value);\r\n      }\r\n\r\n      return [...currentActiveIndex, value];\r\n    });\r\n  }\r\n\r\n  return React.Children.map(children, (child) => {\r\n    if (!isValidElement<{ value?: string }>(child)) return null;\r\n\r\n    const value = child.props.value ?? '';\r\n    const isActive = multiple\r\n      ? activeIndex.includes(value)\r\n      : activeIndex[0] === value;\r\n\r\n    return (\r\n      <AccordionContext.Provider value={{ isActive, value, onChangeIndex }}>\r\n        {React.cloneElement(child)}\r\n      </AccordionContext.Provider>\r\n    );\r\n  });\r\n}\r\n\r\nexport function AccordionItem({\r\n  children,\r\n  value,\r\n  className,\r\n}: {\r\n  children: ReactNode;\r\n  value: string;\r\n  className?: string;\r\n}) {\r\n  const { isActive } = useAccordion();\r\n\r\n  return (\r\n    <div\r\n      data-active={isActive || undefined}\r\n      className={cn(\r\n        `rounded-lg overflow-hidden mb-2`,\r\n         isActive\r\n            ? 'active border-2 dark:border-[#656fe2]  border-[#F2F2F2] dark:bg-[#E0ECFB] bg-[#F2F2F2]'\r\n            : 'bg-transparent border-2 dark:hover:border-[#656fe2]'\r\n        ,\r\n        className\r\n      )}\r\n      data-value={value}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function AccordionHeader({\r\n  children,\r\n  customIcon,\r\n  className,\r\n}: {\r\n  children: ReactNode;\r\n  customIcon?: boolean;\r\n  className?: string;\r\n}) {\r\n  const { isActive, value, onChangeIndex } = useAccordion();\r\n\r\n  return (\r\n    <motion.div\r\n      data-active={isActive || undefined}\r\n      className={`group p-4 cursor-pointer transition-all font-semibold    dark:text-white text-black dark:hover:bg-[#1e2a78] hover:bg-[#F2F2F2] dark:hover:text-white hover:text-black flex justify-between items-center ${\r\n        isActive\r\n          ? 'active dark:bg-[#1e2a78] bg-[#F2F2F2] '\r\n          : 'dark:bg-[#11112b] bg-white'\r\n      }\r\n      `}\r\n      onClick={() => onChangeIndex(value)}\r\n    >\r\n      {children}\r\n      {!customIcon && (\r\n        <ChevronDown\r\n          className={cn(\r\n            'transition-transform ',\r\n            isActive ? 'rotate-180' : 'rotate-0'\r\n          )}\r\n        />\r\n      )}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport function AccordionPanel({\r\n  children,\r\n  className,\r\n}: {\r\n  children: ReactNode;\r\n  className?: string;\r\n}) {\r\n  const { isActive } = useAccordion();\r\n\r\n  return (\r\n    <AnimatePresence initial={true}>\r\n      {isActive && (\r\n        <motion.div\r\n          data-active={isActive || undefined}\r\n          initial={{ height: 0, overflow: 'hidden' }}\r\n          animate={{ height: 'auto', overflow: 'hidden' }}\r\n          exit={{ height: 0 }}\r\n          transition={{ type: 'spring', duration: 0.3, bounce: 0 }}\r\n          className={cn('group dark:bg-white bg-[#F2F2F2]', className)}\r\n        >\r\n          <motion.article\r\n            initial={{ clipPath: 'polygon(0 0, 100% 0, 100% 0, 0 0)' }}\r\n            animate={{ clipPath: 'polygon(0 0, 100% 0, 100% 100%, 0% 100%)' }}\r\n            exit={{\r\n              clipPath: 'polygon(0 0, 100% 0, 100% 0, 0 0)',\r\n            }}\r\n            transition={{\r\n              type: 'spring',\r\n              duration: 0.4,\r\n              bounce: 0,\r\n            }}\r\n            className={`p-3 bg-transparent text-black `}\r\n          >\r\n            {children}\r\n          </motion.article>\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}