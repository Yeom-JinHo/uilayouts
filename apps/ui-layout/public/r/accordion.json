{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/accordion.tsx",
      "content": "\"use client\"\nimport React, { ReactNode, ReactElement, isValidElement } from 'react';\nimport { AnimatePresence, motion } from 'motion/react';\nimport { ChevronDown } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ntype AccordionContextType = {\n  isActive: boolean;\n  value: string;\n  onChangeIndex: (value: string) => void;\n};\n\nconst AccordionContext = React.createContext<AccordionContextType>({\n  isActive: false,\n  value: '',\n  onChangeIndex: () => {}\n});\n\nconst useAccordion = () => React.useContext(AccordionContext);\n\nexport function AccordionContainer({\n  children,\n  className,\n}: {\n  children: ReactNode;\n  className?: string;\n}) {\n  return (\n    <div className={cn('grid grid-cols-2 gap-1', className)}>{children}</div>\n  );\n}\n\nexport function AccordionWrapper({ \n  children \n}: { \n  children: ReactNode \n}) {\n  return <div>{children}</div>;\n}\n\nexport function Accordion({\n  children,\n  multiple,\n  defaultValue,\n}: {\n  children: ReactNode;\n  multiple?: boolean;\n  defaultValue?: string | string[];\n}) {\n  const [activeIndex, setActiveIndex] = React.useState<string[]>(\n    multiple ? (defaultValue ? (Array.isArray(defaultValue) ? defaultValue : [defaultValue]) : []) : \n    (defaultValue ? (Array.isArray(defaultValue) ? [defaultValue[0]] : [defaultValue]) : [])\n  );\n\n  function onChangeIndex(value: string) {\n    setActiveIndex((currentActiveIndex) => {\n      if (!multiple) {\n        return value === currentActiveIndex[0] ? [] : [value];\n      }\n\n      if (currentActiveIndex.includes(value)) {\n        return currentActiveIndex.filter((i) => i !== value);\n      }\n\n      return [...currentActiveIndex, value];\n    });\n  }\n\n  return React.Children.map(children, (child) => {\n    if (!isValidElement<{ value?: string }>(child)) return null;\n\n    const value = child.props.value ?? '';\n    const isActive = multiple\n      ? activeIndex.includes(value)\n      : activeIndex[0] === value;\n\n    return (\n      <AccordionContext.Provider value={{ isActive, value, onChangeIndex }}>\n        {React.cloneElement(child)}\n      </AccordionContext.Provider>\n    );\n  });\n}\n\nexport function AccordionItem({ \n  children, \n  value \n}: { \n  children: ReactNode; \n  value: string \n}) {\n  const { isActive } = useAccordion();\n\n  return (\n    <div\n    data-active={isActive || undefined}\n      className={`rounded-lg overflow-hidden mb-2  ${\n        isActive\n          ? 'active border-2 dark:border-[#656fe2]  border-[#F2F2F2] dark:bg-[#E0ECFB] bg-[#F2F2F2]'\n          : 'bg-transparent border-2 dark:hover:border-[#656fe2]'\n      }\n    `}\n    data-value={value}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport function AccordionHeader({\n  children,\n  customIcon,\n  className\n}: {\n  children: ReactNode;\n  customIcon?: boolean;\n  className?: string;\n}) {\n  const { isActive, value, onChangeIndex } = useAccordion();\n\n  return (\n    <motion.div\n    data-active={isActive || undefined}\n      className={`group p-4 cursor-pointer transition-all font-semibold    dark:text-white text-black dark:hover:bg-[#1e2a78] hover:bg-[#F2F2F2] dark:hover:text-white hover:text-black flex justify-between items-center ${\n        isActive\n          ? 'active  dark:bg-[#1e2a78] bg-[#F2F2F2] '\n          : 'dark:bg-[#11112b] bg-white'\n      }\n      `}\n      onClick={() => onChangeIndex(value)}\n    >\n      {children}\n      {!customIcon && (\n        <ChevronDown\n          className={cn(\n            \"transition-transform \",\n            isActive ? \"rotate-180\" : \"rotate-0\",\n          )}\n        />\n      )}\n    </motion.div>\n  );\n}\n\nexport function AccordionPanel({ \n  children,\n  className\n}: { \n  children: ReactNode;\n  className?: string;\n}) {\n  const { isActive } = useAccordion();\n\n  return (\n    <AnimatePresence initial={true}>\n      {isActive && (\n        <motion.div\n        data-active={isActive || undefined}\n          initial={{ height: 0, overflow: 'hidden' }}\n          animate={{ height: 'auto', overflow: 'hidden' }}\n          exit={{ height: 0 }}\n          transition={{ type: 'spring', duration: 0.3, bounce: 0 }}\n          className={cn('group dark:bg-white bg-[#F2F2F2]', className)}\n        >\n          <motion.article\n            initial={{ clipPath: 'polygon(0 0, 100% 0, 100% 0, 0 0)' }}\n            animate={{ clipPath: 'polygon(0 0, 100% 0, 100% 100%, 0% 100%)' }}\n            exit={{\n              clipPath: 'polygon(0 0, 100% 0, 100% 0, 0 0)',\n            }}\n            transition={{\n              type: 'spring',\n              duration: 0.4,\n              bounce: 0,\n            }}\n            className={`p-3 bg-transparent text-black `}\n          >\n            {children}\n          </motion.article>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}",
      "type": "registry:component"
    }
  ]
}