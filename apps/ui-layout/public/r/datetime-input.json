{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "datetime-input",
  "type": "registry:component",
  "dependencies": [
    "chrono-node@latest",
    "react-day-picker@^8.9.1"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/datetime-input.tsx",
      "content": "// @ts-nocheck\r\n'use client';\r\n\r\nimport React from 'react';\r\nimport { parseDate } from 'chrono-node';\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from '@/components/website/ui/popover';\r\nimport { ActiveModifiers } from 'react-day-picker';\r\nimport { Calendar, CalendarProps } from '@/components/website/ui/calendar';\r\nimport { Button, buttonVariants } from '@/components/website/ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { Calendar as CalendarIcon, LucideTextCursorInput } from 'lucide-react';\r\nimport { ScrollArea } from '@/components/website/ui/scroll-area';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                               Inspired By:                                 */\r\n/*                               @steventey                                   */\r\n/* ------------------https://dub.co/blog/smart-datetime-picker--------------- */\r\n/* -------------------------------------------------------------------------- */\r\n\r\n/**\r\n * Utility function that parses dates.\r\n * Parses a given date string using the `chrono-node` library.\r\n *\r\n * @param str - A string representation of a date and time.\r\n * @returns A `Date` object representing the parsed date and time, or `null` if the string could not be parsed.\r\n */\r\nexport const parseDateTime = (str: Date | string) => {\r\n  if (str instanceof Date) return str;\r\n  return parseDate(str);\r\n};\r\n\r\n/**\r\n * Converts a given timestamp or the current date and time to a string representation in the local time zone.\r\n * format: `HH:mm`, adjusted for the local time zone.\r\n *\r\n * @param timestamp {Date | string}\r\n * @returns A string representation of the timestamp\r\n */\r\nexport const getDateTimeLocal = (timestamp?: Date): string => {\r\n  const d = timestamp ? new Date(timestamp) : new Date();\r\n  if (d.toString() === 'Invalid Date') return '';\r\n  return new Date(d.getTime() - d.getTimezoneOffset() * 60000)\r\n    .toISOString()\r\n    .split(':')\r\n    .slice(0, 2)\r\n    .join(':');\r\n};\r\n\r\n/**\r\n * Formats a given date and time object or string into a human-readable string representation.\r\n * \"MMM D, YYYY h:mm A\" (e.g. \"Jan 1, 2023 12:00 PM\").\r\n *\r\n * @param datetime - {Date | string}\r\n * @returns A string representation of the date and time\r\n */\r\nconst formatTimeOnly = (datetime: Date | string) => {\r\n  return new Date(datetime).toLocaleTimeString('en-US', {\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    hour12: true,\r\n  });\r\n};\r\n\r\nconst formatDateOnly = (datetime: Date | string) => {\r\n  return new Date(datetime).toLocaleDateString('en-US', {\r\n    month: 'short',\r\n    day: 'numeric',\r\n    year: 'numeric',\r\n  });\r\n};\r\n\r\nconst formatDateTime = (\r\n  datetime: Date | string,\r\n  showCalendar: boolean,\r\n  showTimePicker: boolean\r\n) => {\r\n  if (!showCalendar && showTimePicker) {\r\n    return formatTimeOnly(datetime);\r\n  }\r\n  if (showCalendar && !showTimePicker) {\r\n    return formatDateOnly(datetime);\r\n  }\r\n  return new Date(datetime).toLocaleTimeString('en-US', {\r\n    month: 'short',\r\n    day: 'numeric',\r\n    year: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    hour12: true,\r\n  });\r\n};\r\n\r\nconst inputBase =\r\n  'bg-transparent focus:outline-hidden focus:ring-0 focus-within:outline-hidden focus-within:ring-0 sm:text-sm disabled:cursor-not-allowed disabled:opacity-50';\r\n\r\n// @source: https://www.perplexity.ai/search/in-javascript-how-RfI7fMtITxKr5c.V9Lv5KA#1\r\n// use this pattern to validate the transformed date string for the natural language input\r\nconst naturalInputValidationPattern =\r\n  '^[A-Z][a-z]{2}sd{1,2},sd{4},sd{1,2}:d{2}s[AP]M$';\r\n\r\nconst DEFAULT_SIZE = 96;\r\n\r\n/**\r\n * Smart time input Docs: {@link: https://shadcn-extension.vercel.app/docs/smart-time-input}\r\n */\r\n\r\ninterface SmartDatetimeInputProps {\r\n  value?: Date;\r\n  onValueChange: (date: Date) => void;\r\n  showCalendar?: boolean;\r\n  showTimePicker?: boolean;\r\n}\r\n\r\ninterface SmartDatetimeInputContextProps extends SmartDatetimeInputProps {\r\n  Time: string;\r\n  onTimeChange: (time: string) => void;\r\n}\r\n\r\nconst SmartDatetimeInputContext =\r\n  React.createContext<SmartDatetimeInputContextProps | null>(null);\r\n\r\nconst useSmartDateInput = () => {\r\n  const context = React.useContext(SmartDatetimeInputContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      'useSmartDateInput must be used within SmartDateInputProvider'\r\n    );\r\n  }\r\n  return context;\r\n};\r\nexport const SmartDatetimeInput = React.forwardRef<\r\n  HTMLInputElement,\r\n  Omit<\r\n    React.InputHTMLAttributes<HTMLInputElement>,\r\n    'type' | 'ref' | 'value' | 'defaultValue' | 'onBlur'\r\n  > &\r\n    SmartDatetimeInputProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      value,\r\n      onValueChange,\r\n      placeholder,\r\n      disabled,\r\n      showCalendar = true,\r\n      showTimePicker = true,\r\n    },\r\n    ref\r\n  ) => {\r\n    const [Time, setTime] = React.useState<string>('');\r\n\r\n    const onTimeChange = React.useCallback((time: string) => {\r\n      setTime(time);\r\n    }, []);\r\n\r\n    // If neither calendar nor timepicker is specified, show both\r\n    const shouldShowBoth = showCalendar === showTimePicker;\r\n\r\n    return (\r\n      <SmartDatetimeInputContext.Provider\r\n        value={{\r\n          value,\r\n          onValueChange,\r\n          Time,\r\n          onTimeChange,\r\n          showCalendar: shouldShowBoth ? true : showCalendar,\r\n          showTimePicker: shouldShowBoth ? true : showTimePicker,\r\n        }}\r\n      >\r\n        <div className='flex items-center justify-center dark:bg-neutral-950 bg-neutral-50'>\r\n          <div\r\n            className={cn(\r\n              'flex gap-1 w-full p-1 items-center justify-between rounded-md border-2 transition-all',\r\n              'focus-within:outline-0 focus:outline-0 focus:ring-0',\r\n              'placeholder:text-muted-foreground focus-visible:outline-0 ',\r\n              className\r\n            )}\r\n          >\r\n            <DateTimeLocalInput />\r\n            <NaturalLanguageInput\r\n              placeholder={placeholder}\r\n              disabled={disabled}\r\n              ref={ref}\r\n            />\r\n          </div>\r\n        </div>\r\n      </SmartDatetimeInputContext.Provider>\r\n    );\r\n  }\r\n);\r\n\r\nSmartDatetimeInput.displayName = 'DatetimeInput';\r\n\r\n// Make it a standalone component\r\n\r\nconst TimePicker = () => {\r\n  const { value, onValueChange, Time, onTimeChange } = useSmartDateInput();\r\n  const [activeIndex, setActiveIndex] = React.useState(-1);\r\n  const timestamp = 15;\r\n\r\n  const formateSelectedTime = React.useCallback(\r\n    (time: string, hour: number, partStamp: number) => {\r\n      onTimeChange(time);\r\n\r\n      let newVal = value ? new Date(value) : new Date();\r\n\r\n      // If no value exists, use current date but only set the time\r\n      newVal.setHours(\r\n        hour,\r\n        partStamp === 0 ? parseInt('00') : timestamp * partStamp\r\n      );\r\n\r\n      onValueChange(newVal);\r\n    },\r\n    [value, onValueChange, onTimeChange]\r\n  );\r\n\r\n  const handleKeydown = React.useCallback(\r\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n      e.stopPropagation();\r\n\r\n      if (!document) return;\r\n\r\n      const moveNext = () => {\r\n        const nextIndex =\r\n          activeIndex + 1 > DEFAULT_SIZE - 1 ? 0 : activeIndex + 1;\r\n\r\n        const currentElm = document.getElementById(`time-${nextIndex}`);\r\n\r\n        currentElm?.focus();\r\n\r\n        setActiveIndex(nextIndex);\r\n      };\r\n\r\n      const movePrev = () => {\r\n        const prevIndex =\r\n          activeIndex - 1 < 0 ? DEFAULT_SIZE - 1 : activeIndex - 1;\r\n\r\n        const currentElm = document.getElementById(`time-${prevIndex}`);\r\n\r\n        currentElm?.focus();\r\n\r\n        setActiveIndex(prevIndex);\r\n      };\r\n\r\n      const setElement = () => {\r\n        const currentElm = document.getElementById(`time-${activeIndex}`);\r\n\r\n        if (!currentElm) return;\r\n\r\n        currentElm.focus();\r\n\r\n        const timeValue = currentElm.textContent ?? '';\r\n\r\n        // this should work now haha that hour is what does the trick\r\n\r\n        const PM_AM = timeValue.split(' ')[1];\r\n        const PM_AM_hour = parseInt(timeValue.split(' ')[0].split(':')[0]);\r\n        const hour =\r\n          PM_AM === 'AM'\r\n            ? PM_AM_hour === 12\r\n              ? 0\r\n              : PM_AM_hour\r\n            : PM_AM_hour === 12\r\n              ? 12\r\n              : PM_AM_hour + 12;\r\n\r\n        const part = Math.floor(\r\n          parseInt(timeValue.split(' ')[0].split(':')[1]) / 15\r\n        );\r\n\r\n        formateSelectedTime(timeValue, hour, part);\r\n      };\r\n\r\n      const reset = () => {\r\n        const currentElm = document.getElementById(`time-${activeIndex}`);\r\n        currentElm?.blur();\r\n        setActiveIndex(-1);\r\n      };\r\n\r\n      switch (e.key) {\r\n        case 'ArrowUp':\r\n          movePrev();\r\n          break;\r\n\r\n        case 'ArrowDown':\r\n          moveNext();\r\n          break;\r\n\r\n        case 'Escape':\r\n          reset();\r\n          break;\r\n\r\n        case 'Enter':\r\n          setElement();\r\n          break;\r\n      }\r\n    },\r\n    [activeIndex, formateSelectedTime]\r\n  );\r\n\r\n  const handleClick = React.useCallback(\r\n    (hour: number, part: number, PM_AM: string, currentIndex: number) => {\r\n      formateSelectedTime(\r\n        `${hour}:${part === 0 ? '00' : timestamp * part} ${PM_AM}`,\r\n        hour,\r\n        part\r\n      );\r\n      setActiveIndex(currentIndex);\r\n    },\r\n    [formateSelectedTime]\r\n  );\r\n\r\n  const currentTime = React.useMemo(() => {\r\n    const timeVal = Time.split(' ')[0];\r\n    return {\r\n      hours: parseInt(timeVal.split(':')[0]),\r\n      minutes: parseInt(timeVal.split(':')[1]),\r\n    };\r\n  }, [Time]);\r\n\r\n  React.useEffect(() => {\r\n    const getCurrentElementTime = () => {\r\n      const timeVal = Time.split(' ')[0];\r\n      const hours = parseInt(timeVal.split(':')[0]);\r\n      const minutes = parseInt(timeVal.split(':')[1]);\r\n      const PM_AM = Time.split(' ')[1];\r\n\r\n      const formatIndex =\r\n        PM_AM === 'AM' ? hours : hours === 12 ? hours : hours + 12;\r\n      const formattedHours = formatIndex;\r\n\r\n      console.log(formatIndex);\r\n\r\n      for (let j = 0; j <= 3; j++) {\r\n        const diff = Math.abs(j * timestamp - minutes);\r\n        const selected =\r\n          PM_AM === (formattedHours >= 12 ? 'PM' : 'AM') &&\r\n          (minutes <= 53 ? diff < Math.ceil(timestamp / 2) : diff < timestamp);\r\n\r\n        if (selected) {\r\n          const trueIndex =\r\n            activeIndex === -1 ? formattedHours * 4 + j : activeIndex;\r\n\r\n          setActiveIndex(trueIndex);\r\n\r\n          const currentElm = document.getElementById(`time-${trueIndex}`);\r\n          currentElm?.scrollIntoView({\r\n            block: 'center',\r\n            behavior: 'smooth',\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    getCurrentElementTime();\r\n  }, [Time, activeIndex]);\r\n\r\n  const height = React.useMemo(() => {\r\n    if (!document) return;\r\n    const calendarElm = document.getElementById('calendar');\r\n    if (!calendarElm) return;\r\n    return calendarElm.style.height;\r\n  }, []);\r\n\r\n  return (\r\n    <div className='space-y-2 pr-3 py-3 relative '>\r\n      <h3 className='text-sm font-medium text-center'>Time</h3>\r\n      <ScrollArea\r\n        onKeyDown={handleKeydown}\r\n        className='h-[90%] w-full focus-visible:outline-0 focus-visible:ring-0 focus-visible:ring-offset-0 focus-visible:border-0 py-0.5'\r\n        style={{\r\n          height,\r\n        }}\r\n      >\r\n        <ul\r\n          className={cn(\r\n            'flex items-center flex-col gap-1 h-full max-h-56 w-28 px-1 py-0.5'\r\n          )}\r\n        >\r\n          {Array.from({ length: 24 }).map((_, i) => {\r\n            const PM_AM = i >= 12 ? 'PM' : 'AM';\r\n            const formatIndex = i > 12 ? i % 12 : i === 0 || i === 12 ? 12 : i;\r\n            return Array.from({ length: 4 }).map((_, part) => {\r\n              const diff = Math.abs(part * timestamp - currentTime.minutes);\r\n\r\n              const trueIndex = i * 4 + part;\r\n\r\n              // ? refactor : add the select of the default time on the current device (H:MM)\r\n              const isSelected =\r\n                (currentTime.hours === i ||\r\n                  currentTime.hours === formatIndex) &&\r\n                Time.split(' ')[1] === PM_AM &&\r\n                (currentTime.minutes <= 53\r\n                  ? diff < Math.ceil(timestamp / 2)\r\n                  : diff < timestamp);\r\n\r\n              const isSuggested = !value && isSelected;\r\n\r\n              const currentValue = `${formatIndex}:${\r\n                part === 0 ? '00' : timestamp * part\r\n              } ${PM_AM}`;\r\n\r\n              return (\r\n                <li\r\n                  tabIndex={isSelected ? 0 : -1}\r\n                  id={`time-${trueIndex}`}\r\n                  key={`time-${trueIndex}`}\r\n                  aria-label='currentTime'\r\n                  className={cn(\r\n                    buttonVariants({\r\n                      variant: isSuggested\r\n                        ? 'secondary'\r\n                        : isSelected\r\n                          ? 'default'\r\n                          : 'outline-solid',\r\n                    }),\r\n                    'h-8 px-3 w-full text-sm focus-visible:outline-0 outline-0 focus-visible:border-0 cursor-default ring-0'\r\n                  )}\r\n                  onClick={() => handleClick(i, part, PM_AM, trueIndex)}\r\n                  onFocus={() => isSuggested && setActiveIndex(trueIndex)}\r\n                >\r\n                  {currentValue}\r\n                </li>\r\n              );\r\n            });\r\n          })}\r\n        </ul>\r\n      </ScrollArea>\r\n    </div>\r\n  );\r\n};\r\nconst getDefaultPlaceholder = (\r\n  showCalendar: boolean,\r\n  showTimePicker: boolean\r\n) => {\r\n  if (!showCalendar && showTimePicker) {\r\n    return 'e.g. \"5pm\" or \"in 2 hours\"';\r\n  }\r\n  if (showCalendar && !showTimePicker) {\r\n    return 'e.g. \"tomorrow\" or \"next monday\"';\r\n  }\r\n  return 'e.g. \"tomorrow at 5pm\" or \"in 2 hours\"';\r\n};\r\nconst NaturalLanguageInput = React.forwardRef<\r\n  HTMLInputElement,\r\n  {\r\n    placeholder?: string;\r\n    disabled?: boolean;\r\n  }\r\n>(({ placeholder, ...props }, ref) => {\r\n  const {\r\n    value,\r\n    onValueChange,\r\n    Time,\r\n    onTimeChange,\r\n    showCalendar,\r\n    showTimePicker,\r\n  } = useSmartDateInput();\r\n\r\n  const _placeholder =\r\n    placeholder ?? getDefaultPlaceholder(showCalendar, showTimePicker);\r\n\r\n  const [inputValue, setInputValue] = React.useState<string>('');\r\n\r\n  React.useEffect(() => {\r\n    if (!value) {\r\n      setInputValue('');\r\n      return;\r\n    }\r\n\r\n    const formattedValue = formatDateTime(value, showCalendar, showTimePicker);\r\n    setInputValue(formattedValue);\r\n\r\n    // Only update time if time picker is shown\r\n    if (showTimePicker) {\r\n      const hour = value.getHours();\r\n      const timeVal = `${hour >= 12 ? hour % 12 || 12 : hour || 12}:${String(\r\n        value.getMinutes()\r\n      ).padStart(2, '0')} ${hour >= 12 ? 'PM' : 'AM'}`;\r\n      onTimeChange(timeVal);\r\n    }\r\n  }, [value, showCalendar, showTimePicker]);\r\n\r\n  const handleParse = React.useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const parsedDateTime = parseDateTime(e.currentTarget.value);\r\n      if (parsedDateTime) {\r\n        // If only showing time picker, preserve the current date\r\n        if (!showCalendar && showTimePicker && value) {\r\n          parsedDateTime.setFullYear(\r\n            value.getFullYear(),\r\n            value.getMonth(),\r\n            value.getDate()\r\n          );\r\n        }\r\n        // If only showing calendar, preserve the current time\r\n        if (showCalendar && !showTimePicker && value) {\r\n          parsedDateTime.setHours(0, 0, 0, 0);\r\n        }\r\n        // console.log(parsedDateTime);\r\n\r\n        onValueChange(parsedDateTime);\r\n        setInputValue(\r\n          formatDateTime(parsedDateTime, showCalendar, showTimePicker)\r\n        );\r\n\r\n        if (showTimePicker) {\r\n          const PM_AM = parsedDateTime.getHours() >= 12 ? 'PM' : 'AM';\r\n          const PM_AM_hour = parsedDateTime.getHours();\r\n          const hour =\r\n            PM_AM_hour > 12\r\n              ? PM_AM_hour % 12\r\n              : PM_AM_hour === 0 || PM_AM_hour === 12\r\n                ? 12\r\n                : PM_AM_hour;\r\n          onTimeChange(\r\n            `${hour}:${String(parsedDateTime.getMinutes()).padStart(\r\n              2,\r\n              '0'\r\n            )} ${PM_AM}`\r\n          );\r\n        }\r\n      }\r\n    },\r\n    [value, showCalendar, showTimePicker]\r\n  );\r\n\r\n  const handleKeydown = React.useCallback(\r\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === 'Enter') {\r\n        handleParse(e as any);\r\n      }\r\n    },\r\n    [handleParse]\r\n  );\r\n\r\n  return (\r\n    <input\r\n      ref={ref}\r\n      type='text'\r\n      placeholder={_placeholder}\r\n      value={inputValue}\r\n      onChange={(e) => setInputValue(e.currentTarget.value)}\r\n      onKeyDown={handleKeydown}\r\n      onBlur={handleParse}\r\n      className={cn(\r\n        'px-2 mr-0.5 dark:bg-neutral-800 bg-neutral-50 flex-1 border-none h-8 rounded-sm',\r\n        inputBase\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\n\r\nNaturalLanguageInput.displayName = 'NaturalLanguageInput';\r\n\r\ntype DateTimeLocalInputProps = {} & CalendarProps;\r\n\r\nconst DateTimeLocalInput = ({\r\n  className,\r\n  ...props\r\n}: DateTimeLocalInputProps) => {\r\n  const { value, onValueChange, Time, showCalendar, showTimePicker } =\r\n    useSmartDateInput();\r\n\r\n  const formateSelectedDate = React.useCallback(\r\n    (\r\n      date: Date | undefined,\r\n      selectedDate: Date,\r\n      m: ActiveModifiers,\r\n      e: React.MouseEvent\r\n    ) => {\r\n      const parsedDateTime = new Date(selectedDate);\r\n\r\n      if (!showTimePicker) {\r\n        // If only calendar is shown, set time to start of day\r\n        parsedDateTime.setHours(0, 0, 0, 0);\r\n      } else if (value) {\r\n        // If time picker is shown, preserve existing time\r\n        parsedDateTime.setHours(\r\n          value.getHours(),\r\n          value.getMinutes(),\r\n          value.getSeconds(),\r\n          value.getMilliseconds()\r\n        );\r\n      }\r\n\r\n      onValueChange(parsedDateTime);\r\n    },\r\n    [value, showTimePicker, onValueChange]\r\n  );\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          variant={'outline'}\r\n          size={'icon'}\r\n          className={cn(\r\n            'size-9 flex items-center justify-center font-normal dark:bg-neutral-800 bg-neutral-200',\r\n            !value && 'text-muted-foreground'\r\n          )}\r\n        >\r\n          <CalendarIcon className='size-4' />\r\n          <span className='sr-only'>calendar</span>\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent\r\n        className='w-auto p-0 dark:bg-neutral-800 bg-neutral-50'\r\n        sideOffset={8}\r\n      >\r\n        <div className='flex gap-1'>\r\n          {showCalendar && (\r\n            <Calendar\r\n              {...props}\r\n              id={'calendar'}\r\n              className={cn('peer flex justify-end', inputBase, className)}\r\n              mode='single'\r\n              selected={value}\r\n              onSelect={formateSelectedDate}\r\n              initialFocus\r\n            />\r\n          )}\r\n          {showTimePicker && <TimePicker />}\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nDateTimeLocalInput.displayName = 'DateTimeLocalInput';\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/button.tsx",
      "content": "import * as React from 'react';\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n        destructive:\r\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\r\n        outline:\r\n          'border border-input dark:bg-neutral-800 bg-neutral-50 hover:bg-accent hover:text-accent-foreground',\r\n        secondary:\r\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n        link: 'text-primary underline-offset-4 hover:underline',\r\n        uilayouts:\r\n          'dark:bg-zinc-900 bg-neutral-200 dark:text-white text-black border dark:border-neutral-800',\r\n      },\r\n      size: {\r\n        default: 'h-10 px-4 py-2',\r\n        sm: 'h-9 rounded-md px-3',\r\n        lg: 'h-11 rounded-md px-8',\r\n        icon: 'h-10 w-10',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nButton.displayName = 'Button';\r\n\r\nexport { Button, buttonVariants };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/calendar.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\r\nimport { DayPicker } from 'react-day-picker';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { buttonVariants } from '@/components/website/ui/button';\r\n\r\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\r\n\r\nfunction Calendar({\r\n  className,\r\n  classNames,\r\n  showOutsideDays = true,\r\n  ...props\r\n}: CalendarProps) {\r\n  return (\r\n    <DayPicker\r\n      showOutsideDays={showOutsideDays}\r\n      className={cn('p-3', className)}\r\n      classNames={{\r\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\r\n        month: 'space-y-4',\r\n        caption: 'flex justify-center pt-1 relative items-center',\r\n        caption_label: 'text-sm font-medium',\r\n        nav: 'space-x-1 flex items-center',\r\n        nav_button: cn(\r\n          buttonVariants({ variant: 'outline' }),\r\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\r\n        ),\r\n        nav_button_previous: 'absolute left-1',\r\n        nav_button_next: 'absolute right-1',\r\n        table: 'w-full border-collapse space-y-1',\r\n        head_row: 'flex',\r\n        head_cell:\r\n          'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\r\n        row: 'flex w-full mt-2',\r\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\r\n        day: cn(\r\n          buttonVariants({ variant: 'ghost' }),\r\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\r\n        ),\r\n        day_range_end: 'day-range-end',\r\n        day_selected:\r\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\r\n        day_today: 'bg-accent text-accent-foreground',\r\n        day_outside:\r\n          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\r\n        day_disabled: 'text-muted-foreground opacity-50',\r\n        day_range_middle:\r\n          'aria-selected:bg-accent aria-selected:text-accent-foreground',\r\n        day_hidden: 'invisible',\r\n        ...classNames,\r\n      }}\r\n      components={{\r\n        IconLeft: ({ ...props }) => <ChevronLeft className='h-4 w-4' />,\r\n        IconRight: ({ ...props }) => <ChevronRight className='h-4 w-4' />,\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\nCalendar.displayName = 'Calendar';\r\n\r\nexport { Calendar };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/popover.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as PopoverPrimitive from '@radix-ui/react-popover';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst Popover = PopoverPrimitive.Root;\r\n\r\nconst PopoverTrigger = PopoverPrimitive.Trigger;\r\n\r\nconst PopoverContent = React.forwardRef<\r\n  React.ElementRef<typeof PopoverPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\r\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\r\n  <PopoverPrimitive.Portal>\r\n    <PopoverPrimitive.Content\r\n      ref={ref}\r\n      align={align}\r\n      sideOffset={sideOffset}\r\n      className={cn(\r\n        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-hidden data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </PopoverPrimitive.Portal>\r\n));\r\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\r\n\r\nexport { Popover, PopoverTrigger, PopoverContent };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/scroll-area.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst ScrollArea = React.forwardRef<\r\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <ScrollAreaPrimitive.Root\r\n    ref={ref}\r\n    className={cn('relative overflow-hidden', className)}\r\n    {...props}\r\n  >\r\n    <ScrollAreaPrimitive.Viewport className='h-full w-full rounded-[inherit]'>\r\n      {children}\r\n    </ScrollAreaPrimitive.Viewport>\r\n    <ScrollBar />\r\n    <ScrollAreaPrimitive.Corner />\r\n  </ScrollAreaPrimitive.Root>\r\n));\r\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\r\n\r\nconst ScrollBar = React.forwardRef<\r\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\r\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n>(({ className, orientation = 'vertical', ...props }, ref) => (\r\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\r\n    ref={ref}\r\n    orientation={orientation}\r\n    className={cn(\r\n      'flex touch-none select-none transition-colors',\r\n      orientation === 'vertical' &&\r\n        'h-full w-2.5 border-l border-l-transparent p-px',\r\n      orientation === 'horizontal' &&\r\n        'h-2.5 flex-col border-t border-t-transparent p-px',\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ScrollAreaPrimitive.ScrollAreaThumb className='relative flex-1 rounded-full dark:bg-neutral-800 bg-neutral-200' />\r\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n));\r\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\r\n\r\nexport { ScrollArea, ScrollBar };\r\n",
      "type": "registry:component"
    }
  ]
}