{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "magnified-tab",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "@radix-ui/react-tooltip"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/tabs/magnified-tabs.tsx",
      "content": "//@ts-nocheck\r\n'use client';\r\n\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from '@/components/ui/magnified-doc';\r\nimport {\r\n  type MotionValue,\r\n  motion,\r\n  useMotionValue,\r\n  useSpring,\r\n  useTransform,\r\n  AnimatePresence,\r\n} from 'motion/react';\r\nimport Image from 'next/image';\r\nimport React, { useState } from 'react';\r\nimport { useRef } from 'react';\r\nimport { Icons } from '@/assets/icons/Icons';\r\nimport preview from '@/assets/preview/Preview';\r\nimport { apps } from '@/components/website/constant';\r\nconst Component = React.forwardRef((props, ref) => (\r\n  <Image {...props} ref={ref} alt='App' />\r\n));\r\n\r\nconst MotionComponent = motion(Component);\r\n\r\nfunction MagnifiedDocOneFile() {\r\n  const mouseX = useMotionValue(Infinity);\r\n  const [index, setIndex] = useState(0);\r\n  const [prevIndex, setPrevIndex] = useState(0);\r\n\r\n  const handleClick = (i: React.SetStateAction<number>) => {\r\n    setPrevIndex(index);\r\n    setIndex(i);\r\n  };\r\n\r\n  const isForward =\r\n    index > prevIndex || (index === 0 && prevIndex === apps.length - 1);\r\n\r\n  return (\r\n    <>\r\n      <div className='relative [box-shadow] w-4/5 mx-auto  rounded-xl  dark:bg-gray-950 bg-gray-300  [box-shadow:inset_1px_-1px_4px_rgba(0_0_0,0.5)] overflow-hidden '>\r\n        <div className='relative'>\r\n          {apps.map((app, i) => {\r\n            return (\r\n              <>\r\n                <AnimatePresence mode={'popLayout'}>\r\n                  {index === i && (\r\n                    <motion.div\r\n                      initial={{\r\n                        opacity: 0,\r\n                        y: isForward ? 30 : -30,\r\n                      }}\r\n                      animate={{\r\n                        opacity: 1,\r\n                        y: 0,\r\n                      }}\r\n                      exit={{\r\n                        opacity: 0,\r\n                        y: isForward ? -30 : 30,\r\n                      }}\r\n                      transition={{\r\n                        type: 'ease',\r\n                        ease: 'easeInOut',\r\n                        duration: 0.3,\r\n                        delay: 0.4,\r\n                      }}\r\n                      className='w-full h-full cursor-pointer'\r\n                      onClick={app?.onClick}\r\n                    >\r\n                      <Image\r\n                        src={app?.imgSrc}\r\n                        alt='images'\r\n                        width={1000}\r\n                        height={1000}\r\n                        className='w-full sm:h-[500px] h-[400px] object-cover  rounded-lg'\r\n                      />\r\n                    </motion.div>\r\n                  )}\r\n                </AnimatePresence>\r\n              </>\r\n            );\r\n          })}\r\n\r\n          <div className='absolute bottom-0 left-0 w-full z-20'>\r\n            <div className='w-fit mx-auto'>\r\n              <TooltipProvider delayDuration={0}>\r\n                <motion.div\r\n                  onMouseMove={(e) => mouseX.set(e.pageX)}\r\n                  onMouseLeave={() => mouseX.set(Infinity)}\r\n                  className='mx-auto flex sm:h-[57px] h-[52px] w-fit items-end gap-2 rounded-t-lg px-2 pb-2 dark:bg-gray-800/80 bg-white/50 backdrop-blur-xs border-t border-l border-r  '\r\n                >\r\n                  {apps.map((app, i) => {\r\n                    return (\r\n                      <Tooltip key={app.id}>\r\n                        <TooltipTrigger onClick={() => handleClick(i)}>\r\n                          <span className='sr-only'>{app.name}</span>\r\n                          <AppIcon mouseX={mouseX} src={app.icon} />\r\n                        </TooltipTrigger>\r\n                        <TooltipContent\r\n                          className='py-1 px-3 rounded-xs'\r\n                          sideOffset={8}\r\n                        >\r\n                          <p className='text-xs'>{app.name}</p>\r\n                        </TooltipContent>\r\n                      </Tooltip>\r\n                    );\r\n                  })}\r\n                </motion.div>\r\n              </TooltipProvider>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction AppIcon({ mouseX, src }: { mouseX: MotionValue; src: any }) {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const distance = useTransform(mouseX, (val) => {\r\n    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };\r\n\r\n    return val - bounds.x - bounds.width / 2;\r\n  });\r\n\r\n  const widthSync = useTransform(distance, [-100, 0, 100], [40, 55, 40]);\r\n  const width = useSpring(widthSync, {\r\n    mass: 0.1,\r\n    stiffness: 150,\r\n    damping: 12,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <MotionComponent\r\n        src={src}\r\n        width={60}\r\n        height={60}\r\n        alt=''\r\n        quality={100}\r\n        ref={ref}\r\n        style={{ width }}\r\n        className='aspect-square rounded-lg sm:w-8 w-6  object-cover'\r\n      />\r\n    </>\r\n  );\r\n}\r\nexport default MagnifiedDocOneFile;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/ui/magnified-doc.tsx",
      "content": "'use client';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\r\nimport * as React from 'react';\r\n\r\nconst TooltipProvider = TooltipPrimitive.Provider;\r\n\r\nconst Tooltip = TooltipPrimitive.Root;\r\n\r\nconst TooltipTrigger = TooltipPrimitive.Trigger;\r\n\r\nconst TooltipContent = React.forwardRef<\r\n  React.ElementRef<typeof TooltipPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\r\n>(({ className, sideOffset = 4, ...props }, ref) => (\r\n  <TooltipPrimitive.Portal>\r\n    <TooltipPrimitive.Content\r\n      ref={ref}\r\n      sideOffset={sideOffset}\r\n      className={cn(\r\n        'z-50 overflow-hidden rounded-lg border dark:bg-neutral-800 bg-neutral-50 backdrop-filter dark:border-[#2C2C2C] backdrop-blur-lg dark:bg-[#1A1A1A]/95 px-4 py-3 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </TooltipPrimitive.Portal>\r\n));\r\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\r\n\r\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\r\n",
      "type": "registry:component"
    }
  ]
}