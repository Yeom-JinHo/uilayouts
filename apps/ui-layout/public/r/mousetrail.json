{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mousetrail",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/mousetrail.tsx",
      "content": "//@ts-nocheck\n'use client';\nimport { items } from '@/components/common/constant';\nimport { cn } from '@/lib/utils';\nimport { createRef, useRef } from 'react';\ninterface ImageMouseTrailProps {\n  items: ImageItem[];\n  children?: ReactNode;\n  className?: string;\n  imgClass?: string;\n  distance?: number;\n  maxNumberOfImages?: number;\n  fadeAnimation?: boolean;\n}\nexport default function ImageMouseTrail({\n  items,\n  children,\n  className,\n  maxNumberOfImages = 5,\n  imgClass = 'w-40 h-48',\n  distance = 20,\n  fadeAnimation = false,\n}: ImageMouseTrailProps) {\n  const containerRef = useRef(null);\n  const refs = useRef(items.map(() => createRef<HTMLImageElement>()));\n  const currentZIndexRef = useRef(1);\n\n  let globalIndex = 0;\n  let last = { x: 0, y: 0 };\n\n  const activate = (image, x, y) => {\n    const containerRect = containerRef.current?.getBoundingClientRect();\n    const relativeX = x - containerRect.left;\n    const relativeY = y - containerRect.top;\n    image.style.left = `${relativeX}px`;\n    image.style.top = `${relativeY}px`;\n    console.log(refs.current[refs.current?.length - 1]);\n\n    if (currentZIndexRef.current > 40) {\n      currentZIndexRef.current = 1;\n    }\n    image.style.zIndex = String(currentZIndexRef.current);\n    currentZIndexRef.current++;\n\n    image.dataset.status = 'active';\n    if (fadeAnimation) {\n      setTimeout(() => {\n        image.dataset.status = 'inactive';\n      }, 1500);\n    }\n    last = { x, y };\n  };\n\n  const distanceFromLast = (x, y) => {\n    return Math.hypot(x - last.x, y - last.y);\n  };\n  const deactivate = (image) => {\n    image.dataset.status = 'inactive';\n  };\n\n  const handleOnMove = (e) => {\n    if (distanceFromLast(e.clientX, e.clientY) > window.innerWidth / distance) {\n      // console.log(e.clientX, e.clientY)\n\n      const lead = refs.current[globalIndex % refs.current.length].current;\n\n      const tail =\n        refs.current[(globalIndex - maxNumberOfImages) % refs.current.length]\n          ?.current;\n\n      if (lead) activate(lead, e.clientX, e.clientY);\n      if (tail) deactivate(tail);\n      globalIndex++;\n    }\n  };\n\n  return (\n    <section\n      onMouseMove={handleOnMove}\n      onTouchMove={(e) => handleOnMove(e.touches[0])}\n      ref={containerRef}\n      className={cn(\n        'grid place-content-center h-[600px] w-full bg-[#e0dfdf] relative overflow-hidden rounded-lg',\n        className\n      )}\n    >\n      {items.map((item, index) => (\n        <>\n          {/* eslint-disable-next-line @next/next/no-img-element */}\n          <img\n            key={index}\n            className={cn(\n              \"object-cover  scale-0 opacity:0 data-[status='active']:scale-100  data-[status='active']:opacity-100 transition-transform data-[status='active']:duration-500 duration-300 data-[status='active']:ease-out-expo  absolute   -translate-y-[50%] -translate-x-[50%] \",\n              imgClass\n            )}\n            data-index={index}\n            data-status='inactive'\n            src={item}\n            alt={`image-${index}`}\n            ref={refs.current[index]}\n          />\n        </>\n      ))}\n      {children}\n    </section>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}