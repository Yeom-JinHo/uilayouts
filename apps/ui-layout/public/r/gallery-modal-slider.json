{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "gallery-modal-slider",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/modal/gallery-modal/modal-slider.tsx",
      "content": "// @ts-nocheck\r\n'use client';\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport {\r\n  AnimatePresence,\r\n  LayoutGroup,\r\n  motion,\r\n  useMotionValue,\r\n} from 'motion/react';\r\nimport Image from 'next/image';\r\nimport { X } from 'lucide-react';\r\nimport { items } from '@/components/website/constant';\r\nimport { StaticImport } from 'next/dist/shared/lib/get-img-props';\r\n\r\ntype ImageModalProps = {\r\n  item: any;\r\n  uniqueId: string;\r\n  itemArr: any;\r\n};\r\n\r\nconst modal: React.FC = () => {\r\n  return (\r\n    <>\r\n      <div className='columns-3 '>\r\n        {items\r\n          .slice(0, 8)\r\n          ?.map((item, index) => (\r\n            <SliderModal item={item} itemArr={items} uniqueId={`id-${index}`} />\r\n          ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const SliderModal = ({ item, uniqueId, itemArr }: ImageModalProps) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [newItem, setNewItem] = useState(item);\r\n  const [hight, setHight] = useState(0);\r\n  const [constraints, setConstraints] = useState(0);\r\n  const carousel = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const element = carousel.current;\r\n    const viewportHeight = element?.offsetHeight;\r\n    const viewScrollHeight = element?.scrollHeight;\r\n    // console.log(viewportHeight, viewScrollHeight);\r\n    setConstraints(Number(viewportHeight) - Number(viewScrollHeight));\r\n  }, [carousel, isOpen]);\r\n  // console.log(constraints)\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      document.body.classList.add('overflow-hidden');\r\n    } else {\r\n      document.body.classList.remove('overflow-hidden');\r\n    }\r\n\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [isOpen]);\r\n\r\n  return (\r\n    <>\r\n      <motion.div\r\n        onClick={() => {\r\n          setIsOpen(true);\r\n          setNewItem(item);\r\n        }}\r\n        className='overflow-hidden mb-3'\r\n      >\r\n        <motion.div layoutId={uniqueId}>\r\n          <Image\r\n            width={400}\r\n            height={400}\r\n            src={item?.url}\r\n            className='bg-white text-black rounded-md w-full cursor-zoom-in'\r\n            alt='img'\r\n          />\r\n        </motion.div>\r\n      </motion.div>\r\n\r\n      <AnimatePresence>\r\n        {isOpen && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className='fixed inset-0 z-50 top-0 left-0  right-0 bottom-0  flex flex-col items-center w-full h-screen justify-center dark:bg-black/80 bg-gray-300/80 backdrop-blur-lg cursor-zoom-out'\r\n            onClick={() => {\r\n              setNewItem(null);\r\n              setIsOpen(false);\r\n            }}\r\n          >\r\n            <button\r\n              className='absolute top-2 right-2 p-4 border dark:bg-black/80 text-white  bg-gray-400/40 backdrop-blur-lg '\r\n              onClick={() => setIsOpen(false)}\r\n            >\r\n              <X />\r\n            </button>\r\n            <motion.div\r\n              layoutId={uniqueId}\r\n              className='rounded-md w-fit h-[80%] flex gap-2 items-center mx-auto cursor-auto '\r\n              onClick={(e) => e.stopPropagation()}\r\n            >\r\n              {newItem && (\r\n                <AnimatePresence>\r\n                  {itemArr.map(\r\n                    (tab: any, index: React.Key | null | undefined) => (\r\n                      <>\r\n                        <React.Fragment key={index}>\r\n                          <AnimatePresence mode='popLayout'>\r\n                            {tab.id === newItem.id && (\r\n                              <motion.figure\r\n                                key={tab?.id}\r\n                                className='dark:bg-gray-900/40 bg-gray-100/40 border  rounded-md p-4'\r\n                              >\r\n                                <motion.div\r\n                                  initial={{ opacity: 0 }}\r\n                                  animate={{\r\n                                    opacity: 1,\r\n                                    transition: {\r\n                                      type: 'ease',\r\n                                      ease: 'easeInOut',\r\n                                      duration: 0.3,\r\n                                      delay: 0.2,\r\n                                    },\r\n                                  }}\r\n                                  exit={{\r\n                                    opacity: 0,\r\n                                    transition: {\r\n                                      type: 'ease',\r\n                                      ease: 'easeInOut',\r\n                                      duration: 0.2,\r\n                                    },\r\n                                  }}\r\n                                  transition={{ duration: 0.2, delay: 0.2 }}\r\n                                >\r\n                                  <Image\r\n                                    src={newItem.url}\r\n                                    width={1000}\r\n                                    height={1000}\r\n                                    alt='preview_img'\r\n                                    className=' object-contain h-[70vh]  mx-auto rounded-md'\r\n                                  />\r\n                                </motion.div>\r\n                              </motion.figure>\r\n                            )}\r\n                          </AnimatePresence>\r\n                        </React.Fragment>\r\n                      </>\r\n                    )\r\n                  )}\r\n                </AnimatePresence>\r\n              )}\r\n              <motion.div\r\n                className='h-[300px] overflow-hidden dark:bg-gray-900/40 bg-white/40 border rounded-md'\r\n                ref={carousel}\r\n              >\r\n                <motion.div\r\n                  whileDrag={{ scale: 0.95 }}\r\n                  dragElastic={0.2}\r\n                  dragTransition={{ bounceDamping: 30 }}\r\n                  transition={{ duration: 0.2, ease: 'easeInOut' }}\r\n                  className='h-fit '\r\n                  drag='y'\r\n                  dragConstraints={{ top: constraints, bottom: 0 }}\r\n                >\r\n                  {itemArr?.map(\r\n                    (\r\n                      itemData: { url: string | StaticImport; id: any },\r\n                      index: React.Key | null | undefined\r\n                    ) => {\r\n                      return (\r\n                        <motion.div\r\n                          key={index}\r\n                          className={`relative p-2   cursor-grab active:cursor-grabbing`}\r\n                          onClick={() => setNewItem(itemData)}\r\n                        >\r\n                          <Image\r\n                            src={itemData?.url}\r\n                            width={400}\r\n                            height={400}\r\n                            alt='img'\r\n                            className='sm:w-28 w-52 h-16 object-cover cursor-pointer relative z-2 rounded-md pointer-events-none'\r\n                          />\r\n                          {itemData?.id === newItem?.id && (\r\n                            <motion.div\r\n                              layoutId='slider'\r\n                              transition={{\r\n                                layout: {\r\n                                  duration: 0.2,\r\n                                  ease: 'easeOut',\r\n                                },\r\n                              }}\r\n                              className='absolute top-0 left-0 h-full w-full dark:bg-gray-100 bg-gray-800 rounded-md'\r\n                            ></motion.div>\r\n                          )}\r\n                        </motion.div>\r\n                      );\r\n                    }\r\n                  )}\r\n                </motion.div>\r\n              </motion.div>\r\n            </motion.div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default modal;\r\n",
      "type": "registry:component"
    }
  ]
}