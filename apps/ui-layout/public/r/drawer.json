{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "type": "registry:component",
  "dependencies": [
    "vaul",
    "lucide-react",
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/drawer/vaul-main.tsx",
      "content": "'use client';\r\n\r\nimport React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  ReactNode,\r\n} from 'react';\r\nimport { AnimatePresence, motion } from 'motion/react';\r\nimport { X } from 'lucide-react';\r\nimport { Drawer as VaulDrawer } from 'vaul';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface DrawerContextProps {\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n}\r\n\r\nconst DrawerContext = createContext<DrawerContextProps | undefined>(undefined);\r\n\r\nexport const useDrawer = () => {\r\n  const context = useContext(DrawerContext);\r\n  if (!context) {\r\n    throw new Error('useDrawer must be used within a DrawerProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ResponsiveDrawerProps {\r\n  children: ReactNode;\r\n  triggerContent?: ReactNode;\r\n  open?: boolean;\r\n  setOpen?: (open: boolean) => void;\r\n  classname?: string;\r\n  closeBtnClass?: string;\r\n}\r\n\r\nexport function ResponsiveDrawer({\r\n  children,\r\n  triggerContent,\r\n  open: controlledOpen,\r\n  setOpen: controlledSetOpen,\r\n  classname,\r\n  closeBtnClass,\r\n}: ResponsiveDrawerProps) {\r\n  const [internalOpen, setInternalOpen] = useState(false);\r\n  const [isDesktop, setIsDesktop] = useState(false);\r\n\r\n  const open = controlledOpen !== undefined ? controlledOpen : internalOpen;\r\n  const setOpen = controlledSetOpen || setInternalOpen;\r\n\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(min-width: 768px)');\r\n    const handleMediaChange = (event: MediaQueryListEvent) => {\r\n      setIsDesktop(event.matches);\r\n    };\r\n\r\n    setIsDesktop(mediaQuery.matches);\r\n    mediaQuery.addEventListener('change', handleMediaChange);\r\n\r\n    return () => {\r\n      mediaQuery.removeEventListener('change', handleMediaChange);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <DrawerContext.Provider value={{ open, setOpen }}>\r\n      {triggerContent && <DrawerTrigger>{triggerContent}</DrawerTrigger>}\r\n      {isDesktop ? (\r\n        <AnimatePresence>\r\n          {open && (\r\n            <motion.div\r\n              initial={{ opacity: 0 }}\r\n              animate={{ opacity: 1 }}\r\n              exit={{ opacity: 0 }}\r\n              className='fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm cursor-zoom-out'\r\n              onClick={() => setOpen(false)}\r\n            >\r\n              <motion.div\r\n                initial={{ scale: 0.9, opacity: 0 }}\r\n                animate={{ scale: 1, opacity: 1 }}\r\n                exit={{ scale: 0.9, opacity: 0 }}\r\n                transition={{ type: 'spring', duration: 0.5 }}\r\n                onClick={(e) => e.stopPropagation()}\r\n                className={cn(\r\n                  'relative w-full max-w-md p-6 border bg-background rounded-lg cursor-default',\r\n                  classname\r\n                )}\r\n              >\r\n                <button\r\n                  className={cn(\r\n                    'absolute top-2 right-2 bg-primary text-background p-2 border z-[1] rounded-md',\r\n                    closeBtnClass\r\n                  )}\r\n                  onClick={() => setOpen(false)}\r\n                >\r\n                  <X />\r\n                </button>\r\n                {children}\r\n              </motion.div>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n      ) : (\r\n        <VaulDrawer.Root\r\n          shouldScaleBackground\r\n          open={open}\r\n          onOpenChange={setOpen}\r\n        >\r\n          <VaulDrawer.Portal>\r\n            <VaulDrawer.Overlay className='fixed inset-0 z-50 bg-black/50 backdrop-blur-sm' />\r\n            <VaulDrawer.Content className='fixed bottom-0 left-0 z-50 w-full max-h-[96%] bg-white dark:bg-gray-900'>\r\n              <div className='mx-auto w-16 h-[0.30rem] flex-shrink-0 rounded-full bg-gray-600 my-4' />\r\n              <div className='w-full mx-auto max-h-[96vh] overflow-auto'>\r\n                {children}\r\n              </div>\r\n            </VaulDrawer.Content>\r\n          </VaulDrawer.Portal>\r\n        </VaulDrawer.Root>\r\n      )}\r\n    </DrawerContext.Provider>\r\n  );\r\n}\r\n\r\nexport function DrawerContent({\r\n  children,\r\n  classname,\r\n}: {\r\n  children: ReactNode;\r\n  classname?: string;\r\n}) {\r\n  return <div className={cn('', classname)}>{children}</div>;\r\n}\r\n\r\nexport function DrawerTrigger({ children }: { children: ReactNode }) {\r\n  const { setOpen } = useDrawer();\r\n  return <div onClick={() => setOpen(true)}>{children}</div>;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}