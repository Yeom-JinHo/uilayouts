{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "type": "registry:component",
  "dependencies": [
    "vaul",
    "lucide-react",
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/drawer/vaul-main.tsx",
      "content": "'use client';\n\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  ReactNode,\n} from 'react';\nimport { AnimatePresence, motion } from 'motion/react';\nimport { X } from 'lucide-react';\nimport { Drawer as VaulDrawer } from 'vaul';\nimport { cn } from '@/lib/utils';\n\ninterface DrawerContextProps {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}\n\nconst DrawerContext = createContext<DrawerContextProps | undefined>(undefined);\n\nexport const useDrawer = () => {\n  const context = useContext(DrawerContext);\n  if (!context) {\n    throw new Error('useDrawer must be used within a DrawerProvider');\n  }\n  return context;\n};\n\ninterface ResponsiveDrawerProps {\n  children: ReactNode;\n  triggerContent?: ReactNode;\n  open?: boolean;\n  setOpen?: (open: boolean) => void;\n  classname?: string;\n  closeBtnClass?: string;\n}\n\nexport function ResponsiveDrawer({\n  children,\n  triggerContent,\n  open: controlledOpen,\n  setOpen: controlledSetOpen,\n  classname,\n  closeBtnClass,\n}: ResponsiveDrawerProps) {\n  const [internalOpen, setInternalOpen] = useState(false);\n  const [isDesktop, setIsDesktop] = useState(false);\n\n  const open = controlledOpen !== undefined ? controlledOpen : internalOpen;\n  const setOpen = controlledSetOpen || setInternalOpen;\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(min-width: 768px)');\n    const handleMediaChange = (event: MediaQueryListEvent) => {\n      setIsDesktop(event.matches);\n    };\n\n    setIsDesktop(mediaQuery.matches);\n    mediaQuery.addEventListener('change', handleMediaChange);\n\n    return () => {\n      mediaQuery.removeEventListener('change', handleMediaChange);\n    };\n  }, []);\n\n  return (\n    <DrawerContext.Provider value={{ open, setOpen }}>\n      {triggerContent && <DrawerTrigger>{triggerContent}</DrawerTrigger>}\n      {isDesktop ? (\n        <AnimatePresence>\n          {open && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className='fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm cursor-zoom-out'\n              onClick={() => setOpen(false)}\n            >\n              <motion.div\n                initial={{ scale: 0.9, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                exit={{ scale: 0.9, opacity: 0 }}\n                transition={{ type: 'spring', duration: 0.5 }}\n                onClick={(e) => e.stopPropagation()}\n                className={cn(\n                  'relative w-full max-w-md p-6 border bg-background rounded-lg cursor-default',\n                  classname\n                )}\n              >\n                <button\n                  className={cn(\n                    'absolute top-2 right-2 bg-primary text-background p-2 border z-[1] rounded-md',\n                    closeBtnClass\n                  )}\n                  onClick={() => setOpen(false)}\n                >\n                  <X />\n                </button>\n                {children}\n              </motion.div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      ) : (\n        <VaulDrawer.Root\n          shouldScaleBackground\n          open={open}\n          onOpenChange={setOpen}\n        >\n          <VaulDrawer.Portal>\n            <VaulDrawer.Overlay className='fixed inset-0 z-50 bg-black/50 backdrop-blur-sm' />\n            <VaulDrawer.Content className='fixed bottom-0 left-0 z-50 w-full max-h-[96%] bg-white dark:bg-gray-900'>\n              <div className='mx-auto w-16 h-[0.30rem] flex-shrink-0 rounded-full bg-gray-600 my-4' />\n              <div className='w-full mx-auto max-h-[96vh] overflow-auto'>\n                {children}\n              </div>\n            </VaulDrawer.Content>\n          </VaulDrawer.Portal>\n        </VaulDrawer.Root>\n      )}\n    </DrawerContext.Provider>\n  );\n}\n\nexport function DrawerContent({\n  children,\n  classname,\n}: {\n  children: ReactNode;\n  classname?: string;\n}) {\n  return <div className={cn('', classname)}>{children}</div>;\n}\n\nexport function DrawerTrigger({ children }: { children: ReactNode }) {\n  const { setOpen } = useDrawer();\n  return <div onClick={() => setOpen(true)}>{children}</div>;\n}\n",
      "type": "registry:component"
    }
  ]
}