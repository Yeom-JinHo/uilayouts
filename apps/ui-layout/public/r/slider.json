{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slider",
  "type": "registry:component",
  "dependencies": [
    "@number-flow/react",
    "@radix-ui/react-slider"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/slider.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as SliderPrimitive from '@radix-ui/react-slider';\r\nimport { cn } from '@/lib/utils';\r\nimport NumberFlow from '@number-flow/react';\r\nimport { GripVertical } from 'lucide-react';\r\n\r\ninterface DualRangeSliderProps\r\n  extends React.ComponentProps<typeof SliderPrimitive.Root> {\r\n  labelPosition?: 'top' | 'bottom' | 'static';\r\n  lableContenPos?: 'left' | 'right';\r\n  label?: React.ReactNode | ((value: number | undefined) => React.ReactNode);\r\n}\r\n\r\nconst DualRangeSlider = React.forwardRef<\r\n  React.ElementRef<typeof SliderPrimitive.Root>,\r\n  DualRangeSliderProps\r\n>(\r\n  (\r\n    {\r\n      className,\r\n      label,\r\n      labelPosition = 'top',\r\n      lableContenPos = 'right',\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const initialValue = Array.isArray(props.value)\r\n      ? props.value\r\n      : [props.min, props.max];\r\n\r\n    return (\r\n      <SliderPrimitive.Root\r\n        ref={ref}\r\n        className={cn(\r\n          'relative flex w-full touch-none select-none items-center',\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        <SliderPrimitive.Track className='relative h-6 w-full grow overflow-hidden bg-[linear-gradient(to_right,#e2e2e22c_1px,transparent_1px),linear-gradient(to_bottom,#9c9c9c2c_1px,transparent_1px)] bg-[size:4px_4px] dark:bg-neutral-800 bg-neutral-50 rounded-md dark:bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)]'>\r\n          <SliderPrimitive.Range className='absolute h-full dark:bg-neutral-100 bg-neutral-800' />\r\n        </SliderPrimitive.Track>\r\n        <>\r\n          {initialValue.map((value, index) => (\r\n            <React.Fragment key={index}>\r\n              <SliderPrimitive.Thumb className='relative grid h-6 w-3 cursor-grab place-content-center dark:bg-neutral-100 bg-neutral-800 shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-white'>\r\n                {label && labelPosition !== 'static' && (\r\n                  <div\r\n                    className={cn(\r\n                      'absolute flex w-full justify-center items-start gap-0.5',\r\n                      labelPosition === 'top' && '-top-7',\r\n                      labelPosition === 'bottom' && 'top-4'\r\n                    )}\r\n                  >\r\n                    {lableContenPos === 'left' && (\r\n                      <>\r\n                        {typeof label === 'function' ? (\r\n                          <span className='inline-block  -translate-y-0.5'>\r\n                            {label(value)}\r\n                          </span>\r\n                        ) : (\r\n                          label && (\r\n                            <span className='inline-block '>{label}</span>\r\n                          )\r\n                        )}\r\n                      </>\r\n                    )}\r\n                    <NumberFlow\r\n                      willChange\r\n                      // @ts-ignore\r\n                      value={value}\r\n                      isolate\r\n                      opacityTiming={{\r\n                        duration: 250,\r\n                        easing: 'ease-out',\r\n                      }}\r\n                      transformTiming={{\r\n                        easing: `linear(0, 0.0033 0.8%, 0.0263 2.39%, 0.0896 4.77%, 0.4676 15.12%, 0.5688, 0.6553, 0.7274, 0.7862, 0.8336 31.04%, 0.8793, 0.9132 38.99%, 0.9421 43.77%, 0.9642 49.34%, 0.9796 55.71%, 0.9893 62.87%, 0.9952 71.62%, 0.9983 82.76%, 0.9996 99.47%)`,\r\n                        duration: 500,\r\n                      }}\r\n                    />\r\n                    {lableContenPos === 'right' && (\r\n                      <>\r\n                        {typeof label === 'function' ? (\r\n                          <span className='inline-block  -translate-y-1'>\r\n                            {label(value)}\r\n                          </span>\r\n                        ) : (\r\n                          label && (\r\n                            <span className='inline-block '>{label}</span>\r\n                          )\r\n                        )}\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                <GripVertical\r\n                  size={16}\r\n                  className='px-0.5 text-primary-foreground'\r\n                />\r\n              </SliderPrimitive.Thumb>\r\n            </React.Fragment>\r\n          ))}\r\n        </>\r\n\r\n        {label && labelPosition === 'static' && (\r\n          <>\r\n            {initialValue.map((value, index) => (\r\n              <div\r\n                className={cn(\r\n                  'absolute -top-7 w-fit right-0 flex  justify-center items-start gap-0.5'\r\n                )}\r\n              >\r\n                {lableContenPos === 'left' && (\r\n                  <>\r\n                    {typeof label === 'function' ? (\r\n                      <span className='inline-block  -translate-y-0.5'>\r\n                        {label(value)}\r\n                      </span>\r\n                    ) : (\r\n                      label && <span className='inline-block '>{label}</span>\r\n                    )}\r\n                  </>\r\n                )}\r\n                <NumberFlow\r\n                  willChange\r\n                  // @ts-ignore\r\n                  value={value}\r\n                  isolate\r\n                  opacityTiming={{\r\n                    duration: 250,\r\n                    easing: 'ease-out',\r\n                  }}\r\n                  transformTiming={{\r\n                    easing: `linear(0, 0.0033 0.8%, 0.0263 2.39%, 0.0896 4.77%, 0.4676 15.12%, 0.5688, 0.6553, 0.7274, 0.7862, 0.8336 31.04%, 0.8793, 0.9132 38.99%, 0.9421 43.77%, 0.9642 49.34%, 0.9796 55.71%, 0.9893 62.87%, 0.9952 71.62%, 0.9983 82.76%, 0.9996 99.47%)`,\r\n                    duration: 500,\r\n                  }}\r\n                />\r\n                {lableContenPos === 'right' && (\r\n                  <>\r\n                    {typeof label === 'function' ? (\r\n                      <span className='inline-block  -translate-y-1'>\r\n                        {label(value)}\r\n                      </span>\r\n                    ) : (\r\n                      label && <span className='inline-block '>{label}</span>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </>\r\n        )}\r\n      </SliderPrimitive.Root>\r\n    );\r\n  }\r\n);\r\nDualRangeSlider.displayName = 'DualRangeSlider';\r\n\r\nexport { DualRangeSlider };\r\n",
      "type": "registry:component"
    }
  ]
}