{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "slider",
  "type": "registry:component",
  "dependencies": [
    "@number-flow/react",
    "@radix-ui/react-slider"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/slider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as SliderPrimitive from '@radix-ui/react-slider';\nimport { cn } from '@/lib/utils';\nimport NumberFlow from '@number-flow/react';\n\ninterface DualRangeSliderProps\n  extends React.ComponentProps<typeof SliderPrimitive.Root> {\n  labelPosition?: 'top' | 'bottom' | 'static';\n  lableContenPos?: 'left' | 'right';\n  label?: React.ReactNode | ((value: number | undefined) => React.ReactNode);\n}\n\nconst DualRangeSlider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  DualRangeSliderProps\n>(\n  (\n    {\n      className,\n      label,\n      labelPosition = 'top',\n      lableContenPos = 'right',\n      ...props\n    },\n    ref\n  ) => {\n    const initialValue = Array.isArray(props.value)\n      ? props.value\n      : [props.min, props.max];\n\n    return (\n      <SliderPrimitive.Root\n        ref={ref}\n        className={cn(\n          'relative flex w-full touch-none select-none items-center',\n          className\n        )}\n        {...props}\n      >\n        <SliderPrimitive.Track className='relative h-2 w-full grow overflow-hidden rounded-full dark:bg-gray-800 bg-gray-300'>\n          <SliderPrimitive.Range className='absolute h-full bg-primary' />\n        </SliderPrimitive.Track>\n        <>\n          {initialValue.map((value, index) => (\n            <React.Fragment key={index}>\n              <SliderPrimitive.Thumb className='relative block h-4 w-4 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50'>\n                {label && labelPosition !== 'static' && (\n                  <div\n                    className={cn(\n                      'absolute flex w-full justify-center items-start gap-0.5',\n                      labelPosition === 'top' && '-top-7',\n                      labelPosition === 'bottom' && 'top-4'\n                    )}\n                  >\n                    {lableContenPos === 'left' && (\n                      <>\n                        {typeof label === 'function' ? (\n                          <span className='inline-block  -translate-y-0.5'>\n                            {label(value)}\n                          </span>\n                        ) : (\n                          label && (\n                            <span className='inline-block '>{label}</span>\n                          )\n                        )}\n                      </>\n                    )}\n                    <NumberFlow\n                      willChange\n                      // @ts-ignore\n                      value={value}\n                      isolate\n                      opacityTiming={{\n                        duration: 250,\n                        easing: 'ease-out',\n                      }}\n                      transformTiming={{\n                        easing: `linear(0, 0.0033 0.8%, 0.0263 2.39%, 0.0896 4.77%, 0.4676 15.12%, 0.5688, 0.6553, 0.7274, 0.7862, 0.8336 31.04%, 0.8793, 0.9132 38.99%, 0.9421 43.77%, 0.9642 49.34%, 0.9796 55.71%, 0.9893 62.87%, 0.9952 71.62%, 0.9983 82.76%, 0.9996 99.47%)`,\n                        duration: 500,\n                      }}\n                    />\n                    {lableContenPos === 'right' && (\n                      <>\n                        {typeof label === 'function' ? (\n                          <span className='inline-block  -translate-y-1'>\n                            {label(value)}\n                          </span>\n                        ) : (\n                          label && (\n                            <span className='inline-block '>{label}</span>\n                          )\n                        )}\n                      </>\n                    )}\n                  </div>\n                )}\n              </SliderPrimitive.Thumb>\n            </React.Fragment>\n          ))}\n        </>\n\n        {label && labelPosition === 'static' && (\n          <>\n            {initialValue.map((value, index) => (\n              <div\n                className={cn(\n                  'absolute -top-7 w-fit right-0 flex  justify-center items-start gap-0.5'\n                )}\n              >\n                {lableContenPos === 'left' && (\n                  <>\n                    {typeof label === 'function' ? (\n                      <span className='inline-block  -translate-y-0.5'>\n                        {label(value)}\n                      </span>\n                    ) : (\n                      label && <span className='inline-block '>{label}</span>\n                    )}\n                  </>\n                )}\n                <NumberFlow\n                  willChange\n                  // @ts-ignore\n                  value={value}\n                  isolate\n                  opacityTiming={{\n                    duration: 250,\n                    easing: 'ease-out',\n                  }}\n                  transformTiming={{\n                    easing: `linear(0, 0.0033 0.8%, 0.0263 2.39%, 0.0896 4.77%, 0.4676 15.12%, 0.5688, 0.6553, 0.7274, 0.7862, 0.8336 31.04%, 0.8793, 0.9132 38.99%, 0.9421 43.77%, 0.9642 49.34%, 0.9796 55.71%, 0.9893 62.87%, 0.9952 71.62%, 0.9983 82.76%, 0.9996 99.47%)`,\n                    duration: 500,\n                  }}\n                />\n                {lableContenPos === 'right' && (\n                  <>\n                    {typeof label === 'function' ? (\n                      <span className='inline-block  -translate-y-1'>\n                        {label(value)}\n                      </span>\n                    ) : (\n                      label && <span className='inline-block '>{label}</span>\n                    )}\n                  </>\n                )}\n              </div>\n            ))}\n          </>\n        )}\n      </SliderPrimitive.Root>\n    );\n  }\n);\nDualRangeSlider.displayName = 'DualRangeSlider';\n\nexport { DualRangeSlider };\n",
      "type": "registry:component"
    }
  ]
}