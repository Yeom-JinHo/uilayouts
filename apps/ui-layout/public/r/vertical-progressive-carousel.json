{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "vertical-progressive-carousel",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/progressive-carousel.tsx",
      "content": "import React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  ReactNode,\r\n  FC,\r\n} from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// Define the type for the context value\r\ninterface ProgressSliderContextType {\r\n  active: string;\r\n  progress: number;\r\n  handleButtonClick: (value: string) => void;\r\n  vertical: boolean;\r\n}\r\n\r\n// Define the type for the component props\r\ninterface ProgressSliderProps {\r\n  children: ReactNode;\r\n  duration?: number;\r\n  fastDuration?: number;\r\n  vertical?: boolean;\r\n  activeSlider: string;\r\n  className?: string;\r\n}\r\n\r\ninterface SliderContentProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\ninterface SliderWrapperProps {\r\n  children: ReactNode;\r\n  value: string;\r\n  className?: string;\r\n}\r\n\r\ninterface ProgressBarProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\ninterface SliderBtnProps {\r\n  children: ReactNode;\r\n  value: string;\r\n  className?: string;\r\n  progressBarClass?: string;\r\n}\r\n\r\n// Create the context with an undefined initial value\r\nconst ProgressSliderContext = createContext<\r\n  ProgressSliderContextType | undefined\r\n>(undefined);\r\n\r\nexport const useProgressSliderContext = (): ProgressSliderContextType => {\r\n  const context = useContext(ProgressSliderContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      'useProgressSliderContext must be used within a ProgressSlider'\r\n    );\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ProgressSlider: FC<ProgressSliderProps> = ({\r\n  children,\r\n  duration = 5000,\r\n  fastDuration = 400,\r\n  vertical = false,\r\n  activeSlider,\r\n  className,\r\n}) => {\r\n  const [active, setActive] = useState<string>(activeSlider);\r\n  const [progress, setProgress] = useState<number>(0);\r\n  const [isFastForward, setIsFastForward] = useState<boolean>(false);\r\n  const frame = useRef<number>(0);\r\n  const firstFrameTime = useRef<number>(performance.now());\r\n  const targetValue = useRef<string | null>(null);\r\n  const [sliderValues, setSliderValues] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const getChildren = React.Children.toArray(children).find(\r\n      (child) => (child as React.ReactElement<any>).type === SliderContent\r\n    ) as React.ReactElement<any> | undefined;\r\n\r\n    if (getChildren) {\r\n      const values = React.Children.toArray(getChildren.props.children).map(\r\n        (child) => (child as React.ReactElement<any>).props.value as string\r\n      );\r\n      setSliderValues(values);\r\n    }\r\n  }, [children]);\r\n\r\n  useEffect(() => {\r\n    if (sliderValues.length > 0) {\r\n      firstFrameTime.current = performance.now();\r\n      frame.current = requestAnimationFrame(animate);\r\n    }\r\n    return () => {\r\n      cancelAnimationFrame(frame.current);\r\n    };\r\n  }, [sliderValues, active, isFastForward]);\r\n\r\n  const animate = (now: number) => {\r\n    const currentDuration = isFastForward ? fastDuration : duration;\r\n    const elapsedTime = now - firstFrameTime.current;\r\n    const timeFraction = elapsedTime / currentDuration;\r\n\r\n    if (timeFraction <= 1) {\r\n      setProgress(\r\n        isFastForward\r\n          ? progress + (100 - progress) * timeFraction\r\n          : timeFraction * 100\r\n      );\r\n      frame.current = requestAnimationFrame(animate);\r\n    } else {\r\n      if (isFastForward) {\r\n        setIsFastForward(false);\r\n        if (targetValue.current !== null) {\r\n          setActive(targetValue.current);\r\n          targetValue.current = null;\r\n        }\r\n      } else {\r\n        // Move to the next slide\r\n        const currentIndex = sliderValues.indexOf(active);\r\n        const nextIndex = (currentIndex + 1) % sliderValues.length;\r\n        setActive(sliderValues[nextIndex]);\r\n      }\r\n      setProgress(0);\r\n      firstFrameTime.current = performance.now();\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = (value: string) => {\r\n    if (value !== active) {\r\n      const elapsedTime = performance.now() - firstFrameTime.current;\r\n      const currentProgress = (elapsedTime / duration) * 100;\r\n      setProgress(currentProgress);\r\n      targetValue.current = value;\r\n      setIsFastForward(true);\r\n      firstFrameTime.current = performance.now();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ProgressSliderContext.Provider\r\n      value={{ active, progress, handleButtonClick, vertical }}\r\n    >\r\n      <div className={cn('relative', className)}>{children}</div>\r\n    </ProgressSliderContext.Provider>\r\n  );\r\n};\r\n\r\nexport const SliderContent: FC<SliderContentProps> = ({\r\n  children,\r\n  className,\r\n}) => {\r\n  return <div className={cn('', className)}>{children}</div>;\r\n};\r\n\r\nexport const SliderWrapper: FC<SliderWrapperProps> = ({\r\n  children,\r\n  value,\r\n  className,\r\n}) => {\r\n  const { active } = useProgressSliderContext();\r\n\r\n  return (\r\n    <AnimatePresence mode='popLayout'>\r\n      {active === value && (\r\n        <motion.div\r\n          key={value}\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          className={cn('', className)}\r\n        >\r\n          {children}\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nexport const SliderBtnGroup: FC<ProgressBarProps> = ({\r\n  children,\r\n  className,\r\n}) => {\r\n  return <div className={cn('', className)}>{children}</div>;\r\n};\r\n\r\nexport const SliderBtn: FC<SliderBtnProps> = ({\r\n  children,\r\n  value,\r\n  className,\r\n  progressBarClass,\r\n}) => {\r\n  const { active, progress, handleButtonClick, vertical } =\r\n    useProgressSliderContext();\r\n\r\n  return (\r\n    <button\r\n      className={cn(\r\n        `relative ${active === value ? 'opacity-100' : 'opacity-50'}`,\r\n        className\r\n      )}\r\n      onClick={() => handleButtonClick(value)}\r\n    >\r\n      {children}\r\n      <div\r\n        className='absolute inset-0 overflow-hidden -z-10 max-h-full max-w-full '\r\n        role='progressbar'\r\n        aria-valuenow={active === value ? progress : 0}\r\n      >\r\n        <span\r\n          className={cn('absolute left-0 ', progressBarClass)}\r\n          style={{\r\n            [vertical ? 'height' : 'width']:\r\n              active === value ? `${progress}%` : '0%',\r\n          }}\r\n        />\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    },
    {
      "path": "./registry/components/carousel/verticle-progressive.tsx",
      "content": "'use client';\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport Image, { StaticImageData } from 'next/image';\r\nimport { AnimatePresence, motion } from 'motion/react';\r\nimport {\r\n  SliderBtnGroup,\r\n  ProgressSlider,\r\n  SliderBtn,\r\n  SliderContent,\r\n  SliderWrapper,\r\n} from '@/components/ui/progressive-carousel';\r\nimport { Home } from 'lucide-react';\r\nimport { useMediaQuery } from '@/hooks/use-media-query';\r\nimport { imgPreview } from '@/components/website/constant';\r\n\r\nconst items = [\r\n  {\r\n    img: 'https://images.unsplash.com/photo-1709949908058-a08659bfa922?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n    title: 'Bridge',\r\n    desc: 'A breathtaking view of a city illuminated by countless lights, showcasing the vibrant and bustling nightlife.',\r\n    sliderName: 'bridge',\r\n  },\r\n  {\r\n    img: 'https://images.unsplash.com/photo-1518972734183-c5b490a7c637?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n    title: 'Mountains View',\r\n    desc: 'A serene lake reflecting the surrounding mountains and trees, creating a mirror-like surface.',\r\n    sliderName: 'mountains',\r\n  },\r\n  {\r\n    img: 'https://images.unsplash.com/photo-1548192746-dd526f154ed9?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n    title: 'Autumn',\r\n    desc: 'A picturesque path winding through a dense forest adorned with vibrant autumn foliage.',\r\n    sliderName: 'autumn',\r\n  },\r\n  {\r\n    img: 'https://images.unsplash.com/photo-1628965882741-570e75becd5d?q=80&w=687&auto=format&fit=crop',\r\n    title: 'Foggy',\r\n    sliderName: 'foggy',\r\n    desc: 'A stunning foggy view over the foresh, with the sun casting a golden glow across the forest. ',\r\n  },\r\n];\r\nexport default function index() {\r\n  const isMobile = useMediaQuery('(min-width: 640px)');\r\n  return (\r\n    <>\r\n      <ProgressSlider\r\n        vertical={isMobile ? true : false}\r\n        fastDuration={300}\r\n        duration={4000}\r\n        activeSlider='bbridge'\r\n        className='sm:flex '\r\n      >\r\n        <SliderBtnGroup className='sm:relative absolute bottom-0 lg:w-md sm:w-96 w-full z-10 sm:flex sm:flex-col grid grid-cols-2 sm:h-[500px] h-fit sm:dark:bg-black sm:bg-white dark:bg-black/80 bg-white/80 backdrop-blur-md overflow-hidden '>\r\n          {items.map((item, index) => (\r\n            <SliderBtn\r\n              key={index}\r\n              value={item?.sliderName}\r\n              className='text-left  p-3 sm:border-b border sm:pl-5 sm:pb-0 pb-6 sm:flex-1'\r\n              progressBarClass='left-0 sm:top-0 bottom-0 dark:bg-white bg-black sm:w-3 sm:h-full h-4  before:h-full before:w-4 before:'\r\n            >\r\n              <h2 className='relative px-4 rounded-sm w-fit dark:bg-blue-500 bg-black text-white mb-2'>\r\n                {item.title}\r\n              </h2>\r\n              <p className='text-sm font-medium dark:text-slate-200 text-slate-900 line-clamp-2'>\r\n                {item.desc}\r\n              </p>\r\n            </SliderBtn>\r\n          ))}\r\n        </SliderBtnGroup>\r\n        <SliderContent className='w-full'>\r\n          {items.map((item, index) => (\r\n            <SliderWrapper\r\n              className='h-full'\r\n              key={index}\r\n              value={item?.sliderName}\r\n            >\r\n              <Image\r\n                className=' h-[500px] object-cover'\r\n                src={item.img}\r\n                width={1900}\r\n                height={1080}\r\n                alt={item.desc}\r\n              />\r\n            </SliderWrapper>\r\n          ))}\r\n        </SliderContent>\r\n      </ProgressSlider>\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}