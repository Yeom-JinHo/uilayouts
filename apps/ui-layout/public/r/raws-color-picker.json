{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "raws-color-picker",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/color-picker.tsx",
      "content": "\"use client\";\r\n\r\nimport { Button } from \"@/components/website/ui/button\";\r\nimport { Input } from \"@/components/website/ui/input\";\r\nimport { Label } from \"@/components/website/ui/label\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/website/ui/popover\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Copy, Pipette } from \"lucide-react\";\r\nimport { HexColorPicker } from \"react-colorful\";\r\nimport { toast } from \"sonner\";\r\n\r\ninterface ColorPickerProps {\r\n  color: string\r\n  onChange: (color: string) => void\r\n  label: string\r\n  isEyeDroppper?:boolean\r\n  className?:string\r\n}\r\n\r\nexport function ColorPicker({\r\n  color,\r\n  onChange,\r\n  label,\r\n  isEyeDroppper = false,\r\n  className,\r\n}: ColorPickerProps) {\r\n  function copyToClipboard() {\r\n    navigator.clipboard.writeText(color);\r\n    toast(\"Copied!\", {\r\n      description: `${color} copied to clipboard`,\r\n      duration: 2000,\r\n    });\r\n  }\r\n\r\n  async function useEyeDropper() {\r\n    if (!(\"EyeDropper\" in window)) {\r\n      toast.error(\"Not supported\", {\r\n        description: \"Eyedropper is not supported in your browser\",\r\n        duration: 3000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // @ts-expect-error - EyeDropper is not in the TypeScript DOM types yet\r\n      const eyeDropper = new window.EyeDropper();\r\n      const result = await eyeDropper.open();\r\n      onChange(result.sRGBHex);\r\n    } catch (e) {\r\n      console.error(\"Error using eyedropper\", e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"flex items-center gap-2\",className)}>\r\n      <Label className=\"w-24\">{label}</Label>\r\n      <Popover>\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-12 border-2 p-0\"\r\n            style={{ backgroundColor: color }}\r\n          >\r\n            <span className=\"sr-only\">Pick a color</span>\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"w-full p-3 bg-primary-foreground\">\r\n          <HexColorPicker\r\n            color={color}\r\n            onChange={onChange}\r\n            className=\"w-full!\"\r\n          />\r\n          <div className=\"mt-2 flex w-full gap-2\">\r\n            <Input\r\n              value={color}\r\n              onChange={(e) => onChange(e.target.value)}\r\n              className=\"h-10 w-full\"\r\n            />\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"icon\"\r\n              onClick={copyToClipboard}\r\n              className=\"h-10 w-12 shrink border-gray-300 bg-gray-100 text-gray-900 hover:bg-gray-200\"\r\n              style={{ borderRadius: \"6px\" }}\r\n            >\r\n              <Copy className=\"h-4 w-4\" />\r\n              <span className=\"sr-only\">Copy color</span>\r\n            </Button>\r\n          </div>\r\n\r\n          {isEyeDroppper && (\r\n            <div className=\"mt-2 flex gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"icon\"\r\n                onClick={useEyeDropper}\r\n                className=\"h-10 w-10 border-gray-300 bg-gray-100 text-gray-900 hover:bg-gray-200\"\r\n                style={{ borderRadius: \"6px\" }}\r\n              >\r\n                <Pipette className=\"h-4 w-4\" />\r\n                <span className=\"sr-only\">Pick color</span>\r\n              </Button>\r\n\r\n              <div\r\n                className=\"h-10 flex-1\"\r\n                style={{ backgroundColor: color, borderRadius: \"6px\" }}\r\n              />\r\n            </div>\r\n          )}\r\n        </PopoverContent>\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./registry/components/color-picker/raws-color-picker.tsx",
      "content": "\"use client\"\r\n\r\n\r\nimport { useEffect, useRef, useState, useCallback } from \"react\"\r\nimport { Button } from \"@/components/website/ui/button\"\r\nimport { Copy, Pipette } from \"lucide-react\"\r\nimport { toast } from \"sonner\"\r\n\r\ninterface ColorPickerProps {\r\n  color: string\r\n  onChange: (color: string) => void\r\n  showEyedropper?: boolean\r\n}\r\n\r\nexport function ColorPicker({ color, onChange, showEyedropper = true }: ColorPickerProps) {\r\n  const [hue, setHue] = useState(0)\r\n  const [position, setPosition] = useState({ x: 0, y: 0 })\r\n  const [internalColor, setInternalColor] = useState(color)\r\n  const [hexValue, setHexValue] = useState(color)\r\n  const [isDraggingHue, setIsDraggingHue] = useState(false)\r\n  const [isDraggingColor, setIsDraggingColor] = useState(false)\r\n\r\n  const colorPanelRef = useRef<HTMLDivElement>(null)\r\n  const hueSliderRef = useRef<HTMLDivElement>(null)\r\n\r\n  // Initialize picker state from the provided color\r\n  useEffect(() => {\r\n    if (color.startsWith(\"#\")) {\r\n      setHexValue(color)\r\n      setInternalColor(color)\r\n      const { h, s, v } = hexToHsv(color)\r\n      setHue(h)\r\n\r\n      if (colorPanelRef.current) {\r\n        const width = colorPanelRef.current.clientWidth\r\n        const height = colorPanelRef.current.clientHeight\r\n        setPosition({\r\n          x: s * width,\r\n          y: (1 - v) * height,\r\n        })\r\n      }\r\n    }\r\n  }, [color])\r\n\r\n  // Convert hex to HSV\r\n  function hexToHsv(hex: string): { h: number; s: number; v: number } {\r\n    hex = hex.replace(/^#/, \"\")\r\n\r\n    const r = Number.parseInt(hex.substring(0, 2), 16) / 255\r\n    const g = Number.parseInt(hex.substring(2, 4), 16) / 255\r\n    const b = Number.parseInt(hex.substring(4, 6), 16) / 255\r\n\r\n    const max = Math.max(r, g, b)\r\n    const min = Math.min(r, g, b)\r\n    const delta = max - min\r\n\r\n    let h = 0\r\n    if (delta !== 0) {\r\n      if (max === r) {\r\n        h = ((g - b) / delta) % 6\r\n      } else if (max === g) {\r\n        h = (b - r) / delta + 2\r\n      } else {\r\n        h = (r - g) / delta + 4\r\n      }\r\n\r\n      h = Math.round(h * 60)\r\n      if (h < 0) h += 360\r\n    }\r\n\r\n    const s = max === 0 ? 0 : delta / max\r\n    const v = max\r\n\r\n    return { h, s, v }\r\n  }\r\n\r\n  // Convert HSV to hex\r\n  function hsvToHex(h: number, s: number, v: number): string {\r\n    const hi = Math.floor(h / 60) % 6\r\n    const f = h / 60 - Math.floor(h / 60)\r\n    const p = v * (1 - s)\r\n    const q = v * (1 - f * s)\r\n    const t = v * (1 - (1 - f) * s)\r\n\r\n    let r = 0\r\n    let g = 0\r\n    let b = 0\r\n\r\n    switch (hi) {\r\n      case 0:\r\n        r = v\r\n        g = t\r\n        b = p\r\n        break\r\n      case 1:\r\n        r = q\r\n        g = v\r\n        b = p\r\n        break\r\n      case 2:\r\n        r = p\r\n        g = v\r\n        b = t\r\n        break\r\n      case 3:\r\n        r = p\r\n        g = q\r\n        b = v\r\n        break\r\n      case 4:\r\n        r = t\r\n        g = p\r\n        b = v\r\n        break\r\n      case 5:\r\n        r = v\r\n        g = p\r\n        b = q\r\n        break\r\n    }\r\n\r\n    const toHex = (c: number) => {\r\n      const hex = Math.round(c * 255).toString(16)\r\n      return hex.length === 1 ? `0${hex}` : hex\r\n    }\r\n\r\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`\r\n  }\r\n\r\n  // Update internal color based on position and hue\r\n  const updateInternalColor = useCallback((x: number, y: number, h: number) => {\r\n    if (!colorPanelRef.current) return\r\n\r\n    const width = colorPanelRef.current.clientWidth\r\n    const height = colorPanelRef.current.clientHeight\r\n\r\n    // Clamp values\r\n    const clampedX = Math.max(0, Math.min(x, width))\r\n    const clampedY = Math.max(0, Math.min(y, height))\r\n\r\n    // Calculate saturation and value\r\n    const s = clampedX / width\r\n    const v = 1 - clampedY / height\r\n\r\n    // Update hex value\r\n    const newHex = hsvToHex(h, s, v)\r\n    setHexValue(newHex)\r\n    setInternalColor(newHex)\r\n\r\n    // Update position\r\n    setPosition({ x: clampedX, y: clampedY })\r\n  }, [])\r\n\r\n  // Commit the color change to the parent component\r\n  const commitColorChange = useCallback(() => {\r\n    onChange(internalColor)\r\n  }, [onChange, internalColor])\r\n\r\n  // Handle color panel mouse/touch events\r\n  function handleColorPanelMouseDown(e: React.MouseEvent<HTMLDivElement>) {\r\n    setIsDraggingColor(true)\r\n    const rect = e.currentTarget.getBoundingClientRect()\r\n    const x = e.clientX - rect.left\r\n    const y = e.clientY - rect.top\r\n    updateInternalColor(x, y, hue)\r\n  }\r\n\r\n  // Handle hue slider mouse/touch events\r\n  function handleHueSliderMouseDown(e: React.MouseEvent<HTMLDivElement>) {\r\n    setIsDraggingHue(true)\r\n    const rect = e.currentTarget.getBoundingClientRect()\r\n    const x = e.clientX - rect.left\r\n    const width = rect.width\r\n    const h = (x / width) * 360\r\n    setHue(h)\r\n    updateInternalColor(position.x, position.y, h)\r\n  }\r\n\r\n  // Handle mouse/touch move\r\n  useEffect(() => {\r\n    function handleMouseMove(e: MouseEvent) {\r\n      if (isDraggingColor && colorPanelRef.current) {\r\n        const rect = colorPanelRef.current.getBoundingClientRect()\r\n        const x = e.clientX - rect.left\r\n        const y = e.clientY - rect.top\r\n        updateInternalColor(x, y, hue)\r\n      } else if (isDraggingHue && hueSliderRef.current) {\r\n        const rect = hueSliderRef.current.getBoundingClientRect()\r\n        const x = e.clientX - rect.left\r\n        const width = rect.width\r\n        const h = Math.max(0, Math.min((x / width) * 360, 360))\r\n        setHue(h)\r\n        updateInternalColor(position.x, position.y, h)\r\n      }\r\n    }\r\n\r\n    function handleMouseUp() {\r\n      if (isDraggingColor || isDraggingHue) {\r\n        commitColorChange()\r\n      }\r\n      setIsDraggingColor(false)\r\n      setIsDraggingHue(false)\r\n    }\r\n\r\n    if (isDraggingColor || isDraggingHue) {\r\n      window.addEventListener(\"mousemove\", handleMouseMove)\r\n      window.addEventListener(\"mouseup\", handleMouseUp)\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove)\r\n      window.removeEventListener(\"mouseup\", handleMouseUp)\r\n    }\r\n  }, [isDraggingColor, isDraggingHue, hue, position.x, position.y, commitColorChange, updateInternalColor])\r\n\r\n  // Handle hex input change\r\n  function handleHexChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const value = e.target.value\r\n    setHexValue(value)\r\n\r\n    if (/^#[0-9A-F]{6}$/i.test(value)) {\r\n      setInternalColor(value)\r\n    }\r\n  }\r\n\r\n  // Handle hex input blur (commit change)\r\n  function handleHexBlur() {\r\n    if (/^#[0-9A-F]{6}$/i.test(hexValue)) {\r\n      commitColorChange()\r\n\r\n      // Update hue and position\r\n      const { h, s, v } = hexToHsv(hexValue)\r\n      setHue(h)\r\n\r\n      if (colorPanelRef.current) {\r\n        const width = colorPanelRef.current.clientWidth\r\n        const height = colorPanelRef.current.clientHeight\r\n        setPosition({\r\n          x: s * width,\r\n          y: (1 - v) * height,\r\n        })\r\n      }\r\n    } else {\r\n      // Reset to the last valid color\r\n      setHexValue(internalColor)\r\n    }\r\n  }\r\n\r\n  // Handle hex input key press (commit on Enter)\r\n  function handleHexKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\r\n    if (e.key === \"Enter\") {\r\n      handleHexBlur()\r\n    }\r\n  }\r\n\r\n  // Copy color to clipboard\r\n  function copyToClipboard() {\r\n    navigator.clipboard.writeText(hexValue)\r\n    toast(\"Copied!\", {\r\n      description: `${hexValue} copied to clipboard`,\r\n      duration: 2000,\r\n    })\r\n  }\r\n\r\n  // Use eyedropper if available\r\n  async function useEyeDropper() {\r\n    if (!(\"EyeDropper\" in window)) {\r\n      toast.error(\"Not supported\", {\r\n        description: \"Eyedropper is not supported in your browser\",\r\n        duration: 3000,\r\n      })\r\n      return\r\n    }\r\n\r\n    try {\r\n      // @ts-expect-error - EyeDropper is not in the TypeScript DOM types yet\r\n      const eyeDropper = new window.EyeDropper()\r\n      const result = await eyeDropper.open()\r\n      setHexValue(result.sRGBHex)\r\n      setInternalColor(result.sRGBHex)\r\n      commitColorChange()\r\n\r\n      // Update hue and position\r\n      const { h, s, v } = hexToHsv(result.sRGBHex)\r\n      setHue(h)\r\n\r\n      if (colorPanelRef.current) {\r\n        const width = colorPanelRef.current.clientWidth\r\n        const height = colorPanelRef.current.clientHeight\r\n        setPosition({\r\n          x: s * width,\r\n          y: (1 - v) * height,\r\n        })\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error using eyedropper\", e)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full space-y-4 rounded-lg bg-primary-foreground p-4 text-primary\">\r\n      {/* Color panel */}\r\n      <div\r\n        ref={colorPanelRef}\r\n        className=\"relative h-48 w-full cursor-crosshair touch-none rounded-md\"\r\n        style={{\r\n          backgroundColor: `hsl(${hue}, 100%, 50%)`,\r\n          backgroundImage: `\r\n          linear-gradient(to right, #fff, transparent),\r\n          linear-gradient(to bottom, transparent, #000)\r\n        `,\r\n        }}\r\n        onMouseDown={handleColorPanelMouseDown}\r\n      >\r\n        {/* Color selector */}\r\n        <div\r\n          className=\"-translate-x-1/2 -translate-y-1/2 pointer-events-none absolute h-6 w-6 rounded-full border-2 border-white shadow-md\"\r\n          style={{\r\n            left: position.x,\r\n            top: position.y,\r\n            backgroundColor: internalColor,\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      {/* Hue slider */}\r\n      <div\r\n        ref={hueSliderRef}\r\n        className=\"relative h-6 w-full cursor-pointer touch-none rounded-md\"\r\n        style={{\r\n          backgroundImage: `linear-gradient(to right, \r\n          #FF0000, #FFFF00, #00FF00, #00FFFF, #0000FF, #FF00FF, #FF0000)`,\r\n        }}\r\n        onMouseDown={handleHueSliderMouseDown}\r\n      >\r\n        {/* Hue selector */}\r\n        <div\r\n          className=\"-translate-x-1/2 -translate-y-1/2 pointer-events-none absolute h-6 w-6 rounded-full border-2 border-white shadow-md\"\r\n          style={{\r\n            left: `${(hue / 360) * 100}%`,\r\n            top: \"50%\",\r\n            backgroundColor: `hsl(${hue}, 100%, 50%)`,\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      {/* Hex input and tools */}\r\n      <div className=\"space-y-2\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <input\r\n            type=\"text\"\r\n            value={hexValue}\r\n            onChange={handleHexChange}\r\n            onBlur={handleHexBlur}\r\n            onKeyDown={handleHexKeyDown}\r\n            className=\"flex-1 rounded-md border border-gray-300 bg-white px-3 py-2 text-gray-900\"\r\n            pattern=\"^#[0-9A-F]{6}$\"\r\n            maxLength={7}\r\n          />\r\n           <Button\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            onClick={copyToClipboard}\r\n            className=\"h-10 w-10 border-gray-300 bg-gray-100 text-gray-900 hover:bg-gray-200\"\r\n          >\r\n            <Copy className=\"h-4 w-4\" />\r\n            <span className=\"sr-only\">Copy color</span>\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n         \r\n\r\n          {showEyedropper && (\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"icon\"\r\n              onClick={useEyeDropper}\r\n              className=\"h-10 w-10 border-gray-300 bg-gray-100 text-gray-900 hover:bg-gray-200\"\r\n            >\r\n              <Pipette className=\"h-4 w-4\" />\r\n              <span className=\"sr-only\">Pick color</span>\r\n            </Button>\r\n          )}\r\n\r\n          <div className=\"h-10 flex-1 rounded-md border border-gray-300\" style={{ backgroundColor: internalColor }} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nfunction RawsColorPicker() {\r\n    const [color,setColor] = useState(\"#002fff\")\r\n  return (\r\n    <div className='flex gap-2 items-center w-96 mx-auto' >\r\n      <ColorPicker color={color} onChange={(color) => setColor(color)}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RawsColorPicker\r\n",
      "type": "registry:component"
    }
  ]
}