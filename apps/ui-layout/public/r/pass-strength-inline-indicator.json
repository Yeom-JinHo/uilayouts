{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pass-strength-inline-indicator",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/form/password/pass-strength-inline-indicator.tsx",
      "content": "'use client';\r\nimport React, { useState, useMemo } from 'react';\r\nimport { Check, Eye, EyeOff, Info, X } from 'lucide-react';\r\n// shaadcn hover card\r\nimport {\r\n  HoverCard,\r\n  HoverCardContent,\r\n  HoverCardTrigger,\r\n} from '@/components/website/ui/hover-card';\r\n\r\n// Constants\r\nconst PASSWORD_REQUIREMENTS = [\r\n  { regex: /.{8,}/, text: 'At least 8 characters' },\r\n  { regex: /[0-9]/, text: 'At least 1 number' },\r\n  { regex: /[a-z]/, text: 'At least 1 lowercase letter' },\r\n  { regex: /[A-Z]/, text: 'At least 1 uppercase letter' },\r\n  { regex: /[!-\\/:-@[-`{-~]/, text: 'At least 1 special characters' },\r\n] as const;\r\n\r\ntype StrengthScore = 0 | 1 | 2 | 3 | 4 | 5;\r\n\r\nconst STRENGTH_CONFIG = {\r\n  colors: {\r\n    0: 'border-border',\r\n    1: 'border-red-500',\r\n    2: 'border-orange-500',\r\n    3: 'border-amber-500',\r\n    4: 'border-green-400',\r\n    5: 'border-emerald-500',\r\n  } satisfies Record<StrengthScore, string>,\r\n  texts: {\r\n    0: 'Enter a password',\r\n    1: 'Weak password',\r\n    2: 'Medium password!',\r\n    3: 'Strong password!!',\r\n    4: 'Very Strong password!!!',\r\n  } satisfies Record<Exclude<StrengthScore, 5>, string>,\r\n} as const;\r\n\r\n// Types\r\ntype Requirement = {\r\n  met: boolean;\r\n  text: string;\r\n};\r\n\r\ntype PasswordStrength = {\r\n  score: StrengthScore;\r\n  requirements: Requirement[];\r\n};\r\n\r\nconst PasswordInput = () => {\r\n  const [password, setPassword] = useState('');\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  const calculateStrength = useMemo((): PasswordStrength => {\r\n    const requirements = PASSWORD_REQUIREMENTS.map((req) => ({\r\n      met: req.regex.test(password),\r\n      text: req.text,\r\n    }));\r\n\r\n    return {\r\n      score: requirements.filter((req) => req.met).length as StrengthScore,\r\n      requirements,\r\n    };\r\n  }, [password]);\r\n\r\n  return (\r\n    <div className='w-96 mx-auto py-14'>\r\n      <form className='space-y-2'>\r\n        <div className='flex justify-between'>\r\n          <label htmlFor='password' className='block text-sm font-medium'>\r\n            Password\r\n          </label>\r\n          <HoverCard openDelay={200}>\r\n            <HoverCardTrigger>\r\n              <Info\r\n                size={20}\r\n                className={`cursor-pointer  ${\r\n                  STRENGTH_CONFIG.colors[calculateStrength.score]\r\n                } transition-all `}\r\n              />\r\n            </HoverCardTrigger>\r\n            <HoverCardContent className='dark:bg-neutral-950 bg-neutral-50'>\r\n              <ul className='space-y-1.5' aria-label='Password requirements'>\r\n                {calculateStrength.requirements.map((req, index) => (\r\n                  <li key={index} className='flex items-center space-x-2'>\r\n                    {req.met ? (\r\n                      <Check size={16} className='text-emerald-500' />\r\n                    ) : (\r\n                      <X size={16} className='text-muted-foreground/80' />\r\n                    )}\r\n                    <span\r\n                      className={`text-xs ${\r\n                        req.met ? 'text-emerald-600' : 'text-muted-foreground'\r\n                      }`}\r\n                    >\r\n                      {req.text}\r\n                      <span className='sr-only'>\r\n                        {req.met\r\n                          ? ' - Requirement met'\r\n                          : ' - Requirement not met'}\r\n                      </span>\r\n                    </span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </HoverCardContent>\r\n          </HoverCard>\r\n        </div>\r\n        <div className='relative'>\r\n          <input\r\n            id='password'\r\n            type={isVisible ? 'text' : 'password'}\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            placeholder='Password'\r\n            aria-invalid={calculateStrength.score < 4}\r\n            aria-describedby='password-strength'\r\n            className={`cursor-pointer  ${\r\n              STRENGTH_CONFIG.colors[calculateStrength.score]\r\n            } transition-all w-full p-2 border-2 rounded-md dark:bg-neutral-950 bg-neutral-50 outline-hidden`}\r\n          />\r\n          <button\r\n            type='button'\r\n            onClick={() => setIsVisible((prev) => !prev)}\r\n            aria-label={isVisible ? 'Hide password' : 'Show password'}\r\n            className='absolute inset-y-0 right-0 outline-hidden flex items-center justify-center w-9 text-muted-foreground/80 hover:text-foreground  '\r\n          >\r\n            {isVisible ? <EyeOff size={16} /> : <Eye size={16} />}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordInput;\r\n",
      "type": "registry:component"
    }
  ]
}