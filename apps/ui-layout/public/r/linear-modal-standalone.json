{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "linear-modal-standalone",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/linear-modal/standalone-version.tsx",
      "content": "'use client';\r\nimport { motion, AnimatePresence, MotionConfig, Transition } from 'motion/react';\r\nimport { Plus, X } from 'lucide-react';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\n// Card item type\r\ninterface CardItem {\r\n  id: number;\r\n  url: string;\r\n  title: string;\r\n  description: string;\r\n  tags: string[];\r\n}\r\n\r\n// Animation config\r\nconst transition: Transition = {\r\n  type: 'spring',\r\n  bounce: 0.05,\r\n  duration: 0.3\r\n};\r\n\r\nconst LinearCardDialog: React.FC = () => {\r\n  const [index, setIndex] = useState<number>(0);\r\n  const [isOpen, setIsOpen] = useState<boolean>(false);\r\n  const [carouselWidth, setCarouselWidth] = useState<number>(0);\r\n  const carousel = useRef<HTMLDivElement>(null);\r\n\r\n  // Default items (standalone, fixed)\r\n  const items: CardItem[] = [\r\n    {\r\n      id: 1,\r\n      url: 'https://images.unsplash.com/photo-1757672242146-a6a7897bcc80?q=80&w=1171&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n      title: 'Accordion',\r\n      description:\r\n        'Immerse yourself in our cutting-edge interactive gallery...',\r\n      tags: ['Sunrise', 'Mountains', 'Golden', 'Scenic', 'Inspiring'],\r\n    },\r\n    {\r\n      id: 2,\r\n      url: 'https://images.unsplash.com/photo-1756806983725-977bb2308d4e?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n      title: 'Globe Section',\r\n      description:\r\n        'Embark on a virtual journey around the world with our state-of-the-art 3D globe feature...',\r\n      tags: ['Misty', 'Path', 'Mysterious', 'Serene', 'Rugged'],\r\n    },\r\n    {\r\n      id: 3,\r\n      url: 'https://images.unsplash.com/photo-1756806983832-1f056cf24182?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',\r\n      title: 'Image Mouse Trail',\r\n      description:\r\n        'Transform your browsing experience with our mesmerizing Image Mouse Trail feature...',\r\n      tags: ['Pathway', 'Adventure', 'Peaks', 'Challenging', 'Breathtaking'],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      document.body.classList.add('overflow-hidden');\r\n    } else {\r\n      document.body.classList.remove('overflow-hidden');\r\n    }\r\n\r\n    const handleKeyDown = (event: KeyboardEvent): void => {\r\n      if (event.key === 'Escape' && isOpen) {\r\n        handleCloseDialog();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n      document.body.classList.remove('overflow-hidden');\r\n    };\r\n  }, [isOpen]);\r\n\r\n  useEffect(() => {\r\n    if (carousel.current) {\r\n      const scrollWidth = carousel.current.scrollWidth;\r\n      const offsetWidth = carousel.current.offsetWidth;\r\n      setCarouselWidth(scrollWidth - offsetWidth);\r\n    }\r\n  }, [items]);\r\n\r\n  const handleCardClick = (itemIndex: number): void => {\r\n    setIndex(itemIndex);\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const handleCloseDialog = (): void => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>): void => {\r\n    if (e.target === e.currentTarget) {\r\n      handleCloseDialog();\r\n    }\r\n  };\r\n\r\n  const currentItem = items[index];\r\n\r\n  return (\r\n    <div className=\"relative h-full p-4\">\r\n      <MotionConfig transition={transition}>\r\n        <motion.div\r\n          ref={carousel}\r\n          drag=\"x\"\r\n          dragElastic={0.2}\r\n          dragConstraints={{ right: 0, left: -carouselWidth }}\r\n          dragTransition={{ bounceDamping: 30 }}\r\n          className=\"flex w-full gap-4 py-10\"\r\n        >\r\n          {items.map((item, i) => (\r\n            <motion.div\r\n              key={item.id}\r\n              className=\"shrink-0 flex relative flex-col overflow-hidden border dark:bg-black bg-neutral-100 hover:bg-neutral-200 dark:hover:bg-neutral-950 cursor-pointer transition-colors\"\r\n              layoutId={`dialog-${item.id}`}\r\n              style={{ width: '250px', borderRadius: '12px' }}\r\n              tabIndex={i}\r\n              onClick={() => handleCardClick(i)}\r\n              onKeyDown={(e: React.KeyboardEvent) => {\r\n                if (e.key === 'Enter' || e.key === ' ') {\r\n                  e.preventDefault();\r\n                  handleCardClick(i);\r\n                }\r\n              }}\r\n              role=\"button\"\r\n              aria-label={`Open ${item.title} details`}\r\n            >\r\n              <motion.div layoutId={`dialog-img-${item.id}`}>\r\n                <img\r\n                  src={item.url}\r\n                  alt={item.title}\r\n                  className=\"w-full h-48 object-cover\"\r\n                  loading=\"lazy\"\r\n                />\r\n              </motion.div>\r\n              <div className=\"flex grow flex-row items-end justify-between p-4\">\r\n                <div className=\"flex-1\">\r\n                  <motion.h3\r\n                    layoutId={`dialog-title-${item.id}`}\r\n                    className=\"dark:text-white text-black font-semibold text-sm truncate\"\r\n                  >\r\n                    {item.title}\r\n                  </motion.h3>\r\n                </div>\r\n                <button\r\n                  className=\"absolute bottom-2 right-2 p-2 dark:bg-neutral-800 bg-neutral-300 hover:bg-neutral-400 dark:hover:bg-neutral-700 rounded-xl transition-colors\"\r\n                  aria-label={`Open ${item.title}`}\r\n                  tabIndex={-1}\r\n                >\r\n                  <Plus className=\"w-4 h-4\" />\r\n                </button>\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </motion.div>\r\n\r\n        {isOpen && currentItem && createPortal(\r\n          <AnimatePresence initial={false} mode=\"sync\">\r\n            <motion.div\r\n              key={`backdrop-${currentItem.id}`}\r\n              className=\"fixed inset-0 h-full w-full dark:bg-black/50 bg-black/25 backdrop-blur-xs z-40\"\r\n              variants={{ open: { opacity: 1 }, closed: { opacity: 0 } }}\r\n              initial=\"closed\"\r\n              animate=\"open\"\r\n              exit=\"closed\"\r\n              onClick={handleBackdropClick}\r\n            />\r\n            <motion.div\r\n              key=\"dialog\"\r\n              className=\"pointer-events-none fixed inset-0 flex items-center justify-center z-50 p-4\"\r\n            >\r\n              <motion.div\r\n                className=\"pointer-events-auto relative flex h-auto w-full max-w-[500px] flex-col overflow-hidden dark:bg-neutral-900 bg-white border shadow-2xl max-h-[90vh] overflow-y-auto\"\r\n                layoutId={`dialog-${currentItem.id}`}\r\n                tabIndex={-1}\r\n                style={{ borderRadius: '24px' }}\r\n                role=\"dialog\"\r\n                aria-labelledby={`dialog-title-${currentItem.id}`}\r\n                aria-describedby={`dialog-description-${currentItem.id}`}\r\n              >\r\n                <motion.div layoutId={`dialog-img-${currentItem.id}`}>\r\n                  <img\r\n                    src={currentItem.url}\r\n                    alt={currentItem.title}\r\n                    className=\"h-64 w-full object-cover\"\r\n                  />\r\n                </motion.div>\r\n                <div className=\"p-6\">\r\n                  <motion.h2\r\n                    layoutId={`dialog-title-${currentItem.id}`}\r\n                    className=\"text-2xl font-bold text-zinc-950 dark:text-zinc-50 mb-4\"\r\n                    id={`dialog-title-${currentItem.id}`}\r\n                  >\r\n                    {currentItem.title}\r\n                  </motion.h2>\r\n                  <motion.div\r\n                    initial={{ opacity: 0, y: 20 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    exit={{ opacity: 0, y: 20 }}\r\n                    transition={{ delay: 0.1 }}\r\n                    className=\"text-zinc-700 dark:text-zinc-300 leading-relaxed\"\r\n                    id={`dialog-description-${currentItem.id}`}\r\n                  >\r\n                    {currentItem.description}\r\n                  </motion.div>\r\n                  {currentItem.tags.length > 0 && (\r\n                    <div className=\"flex flex-wrap gap-2 mt-4\">\r\n                      {currentItem.tags.map((tag, tagIndex) => (\r\n                        <span\r\n                          key={`${tag}-${tagIndex}`}\r\n                          className=\"px-2 py-1 text-xs bg-neutral-200 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 rounded-full\"\r\n                        >\r\n                          {tag}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <button\r\n                  onClick={handleCloseDialog}\r\n                  className=\"absolute right-4 top-4 p-2 bg-black dark:bg-white rounded-lg text-primary-foreground border cursor-pointer transition-colors\"\r\n                  type=\"button\"\r\n                  aria-label={`Close ${currentItem.title} dialog`}\r\n                >\r\n                  <X size={20} />\r\n                </button>\r\n              </motion.div>\r\n            </motion.div>\r\n          </AnimatePresence>,\r\n          document.body\r\n        )}\r\n      </MotionConfig>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LinearCardDialog;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/ui/linear-modal.tsx",
      "content": "'use client';\r\n\r\nimport React, {\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useId,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport {\r\n  motion,\r\n  AnimatePresence,\r\n  MotionConfig,\r\n  Transition,\r\n  Variant,\r\n} from 'motion/react';\r\nimport { createPortal } from 'react-dom';\r\nimport { cn } from '@/lib/utils';\r\nimport { XIcon } from 'lucide-react';\r\n\r\ninterface DialogContextType {\r\n  isOpen: boolean;\r\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n  uniqueId: string;\r\n  triggerRef: React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nconst DialogContext = React.createContext<DialogContextType | null>(null);\r\n\r\nfunction useDialog() {\r\n  const context = useContext(DialogContext);\r\n  if (!context) {\r\n    throw new Error('useDialog must be used within a DialogProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\ntype DialogProviderProps = {\r\n  children: React.ReactNode;\r\n  transition?: Transition;\r\n};\r\n\r\nfunction DialogProvider({ children, transition }: DialogProviderProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const uniqueId = useId();\r\n  const triggerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const contextValue = useMemo(\r\n    () => ({ isOpen, setIsOpen, uniqueId, triggerRef }),\r\n    [isOpen, uniqueId]\r\n  );\r\n\r\n  return (\r\n    <DialogContext.Provider\r\n      //@ts-ignore\r\n      value={contextValue}\r\n    >\r\n      <MotionConfig transition={transition}>{children}</MotionConfig>\r\n    </DialogContext.Provider>\r\n  );\r\n}\r\n\r\ntype DialogProps = {\r\n  children: React.ReactNode;\r\n  transition?: Transition;\r\n};\r\n\r\nfunction Dialog({ children, transition }: DialogProps) {\r\n  return (\r\n    <DialogProvider>\r\n      <MotionConfig transition={transition}>{children}</MotionConfig>\r\n    </DialogProvider>\r\n  );\r\n}\r\n\r\ntype DialogTriggerProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n  triggerRef?: React.RefObject<HTMLDivElement>;\r\n};\r\n\r\nfunction DialogTrigger({\r\n  children,\r\n  className,\r\n  style,\r\n  triggerRef,\r\n}: DialogTriggerProps) {\r\n  const { setIsOpen, isOpen, uniqueId } = useDialog();\r\n\r\n  const handleClick = useCallback(() => {\r\n    setIsOpen(!isOpen);\r\n  }, [isOpen, setIsOpen]);\r\n\r\n  const handleKeyDown = useCallback(\r\n    (event: React.KeyboardEvent) => {\r\n      if (event.key === 'Enter' || event.key === ' ') {\r\n        event.preventDefault();\r\n        setIsOpen(!isOpen);\r\n      }\r\n    },\r\n    [isOpen, setIsOpen]\r\n  );\r\n\r\n  return (\r\n    <motion.div\r\n      ref={triggerRef}\r\n      layoutId={`dialog-${uniqueId}`}\r\n      className={cn('relative cursor-pointer', className)}\r\n      onClick={handleClick}\r\n      onKeyDown={handleKeyDown}\r\n      style={style}\r\n      role='button'\r\n      aria-haspopup='dialog'\r\n      aria-expanded={isOpen}\r\n      aria-controls={`dialog-content-${uniqueId}`}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\ntype DialogContent = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogContent({ children, className, style }: DialogContent) {\r\n  const { setIsOpen, isOpen, uniqueId, triggerRef } = useDialog();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [firstFocusableElement, setFirstFocusableElement] =\r\n    useState<HTMLElement | null>(null);\r\n  const [lastFocusableElement, setLastFocusableElement] =\r\n    useState<HTMLElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        setIsOpen(false);\r\n      }\r\n      if (event.key === 'Tab') {\r\n        if (!firstFocusableElement || !lastFocusableElement) return;\r\n\r\n        if (event.shiftKey) {\r\n          if (document.activeElement === firstFocusableElement) {\r\n            event.preventDefault();\r\n            lastFocusableElement.focus();\r\n          }\r\n        } else {\r\n          if (document.activeElement === lastFocusableElement) {\r\n            event.preventDefault();\r\n            firstFocusableElement.focus();\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [setIsOpen, firstFocusableElement, lastFocusableElement]);\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      document.body.style.overflow = 'hidden';\r\n\r\n      const focusableElements = containerRef.current?.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      if (focusableElements && focusableElements.length > 0) {\r\n        setFirstFocusableElement(focusableElements[0] as HTMLElement);\r\n        setLastFocusableElement(\r\n          focusableElements[focusableElements.length - 1] as HTMLElement\r\n        );\r\n        // Delay focus slightly to allow animation to start\r\n        requestAnimationFrame(() => {\r\n          (focusableElements[0] as HTMLElement).focus();\r\n        });\r\n      }\r\n\r\n      if (containerRef.current) {\r\n        containerRef.current.scrollTop = 0;\r\n      }\r\n    } else {\r\n      document.body.style.overflow = '';\r\n      triggerRef.current?.focus();\r\n    }\r\n  }, [isOpen, triggerRef]);\r\n\r\n  return (\r\n    <>\r\n      <motion.div\r\n        ref={containerRef}\r\n        layoutId={`dialog-${uniqueId}`}\r\n        className={cn('overflow-hidden', className)}\r\n        style={{\r\n          ...style,\r\n          willChange: 'transform, opacity', // GPU acceleration\r\n        }}\r\n        role='dialog'\r\n        aria-modal='true'\r\n        aria-labelledby={`dialog-title-${uniqueId}`}\r\n        aria-describedby={`dialog-description-${uniqueId}`}\r\n        initial={{ scale: 0.95, opacity: 0 }}\r\n        animate={{ scale: 1, opacity: 1 }}\r\n        exit={{ scale: 0.95, opacity: 0 }}\r\n        transition={{\r\n          type: 'spring',\r\n          damping: 25,\r\n          stiffness: 300,\r\n          mass: 0.8,\r\n        }}\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </>\r\n  );\r\n}\r\ntype DialogContainerProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  overlayClassName?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogContainer({\r\n  children,\r\n  className,\r\n  overlayClassName,\r\n}: DialogContainerProps) {\r\n  const { isOpen, setIsOpen, uniqueId } = useDialog();\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const drawerWrapper = document.querySelectorAll('[drawer-wrapper]');\r\n\r\n    if (isOpen) {\r\n      document.body.classList.add('overflow-hidden');\r\n      drawerWrapper.forEach((wrapper) => wrapper?.classList.add('open'));\r\n    } else {\r\n      document.body.classList.remove('overflow-hidden');\r\n      drawerWrapper.forEach((wrapper) => wrapper?.classList.remove('open'));\r\n    }\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [isOpen]);\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n    return () => {\r\n      setMounted(false);\r\n    };\r\n  }, []);\r\n\r\n  if (!mounted) return null;\r\n\r\n  return createPortal(\r\n    <AnimatePresence initial={false} mode='wait'>\r\n      {isOpen && (\r\n        <>\r\n          <motion.div\r\n            key={`backdrop-${uniqueId}`}\r\n            data-lenis-prevent\r\n            className={cn(\r\n              'fixed inset-0 h-full z-50 w-full backdrop-blur-xl dark:bg-[radial-gradient(125%_125%_at_50%_10%,#050505_40%,#243aff_100%)] bg-[radial-gradient(125%_125%_at_50%_10%,#ffffff_40%,#243aff_100%)]',\r\n              overlayClassName\r\n            )}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            transition={{\r\n              duration: 0.2,\r\n              ease: [0.4, 0.0, 0.4, 1],\r\n            }}\r\n            onClick={() => setIsOpen(false)}\r\n          ></motion.div>\r\n          <motion.div\r\n            className={cn(`fixed inset-0 z-50 w-fit mx-auto`, className)}\r\n            style={{ willChange: 'transform' }} // GPU acceleration for transforms\r\n          >\r\n            {children}\r\n          </motion.div>\r\n        </>\r\n      )}\r\n    </AnimatePresence>,\r\n    document.body\r\n  );\r\n}\r\ntype DialogTitleProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogTitle({ children, className, style }: DialogTitleProps) {\r\n  const { uniqueId } = useDialog();\r\n\r\n  return (\r\n    <motion.h1\r\n      layoutId={`dialog-title-container-${uniqueId}`}\r\n      className={className}\r\n      style={style}\r\n      layout\r\n    >\r\n      {children}\r\n    </motion.h1>\r\n  );\r\n}\r\n\r\ntype DialogSubtitleProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogSubtitle({ children, className, style }: DialogSubtitleProps) {\r\n  const { uniqueId } = useDialog();\r\n\r\n  return (\r\n    <motion.div\r\n      layoutId={`dialog-subtitle-container-${uniqueId}`}\r\n      className={className}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\ntype DialogDescriptionProps = {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  disableLayoutAnimation?: boolean;\r\n  variants?: {\r\n    initial: Variant;\r\n    animate: Variant;\r\n    exit: Variant;\r\n  };\r\n};\r\n\r\nfunction DialogDescription({\r\n  children,\r\n  className,\r\n  variants,\r\n  disableLayoutAnimation,\r\n}: DialogDescriptionProps) {\r\n  const { uniqueId } = useDialog();\r\n\r\n  return (\r\n    <motion.div\r\n      key={`dialog-description-${uniqueId}`}\r\n      layoutId={\r\n        disableLayoutAnimation\r\n          ? undefined\r\n          : `dialog-description-content-${uniqueId}`\r\n      }\r\n      variants={variants}\r\n      className={className}\r\n      initial='initial'\r\n      animate='animate'\r\n      exit='exit'\r\n      id={`dialog-description-${uniqueId}`}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\ntype DialogImageProps = {\r\n  src: string;\r\n  alt: string;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nfunction DialogImage({ src, alt, className, style }: DialogImageProps) {\r\n  const { uniqueId } = useDialog();\r\n\r\n  return (\r\n    <motion.img\r\n      src={src}\r\n      alt={alt}\r\n      className={cn(className)}\r\n      layoutId={`dialog-img-${uniqueId}`}\r\n      style={style}\r\n    />\r\n  );\r\n}\r\n\r\ntype DialogCloseProps = {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  variants?: {\r\n    initial: Variant;\r\n    animate: Variant;\r\n    exit: Variant;\r\n  };\r\n};\r\n\r\nfunction DialogClose({ children, className, variants }: DialogCloseProps) {\r\n  const { setIsOpen, uniqueId } = useDialog();\r\n\r\n  const handleClose = useCallback(() => {\r\n    setIsOpen(false);\r\n  }, [setIsOpen]);\r\n\r\n  return (\r\n    <motion.button\r\n      onClick={handleClose}\r\n      type='button'\r\n      aria-label='Close dialog'\r\n      key={`dialog-close-${uniqueId}`}\r\n      className={cn('absolute right-6 top-6 text-white', className)}\r\n      initial='initial'\r\n      animate='animate'\r\n      exit='exit'\r\n      variants={variants}\r\n    >\r\n      {children || <XIcon size={24} />}\r\n    </motion.button>\r\n  );\r\n}\r\n\r\nexport {\r\n  Dialog,\r\n  DialogTrigger,\r\n  DialogContainer,\r\n  DialogContent,\r\n  DialogClose,\r\n  DialogTitle,\r\n  DialogSubtitle,\r\n  DialogDescription,\r\n  DialogImage,\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}