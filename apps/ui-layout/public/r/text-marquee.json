{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-marquee",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "@motionone/utils"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/scroll-text-marque.tsx",
      "content": "'use client';\nimport { useRef, useEffect } from 'react';\nimport {\n  motion,\n  useScroll,\n  useSpring,\n  useTransform,\n  useVelocity,\n  useAnimationFrame,\n  useMotionValue,\n} from 'motion/react';\nimport { wrap } from '@motionone/utils';\nimport { cn } from '@/lib/utils';\n\ninterface ParallaxProps {\n  children: string;\n  baseVelocity: number;\n  clasname?: string;\n  scrollDependent?: boolean; // Toggle scroll-dependent behavior\n  delay?: number; // Delay before animation starts\n}\n\nexport default function ScrollBaseAnimation({\n  children,\n  baseVelocity = -5,\n  clasname,\n  scrollDependent = false, // Default to false\n  delay = 0, // Default delay is 0 (no delay)\n}: ParallaxProps) {\n  const baseX = useMotionValue(0);\n  const { scrollY } = useScroll();\n  const scrollVelocity = useVelocity(scrollY);\n  const smoothVelocity = useSpring(scrollVelocity, {\n    damping: 50,\n    stiffness: 400,\n  });\n  const velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 2], {\n    clamp: false,\n  });\n\n  const x = useTransform(baseX, (v) => `${wrap(-20, -45, v)}%`);\n\n  const directionFactor = useRef<number>(1);\n  const hasStarted = useRef(false); // Track animation start status\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      hasStarted.current = true; // Start animation after the delay\n    }, delay);\n\n    return () => clearTimeout(timer); // Cleanup on unmount\n  }, [delay]);\n\n  useAnimationFrame((t, delta) => {\n    if (!hasStarted.current) return; // Skip if delay hasn't passed\n\n    let moveBy = directionFactor.current * baseVelocity * (delta / 1000);\n\n    // Reverse direction if scrollDependent is true\n    if (scrollDependent) {\n      if (velocityFactor.get() < 0) {\n        directionFactor.current = -1;\n      } else if (velocityFactor.get() > 0) {\n        directionFactor.current = 1;\n      }\n    }\n\n    moveBy += directionFactor.current * moveBy * velocityFactor.get();\n\n    baseX.set(baseX.get() + moveBy);\n  });\n\n  return (\n    <div className='overflow-hidden whitespace-nowrap flex flex-nowrap'>\n      <motion.div\n        className='flex whitespace-nowrap gap-10 flex-nowrap'\n        style={{ x }}\n      >\n        <span className={cn(`block sm:text-[8vw] text-[11vw]`, clasname)}>\n          {children}\n        </span>\n        <span className={cn(`block sm:text-[8vw] text-[11vw]`, clasname)}>\n          {children}\n        </span>\n        <span className={cn(`block sm:text-[8vw] text-[11vw]`, clasname)}>\n          {children}\n        </span>\n        <span className={cn(`block sm:text-[8vw] text-[11vw]`, clasname)}>\n          {children}\n        </span>\n      </motion.div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}