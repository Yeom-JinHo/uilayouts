{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "spotlight",
  "type": "registry:component",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/main-spotlight.tsx",
      "content": "// @ts-nocheck\r\n'use client'\r\nimport { cn } from '@/lib/utils'\r\nimport React, {\r\n  useRef,\r\n  useState,\r\n  MouseEvent,\r\n  useContext,\r\n  createContext,\r\n} from 'react'\r\ninterface MousePosition {\r\n  x: number\r\n  y: number\r\n}\r\n\r\ninterface SpotlightProps {\r\n  children: React.ReactNode\r\n  className?: string\r\n  ProximitySpotlight?: boolean\r\n  HoverFocusSpotlight?: boolean\r\n  CursorFlowGradient?: boolean\r\n}\r\ninterface SpotlightItemProps {\r\n  children: React.ReactNode\r\n  className?: string\r\n}\r\n\r\ninterface SpotLightContextType {\r\n  ProximitySpotlight: boolean\r\n  HoverFocusSpotlight: boolean\r\n  CursorFlowGradient: boolean\r\n}\r\n\r\nconst SpotLightContext = createContext<SpotLightContextType | undefined>(\r\n  undefined\r\n)\r\nexport const useSpotlight = () => {\r\n  const context = useContext(SpotLightContext)\r\n  if (!context) {\r\n    throw new Error('useSpotlight must be used within a SpotlightProvider')\r\n  }\r\n  return context\r\n}\r\nexport const Spotlight = ({\r\n  children,\r\n  className,\r\n  ProximitySpotlight = true,\r\n  HoverFocusSpotlight = false,\r\n  CursorFlowGradient = true,\r\n}: SpotlightProps) => {\r\n  return (\r\n    <SpotLightContext.Provider\r\n      value={{\r\n        ProximitySpotlight,\r\n        HoverFocusSpotlight,\r\n        CursorFlowGradient,\r\n      }}\r\n    >\r\n      <div className={cn('group relative z-10 rounded-md    ', className)}>\r\n        {children}\r\n      </div>\r\n    </SpotLightContext.Provider>\r\n  )\r\n}\r\nexport function SpotLightItem({ children, className }: SpotlightItemProps) {\r\n  const { HoverFocusSpotlight, ProximitySpotlight, CursorFlowGradient } =\r\n    useSpotlight()\r\n  const boxWrapper = useRef(null)\r\n  const [isHovered, setIsHovered] = useState(false)\r\n  const [mousePosition, setMousePosition] = React.useState({\r\n    x: null,\r\n    y: null,\r\n  })\r\n  React.useEffect(() => {\r\n    const updateMousePosition = (ev: { clientX: any; clientY: any }) => {\r\n      setMousePosition({ x: ev.clientX, y: ev.clientY })\r\n    }\r\n    window.addEventListener('mousemove', updateMousePosition)\r\n    return () => {\r\n      window.removeEventListener('mousemove', updateMousePosition)\r\n    }\r\n  }, [])\r\n\r\n  const [overlayColor, setOverlayColor] = useState({ x: 0, y: 0 })\r\n  const handleMouemove = ({ currentTarget, clientX, clientY }): MouseEvent => {\r\n    let { left, top } = currentTarget.getBoundingClientRect()\r\n\r\n    const x = clientX - left\r\n    const y = clientY - top\r\n\r\n    setOverlayColor({ x, y })\r\n  }\r\n  // console.log(overlayColor)\r\n\r\n  return (\r\n    <div\r\n      onMouseMove={handleMouemove}\r\n      onMouseEnter={() => CursorFlowGradient && setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n      ref={boxWrapper}\r\n      className={cn(\r\n        className,\r\n        ' relative  rounded-lg p-[2px] bg-[#ffffff15] overflow-hidden'\r\n      )}\r\n    >\r\n      {isHovered && (\r\n        <div\r\n          className=\"pointer-events-none absolute opacity-0 z-50 rounded-xl w-full h-full group-hover:opacity-100  transition duration-300 \"\r\n          style={{\r\n            background: `\r\n            radial-gradient(\r\n              250px circle at ${overlayColor.x}px ${overlayColor.y}px,\r\n              rgba(255, 255, 255, 0.137),\r\n              transparent 80%\r\n            )\r\n          `,\r\n          }}\r\n        />\r\n      )}\r\n      {HoverFocusSpotlight && (\r\n        <div\r\n          className=\"absolute opacity-0 group-hover:opacity-100 z-10 inset-0 bg-fixed rounded-lg\"\r\n          style={{\r\n            background: `radial-gradient(circle at ${mousePosition.x}px ${mousePosition.y}px, #ffffff76 0%,transparent 20%,transparent) fixed `,\r\n          }}\r\n        ></div>\r\n      )}\r\n      {ProximitySpotlight && (\r\n        <div\r\n          className=\"absolute inset-0 z-0  bg-fixed rounded-lg\"\r\n          style={{\r\n            background: `radial-gradient(circle at ${mousePosition.x}px ${mousePosition.y}px, #ffffff6e 0%,transparent 20%,transparent) fixed`,\r\n          }}\r\n        ></div>\r\n      )}\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\ntype SpotlightCardProps = {\r\n  children: React.ReactNode\r\n  className?: string\r\n}\r\n\r\nexport function SpotlightCard({\r\n  children,\r\n  className = '',\r\n}: SpotlightCardProps) {\r\n  return (\r\n    <div\r\n      className={`relative h-full bg-slate-800 rounded-3xl p-px before:absolute before:w-80 before:h-80 before:-left-40 before:-top-40 before:bg-slate-400 before:rounded-full before:opacity-0 before:pointer-events-none before:transition-opacity before:duration-500 before:translate-x-[var(--mouse-x)] before:translate-y-[var(--mouse-y)] before:group-hover:opacity-100 before:z-10 before:blur-[100px] after:absolute after:w-96 after:h-96 after:-left-48 after:-top-48 after:bg-indigo-500 after:rounded-full after:opacity-0 after:pointer-events-none after:transition-opacity after:duration-500 after:translate-x-[var(--mouse-x)] after:translate-y-[var(--mouse-y)] after:hover:opacity-10 after:z-30 after:blur-[100px] overflow-hidden ${className}`}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}",
      "type": "registry:component"
    }
  ]
}