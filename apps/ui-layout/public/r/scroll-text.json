{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scroll-text",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "@motionone/utils"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/scroll-text.tsx",
      "content": "// @ts-nocheck\r\n\r\n'use client';\r\n\r\nimport React, { type JSX } from 'react';\r\nimport { motion, HTMLMotionProps } from 'motion/react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ntype Direction = 'up' | 'down' | 'left' | 'right';\r\n\r\nconst containerVariants = {\r\n  hidden: {},\r\n  visible: {\r\n    transition: {\r\n      staggerChildren: 0.1,\r\n    },\r\n  },\r\n};\r\n\r\nconst generateVariants = (\r\n  direction: Direction\r\n): { hidden: any; visible: any } => {\r\n  const axis = direction === 'left' || direction === 'right' ? 'X' : 'Y';\r\n  const value = direction === 'right' || direction === 'down' ? 100 : -100;\r\n\r\n  return {\r\n    hidden: {\r\n      filter: 'blur(10px)',\r\n      opacity: 0,\r\n      [`translate${axis}`]: value,\r\n    },\r\n    visible: {\r\n      filter: 'blur(0px)',\r\n      opacity: 1,\r\n      [`translate${axis}`]: 0,\r\n      transition: {\r\n        duration: 0.4,\r\n        ease: 'easeOut',\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nconst defaultViewport = { amount: 0.3, margin: '0px 0px 0px 0px' };\r\n\r\nconst TextAnimation = ({\r\n  as = 'h1',\r\n  text,\r\n  classname = '',\r\n  viewport = defaultViewport,\r\n  variants,\r\n  direction = 'down',\r\n  letterAnime = false,\r\n  lineAnime = false,\r\n}: {\r\n  text: string;\r\n  classname?: string;\r\n  as?: keyof JSX.IntrinsicElements;\r\n  viewport?: {\r\n    amount?: number;\r\n    margin?: string;\r\n    once?: boolean;\r\n  };\r\n  variants?: {\r\n    hidden?: any;\r\n    visible?: any;\r\n  };\r\n  direction?: Direction;\r\n  letterAnime?: boolean;\r\n  lineAnime?: boolean;\r\n}) => {\r\n  const baseVariants = variants || generateVariants(direction);\r\n  const modifiedVariants = {\r\n    hidden: baseVariants.hidden,\r\n    visible: {\r\n      ...baseVariants.visible,\r\n    },\r\n  };\r\n\r\n  const MotionComponent = motion[\r\n    as as keyof typeof motion\r\n  ] as React.ComponentType<HTMLMotionProps<any>>;\r\n\r\n  return (\r\n    <MotionComponent\r\n      whileInView='visible'\r\n      initial='hidden'\r\n      variants={containerVariants}\r\n      viewport={viewport}\r\n      className={cn(\r\n        `inline-block dark:text-white text-black uppercase`,\r\n        classname\r\n      )}\r\n    >\r\n      {lineAnime ? (\r\n        <motion.span className={`inline-block`} variants={modifiedVariants}>\r\n          {text}\r\n        </motion.span>\r\n      ) : (\r\n        <>\r\n          {text.split(' ').map((word: string, index: number) => (\r\n            <motion.span\r\n              key={index}\r\n              className={`inline-block`}\r\n              variants={letterAnime === false ? modifiedVariants : {}}\r\n            >\r\n              {letterAnime ? (\r\n                <>\r\n                  {word.split('').map((letter: string, letterIndex: number) => (\r\n                    <motion.span\r\n                      key={letterIndex}\r\n                      className={`inline-block`}\r\n                      variants={modifiedVariants}\r\n                    >\r\n                      {letter}\r\n                    </motion.span>\r\n                  ))}\r\n                  &nbsp;\r\n                </>\r\n              ) : (\r\n                <>{word}&nbsp;</>\r\n              )}\r\n            </motion.span>\r\n          ))}\r\n        </>\r\n      )}\r\n    </MotionComponent>\r\n  );\r\n};\r\n\r\nexport default TextAnimation;\r\n",
      "type": "registry:component"
    }
  ]
}