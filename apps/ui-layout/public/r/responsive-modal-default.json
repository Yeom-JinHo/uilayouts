{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "responsive-modal-default",
  "type": "registry:component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/responsive-modal.tsx",
      "content": "'use client';\r\n\r\nimport React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  ReactNode,\r\n} from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport { AnimatePresence, motion } from 'motion/react';\r\nimport { X } from 'lucide-react';\r\nimport { Drawer as VaulDrawer } from 'vaul';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface DrawerContextProps {\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n}\r\n\r\nconst DrawerContext = createContext<DrawerContextProps | undefined>(undefined);\r\n\r\nexport const useResponsiveModal = () => {\r\n  const context = useContext(DrawerContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      'useResponsiveModal must be used within a ResponsiveModalProvider'\r\n    );\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ResponsiveModalProps {\r\n  children: ReactNode;\r\n  triggerContent?: ReactNode;\r\n  open?: boolean;\r\n  setOpen?: (open: boolean) => void;\r\n  classname?: string;\r\n  clsBtnClassname?: string;\r\n}\r\n\r\nexport function ResponsiveModal({\r\n  children,\r\n  open: controlledOpen,\r\n  setOpen: controlledSetOpen,\r\n  classname,\r\n  clsBtnClassname,\r\n}: ResponsiveModalProps) {\r\n  const [internalOpen, setInternalOpen] = useState(false);\r\n  const [isDesktop, setIsDesktop] = useState(false);\r\n  const [mounted, setMounted] = useState(false);\r\n\r\n  const open = controlledOpen !== undefined ? controlledOpen : internalOpen;\r\n  const setOpen = controlledSetOpen || setInternalOpen;\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n    const mediaQuery = window.matchMedia('(min-width: 768px)');\r\n    const handleMediaChange = (event: MediaQueryListEvent) => {\r\n      setIsDesktop(event.matches);\r\n    };\r\n\r\n    setIsDesktop(mediaQuery.matches);\r\n    mediaQuery.addEventListener('change', handleMediaChange);\r\n    return () => mediaQuery.removeEventListener('change', handleMediaChange);\r\n  }, []);\r\n\r\n  const trigger = React.Children.toArray(children).find(\r\n    (child: any) => child.type === ResponsiveModalTrigger\r\n  );\r\n  const content = React.Children.toArray(children).filter(\r\n    (child: any) => child.type !== ResponsiveModalTrigger\r\n  );\r\n\r\n  const desktopModal =\r\n    isDesktop && mounted\r\n      ? createPortal(\r\n          <AnimatePresence>\r\n            {open && (\r\n              <motion.div\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                exit={{ opacity: 0 }}\r\n                className='fixed inset-0 z-50] flex items-center justify-center bg-black/50 backdrop-blur-xs cursor-zoom-out'\r\n                onClick={() => setOpen(false)}\r\n              >\r\n                <motion.div\r\n                  initial={{ scale: 0.9, opacity: 0 }}\r\n                  animate={{ scale: 1, opacity: 1 }}\r\n                  exit={{ scale: 0.9, opacity: 0 }}\r\n                  transition={{ type: 'spring', duration: 0.5 }}\r\n                  onClick={(e) => e.stopPropagation()}\r\n                  className={cn(\r\n                    'relative w-full max-w-md border bg-white dark:bg-neutral-900 rounded-lg cursor-default',\r\n                    classname\r\n                  )}\r\n                >\r\n                  <button\r\n                    className={cn(\r\n                      'absolute top-2 right-2 bg-primary text-background p-2 border z-1 rounded-md',\r\n                      clsBtnClassname\r\n                    )}\r\n                    onClick={() => setOpen(false)}\r\n                    aria-label='Close'\r\n                  >\r\n                    <X />\r\n                  </button>\r\n                  {content}\r\n                </motion.div>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>,\r\n          document.body\r\n        )\r\n      : null;\r\n\r\n  return (\r\n    <DrawerContext.Provider value={{ open, setOpen }}>\r\n      {trigger}\r\n\r\n      {desktopModal}\r\n\r\n      {!isDesktop && (\r\n        <VaulDrawer.Root\r\n          shouldScaleBackground\r\n          open={open}\r\n          onOpenChange={setOpen}\r\n        >\r\n          <VaulDrawer.Portal>\r\n            <VaulDrawer.Overlay className='fixed inset-0 z-50 bg-white/50 dark:bg-black/50 backdrop-blur-xs' />\r\n            <VaulDrawer.Content className='fixed bottom-0 left-0 z-50 w-full max-h-[96%] bg-white dark:bg-neutral-900'>\r\n              <div className='mx-auto w-16 h-[0.30rem] shrink-0 rounded-full bg-neutral-600 my-4' />\r\n              <div className='w-full mx-auto max-h-[96vh] overflow-auto px-4 pb-2'>\r\n                {content}\r\n              </div>\r\n            </VaulDrawer.Content>\r\n          </VaulDrawer.Portal>\r\n        </VaulDrawer.Root>\r\n      )}\r\n    </DrawerContext.Provider>\r\n  );\r\n}\r\n\r\nexport function ResponsiveModalContent({\r\n  children,\r\n  className,\r\n}: {\r\n  children: ReactNode;\r\n  className?: string;\r\n}) {\r\n  return <div className={cn('', className)}>{children}</div>;\r\n}\r\n\r\nexport function ResponsiveModalTrigger({ children }: { children: ReactNode }) {\r\n  const { setOpen } = useResponsiveModal();\r\n  return <div onClick={() => setOpen(true)}>{children}</div>;\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "./registry/components/modal/responsive-modal.tsx",
      "content": "'use client';\r\nimport {  motion } from 'motion/react';\r\nimport { useState } from 'react';\r\nimport { useMediaQuery } from '@/hooks/use-media-query';\r\nimport {\r\n  ResponsiveModalContent,\r\n  ResponsiveModal,\r\n} from '@/components/ui/responsive-modal';\r\n\r\nexport default function MyDrawer() {\r\n  // const [open, setOpen] = useState(false)\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  const isDesktop = useMediaQuery('(min-width: 768px)');\r\n  return (\r\n    <>\r\n      <div className='flex justify-between'>\r\n        <motion.button\r\n          onClick={() => setDrawerOpen(true)}\r\n          whileTap={{ scale: 0.9 }}\r\n          className='inline-flex h-12 w-fit mx-auto animate-background-shine items-center justify-center rounded-md  border-2 dark:border-[#656fe2] border-[#c0c6fc] dark:bg-[linear-gradient(110deg,#1e2a78,45%,#3749be,55%,#1e2a78)] bg-[linear-gradient(110deg,#3d5af1,45%,#5471ff,55%,#3d5af1)] bg-size-[200%_100%] dark:hover:border-white px-6 font-medium text-white dark:text-white transition-colors focus:outline-hidden focus:ring-2 dark:focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-gray-50'\r\n        >\r\n          Open Dialog\r\n        </motion.button>\r\n      </div>\r\n      <ResponsiveModal open={drawerOpen} setOpen={setDrawerOpen}>\r\n        <ResponsiveModalContent>\r\n          <figure className='flex flex-col space-y-1.5 text-center  h-fit dark:bg-neutral-800 md:p-4 p-6'>\r\n            <h1 className='font-medium  text-2xl'>Update Profile Image</h1>\r\n            <p className='text-sm text-muted-foreground'>\r\n              Upload a new profile image or remove the current one.\r\n            </p>\r\n            <div data-vaul-no-drag className='py-4 space-y-4'>\r\n              <span className='relative flex justify-center overflow-hidden rounded-xl w-full '>\r\n                <span className='grid place-content-center h-40  w-40 rounded-xl bg-muted'>\r\n                  JP\r\n                </span>\r\n              </span>\r\n              <div className='mb-3'>\r\n                <input\r\n                  className='w-full border file:p-2 file:bg-black  file:border-none  file:text-white rounded-xs overflow-hidden'\r\n                  type='file'\r\n                  id='formFile'\r\n                />\r\n              </div>\r\n              <button\r\n                type='submit'\r\n                onClick={() => {\r\n                  setDrawerOpen(false);\r\n                }}\r\n                className='w-full rounded-xs dark:bg-white bg-black  p-2 dark:text-black text-white'\r\n              >\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </figure>\r\n        </ResponsiveModalContent>\r\n      </ResponsiveModal>\r\n    </>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}