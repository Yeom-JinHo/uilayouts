{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-selector-default",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/form/multiple-selector.tsx",
      "content": "'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Cat, Dog, Fish, Rabbit, Turtle } from 'lucide-react';\r\nimport { MultiSelect } from '@/components/ui/multi-selector';\r\n\r\nconst frameworksList = [\r\n  { value: 'react', label: 'React', icon: Turtle, disable: true },\r\n  { value: 'nextjs', label: 'Nextjs', icon: Cat },\r\n  { value: 'vue', label: 'Vue', icon: Dog },\r\n  { value: 'svelte', label: 'Svelte', icon: Rabbit },\r\n  { value: 'ember', label: 'Ember', icon: Fish },\r\n];\r\n\r\nfunction Home() {\r\n  const [selectedFrameworks, setSelectedFrameworks] = useState<string[]>([\r\n    'nextjs',\r\n    'svelte',\r\n  ]);\r\n\r\n  return (\r\n    <div className='py-20 w-96 mx-auto'>\r\n      <MultiSelect\r\n        options={frameworksList}\r\n        onValueChange={setSelectedFrameworks}\r\n        defaultValue={selectedFrameworks}\r\n        placeholder='Select frameworks'\r\n        popoverClass='w-96'\r\n        maxCount={3}\r\n      />\r\n      {/* <div className='mt-4'>\r\n        <h2 className='text-xl font-semibold'>Selected Frameworks:</h2>\r\n        <ul className='list-disc list-inside'>\r\n          {selectedFrameworks.map((framework) => (\r\n            <li key={framework}>{framework}</li>\r\n          ))}\r\n        </ul>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/ui/multi-selector.tsx",
      "content": "'use client';\r\nimport * as React from 'react';\r\nimport { CheckIcon, XCircle, ChevronDown, XIcon } from 'lucide-react';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { Button } from '@/components/website/ui/button';\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from '@/components/website/ui/popover';\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandSeparator,\r\n} from '@/components/website/ui/command';\r\n\r\n/**\r\n * Props for MultiSelect component\r\n */\r\ninterface MultiSelectProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  /**\r\n   * An array of option objects to be displayed in the multi-select component.\r\n   * Each option object has a label, value, and an optional icon.\r\n   */\r\n  options: {\r\n    /** The text to display for the option. */\r\n    label: string;\r\n    /** The unique value associated with the option. */\r\n    value: string;\r\n    /** Optional icon component to display alongside the option. */\r\n    icon?: React.ComponentType<{ className?: string }>;\r\n    disable?: boolean;\r\n  }[];\r\n\r\n  /**\r\n   * Callback function triggered when the selected values change.\r\n   * Receives an array of the new selected values.\r\n   */\r\n  onValueChange: (value: string[]) => void;\r\n\r\n  /** The default selected values when the component mounts. */\r\n  defaultValue?: string[];\r\n\r\n  /**\r\n   * Placeholder text to be displayed when no values are selected.\r\n   * Optional, defaults to \"Select options\".\r\n   */\r\n  placeholder?: string;\r\n\r\n  /**\r\n   * Animation duration in seconds for the visual effects (e.g., bouncing badges).\r\n   * Optional, defaults to 0 (no animation).\r\n   */\r\n  animation?: number;\r\n\r\n  /**\r\n   * Maximum number of items to display. Extra selected items will be summarized.\r\n   * Optional, defaults to 3.\r\n   */\r\n  maxCount?: number;\r\n\r\n  /**\r\n   * The modality of the popover. When set to true, interaction with outside elements\r\n   * will be disabled and only popover content will be visible to screen readers.\r\n   * Optional, defaults to false.\r\n   */\r\n  modalPopover?: boolean;\r\n\r\n  /**\r\n   * If true, renders the multi-select component as a child of another component.\r\n   * Optional, defaults to false.\r\n   */\r\n  asChild?: boolean;\r\n\r\n  /**\r\n   * Additional class names to apply custom styles to the multi-select component.\r\n   * Optional, can be used to add custom styles.\r\n   */\r\n  className?: string;\r\n  popoverClass?: string;\r\n  showall?: boolean;\r\n}\r\n\r\nexport const MultiSelect = React.forwardRef<\r\n  HTMLButtonElement,\r\n  MultiSelectProps\r\n>(\r\n  (\r\n    {\r\n      options,\r\n      onValueChange,\r\n      defaultValue = [],\r\n      placeholder = 'Select options',\r\n      animation = 0,\r\n      maxCount = 3,\r\n      modalPopover = false,\r\n      asChild = false,\r\n      className,\r\n      popoverClass,\r\n      showall = false,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const [selectedValues, setSelectedValues] =\r\n      React.useState<string[]>(defaultValue);\r\n    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\r\n\r\n    const handleInputKeyDown = (\r\n      event: React.KeyboardEvent<HTMLInputElement>\r\n    ) => {\r\n      if (event.key === 'Enter') {\r\n        setIsPopoverOpen(true);\r\n      } else if (event.key === 'Backspace' && !event.currentTarget.value) {\r\n        const newSelectedValues = [...selectedValues];\r\n        newSelectedValues.pop();\r\n        setSelectedValues(newSelectedValues);\r\n        onValueChange(newSelectedValues);\r\n      }\r\n    };\r\n\r\n    const toggleOption = (option: string) => {\r\n      const newSelectedValues = selectedValues.includes(option)\r\n        ? selectedValues.filter((value) => value !== option)\r\n        : [...selectedValues, option];\r\n      setSelectedValues(newSelectedValues);\r\n      onValueChange(newSelectedValues);\r\n    };\r\n\r\n    const handleClear = () => {\r\n      setSelectedValues([]);\r\n      onValueChange([]);\r\n    };\r\n\r\n    const handleTogglePopover = () => {\r\n      setIsPopoverOpen((prev) => !prev);\r\n    };\r\n\r\n    const clearExtraOptions = () => {\r\n      const newSelectedValues = selectedValues.slice(0, maxCount);\r\n      setSelectedValues(newSelectedValues);\r\n      onValueChange(newSelectedValues);\r\n    };\r\n    const filteredOptions = options.filter((option) => !option.disable);\r\n    const toggleAll = () => {\r\n      if (selectedValues.length === filteredOptions.length) {\r\n        handleClear();\r\n      } else {\r\n        const allValues = filteredOptions.map((option) => option.value);\r\n        setSelectedValues(allValues);\r\n        onValueChange(allValues);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Popover\r\n        open={isPopoverOpen}\r\n        onOpenChange={setIsPopoverOpen}\r\n        modal={modalPopover}\r\n      >\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            ref={ref}\r\n            {...props}\r\n            onClick={handleTogglePopover}\r\n            className={cn(\r\n              'flex w-full p-1 rounded-md border min-h-10 h-auto items-center justify-between hover:bg-neutral-100 dark:bg-neutral-900 bg-neutral-50 dark:hover:bg-neutral-950',\r\n              className\r\n            )}\r\n          >\r\n            {selectedValues.length > 0 ? (\r\n              <div className='flex justify-between items-center w-full'>\r\n                <div className='flex flex-wrap items-center  gap-1 p-1'>\r\n                  {(showall\r\n                    ? selectedValues\r\n                    : selectedValues.slice(0, maxCount)\r\n                  ).map((value) => {\r\n                    const option = options.find((o) => o.value === value);\r\n                    const IconComponent = option?.icon;\r\n                    return (\r\n                      <div\r\n                        key={value}\r\n                        className={cn(\r\n                          'inline-flex items-center rounded-lg px-2 py-1 text-xs font-semibold dark:bg-neutral-950 bg-neutral-200 text-primary'\r\n                        )}\r\n                      >\r\n                        {IconComponent && (\r\n                          <IconComponent className='h-4 w-4 mr-2' />\r\n                        )}\r\n                        {option?.label}\r\n                        <XCircle\r\n                          className='ml-2 h-4 w-4 cursor-pointer'\r\n                          onClick={(event) => {\r\n                            event.stopPropagation();\r\n                            toggleOption(value);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  {!showall && selectedValues.length > maxCount && (\r\n                    <div\r\n                      className={cn(\r\n                        'bg-primary-foreground inline-flex items-center border px-2 py-0.5 rounded-lg text-foreground border-foreground/1 hover:bg-transparent'\r\n                      )}\r\n                      style={{ animationDuration: `${animation}s` }}\r\n                    >\r\n                      {`+ ${selectedValues.length - maxCount} more`}\r\n                      <XCircle\r\n                        className='ml-2 h-4 w-4 cursor-pointer'\r\n                        onClick={(event) => {\r\n                          event.stopPropagation();\r\n                          clearExtraOptions();\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className='flex items-center justify-between'>\r\n                  <XIcon\r\n                    className='h-4 mx-2 cursor-pointer text-primary'\r\n                    onClick={(event) => {\r\n                      event.stopPropagation();\r\n                      handleClear();\r\n                    }}\r\n                  />\r\n                  {/* <Separator\r\n                    orientation=\"vertical\"\r\n                    className=\"flex min-h-6 h-full\"\r\n                  /> */}\r\n                  <ChevronDown className='h-4 mx-2 cursor-pointer text-primary' />\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className='flex items-center justify-between w-full mx-auto'>\r\n                <span className='text-sm text-muted-foreground mx-3'>\r\n                  {placeholder}\r\n                </span>\r\n                <ChevronDown className='h-4 cursor-pointer text-muted-foreground mx-2' />\r\n              </div>\r\n            )}\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent\r\n          className={cn('w-auto p-0', popoverClass)}\r\n          align='start'\r\n          onEscapeKeyDown={() => setIsPopoverOpen(false)}\r\n        >\r\n          <Command>\r\n            <CommandInput\r\n              placeholder='Search...'\r\n              onKeyDown={handleInputKeyDown}\r\n            />\r\n            <CommandList>\r\n              <CommandEmpty>No results found.</CommandEmpty>\r\n              <CommandGroup>\r\n                <CommandItem\r\n                  key='all'\r\n                  onSelect={toggleAll}\r\n                  className='cursor-pointer'\r\n                >\r\n                  <div\r\n                    className={cn(\r\n                      'mr-2 flex h-4 w-4 items-center justify-center rounded-xs border border-primary',\r\n                      selectedValues.length === filteredOptions.length\r\n                        ? 'bg-primary text-primary-foreground'\r\n                        : 'opacity-50 [&_svg]:invisible'\r\n                    )}\r\n                  >\r\n                    <CheckIcon className='h-4 w-4' />\r\n                  </div>\r\n                  <span>(Select All)</span>\r\n                </CommandItem>\r\n                {options.map((option) => {\r\n                  const isSelected = selectedValues.includes(option.value);\r\n                  const isDisabled = option.disable; // Check if option is disabled\r\n\r\n                  return (\r\n                    <CommandItem\r\n                      key={option.value}\r\n                      onSelect={() => !isDisabled && toggleOption(option.value)}\r\n                      className={cn(\r\n                        'cursor-pointer',\r\n                        isDisabled && 'opacity-50 cursor-not-allowed' // Disable styling\r\n                      )}\r\n                    >\r\n                      <div\r\n                        className={cn(\r\n                          'mr-2 flex h-4 w-4 items-center justify-center rounded-xs border border-primary',\r\n                          isSelected\r\n                            ? 'bg-primary text-primary-foreground'\r\n                            : 'opacity-50 [&_svg]:invisible'\r\n                        )}\r\n                      >\r\n                        {!isDisabled && <CheckIcon className='h-4 w-4' />}\r\n                      </div>\r\n                      {option.icon && (\r\n                        <option.icon\r\n                          className={cn(\r\n                            'mr-2 h-4 w-4',\r\n                            isDisabled ? 'text-muted-foreground' : ''\r\n                          )}\r\n                        />\r\n                      )}\r\n                      <span>{option.label}</span>\r\n                    </CommandItem>\r\n                  );\r\n                })}\r\n              </CommandGroup>\r\n              <CommandSeparator />\r\n              <CommandGroup>\r\n                <div className='flex items-center justify-between'>\r\n                  {selectedValues.length > 0 && (\r\n                    <>\r\n                      <CommandItem\r\n                        onSelect={handleClear}\r\n                        className='flex-1 justify-center cursor-pointer border-r'\r\n                      >\r\n                        Clear\r\n                      </CommandItem>\r\n                    </>\r\n                  )}\r\n                  <CommandItem\r\n                    onSelect={() => setIsPopoverOpen(false)}\r\n                    className='flex-1 justify-center cursor-pointer max-w-full'\r\n                  >\r\n                    Close\r\n                  </CommandItem>\r\n                </div>\r\n              </CommandGroup>\r\n            </CommandList>\r\n          </Command>\r\n        </PopoverContent>\r\n      </Popover>\r\n    );\r\n  }\r\n);\r\n\r\nMultiSelect.displayName = 'MultiSelect';\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/button.tsx",
      "content": "import * as React from 'react';\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst buttonVariants = cva(\r\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n        destructive:\r\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\r\n        outline:\r\n          'border border-input dark:bg-neutral-800 bg-neutral-50 hover:bg-accent hover:text-accent-foreground',\r\n        secondary:\r\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\r\n        link: 'text-primary underline-offset-4 hover:underline',\r\n        uilayouts:\r\n          'dark:bg-zinc-900 bg-neutral-200 dark:text-white text-black border dark:border-neutral-800',\r\n      },\r\n      size: {\r\n        default: 'h-10 px-4 py-2',\r\n        sm: 'h-9 rounded-md px-3',\r\n        lg: 'h-11 rounded-md px-8',\r\n        icon: 'h-10 w-10',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : 'button';\r\n    return (\r\n      <Comp\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nButton.displayName = 'Button';\r\n\r\nexport { Button, buttonVariants };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/popover.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as PopoverPrimitive from '@radix-ui/react-popover';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\nconst Popover = PopoverPrimitive.Root;\r\n\r\nconst PopoverTrigger = PopoverPrimitive.Trigger;\r\n\r\nconst PopoverContent = React.forwardRef<\r\n  React.ElementRef<typeof PopoverPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\r\n>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (\r\n  <PopoverPrimitive.Portal>\r\n    <PopoverPrimitive.Content\r\n      ref={ref}\r\n      align={align}\r\n      sideOffset={sideOffset}\r\n      className={cn(\r\n        'z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-hidden data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </PopoverPrimitive.Portal>\r\n));\r\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\r\n\r\nexport { Popover, PopoverTrigger, PopoverContent };\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/ui/command.tsx",
      "content": "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { type DialogProps } from '@radix-ui/react-dialog';\r\n\r\nimport { Command as CommandPrimitive } from 'cmdk';\r\n\r\nimport { cn } from '@/lib/utils';\r\nimport { Dialog, DialogContent } from '@/components/website/ui/dialog';\r\nimport { Search } from 'lucide-react';\r\n\r\nconst Command = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive\r\n    ref={ref}\r\n    className={cn(\r\n      'flex h-full w-full flex-col overflow-hidden rounded-md dark:bg-neutral-800 bg-neutral-50 text-popover-foreground',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nCommand.displayName = CommandPrimitive.displayName;\r\n\r\ninterface CommandDialogProps extends DialogProps {}\r\n\r\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\r\n  return (\r\n    <Dialog {...props}>\r\n      <DialogContent className='overflow-hidden p-0'>\r\n        <Command className='[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5'>\r\n          {children}\r\n        </Command>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst CommandInput = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Input>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\r\n>(({ className, ...props }, ref) => (\r\n  <div className='flex items-center border-b px-3' cmdk-input-wrapper=''>\r\n    <Search className='mr-2 h-4 w-4 shrink-0 opacity-50' />\r\n    <CommandPrimitive.Input\r\n      ref={ref}\r\n      className={cn(\r\n        'flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </div>\r\n));\r\n\r\nCommandInput.displayName = CommandPrimitive.Input.displayName;\r\n\r\nconst CommandList = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.List\r\n    ref={ref}\r\n    className={cn('max-h-[300px] overflow-y-auto overflow-x-hidden', className)}\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandList.displayName = CommandPrimitive.List.displayName;\r\n\r\nconst CommandEmpty = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Empty>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\r\n>((props, ref) => (\r\n  <CommandPrimitive.Empty\r\n    ref={ref}\r\n    className='py-6 text-center text-sm'\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\r\n\r\nconst CommandGroup = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Group>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Group\r\n    ref={ref}\r\n    className={cn(\r\n      'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\r\n\r\nconst CommandSeparator = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Separator\r\n    ref={ref}\r\n    className={cn('-mx-1 h-px bg-border', className)}\r\n    {...props}\r\n  />\r\n));\r\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\r\n\r\nconst CommandItem = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      'relative flex cursor-default select-none items-center rounded-xs px-2 py-1.5 text-sm outline-hidden dark:aria-selected:bg-neutral-950 aria-selected:bg-neutral-200 aria-selected:text-accent-foreground data-[disabled=\"true\"]:pointer-events-none data-[disabled=\"true\"]:opacity-50',\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandItem.displayName = CommandPrimitive.Item.displayName;\r\n\r\nconst CommandShortcut = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLSpanElement>) => {\r\n  return (\r\n    <span\r\n      className={cn(\r\n        'ml-auto text-xs tracking-widest text-muted-foreground',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\nCommandShortcut.displayName = 'CommandShortcut';\r\n\r\nexport {\r\n  Command,\r\n  CommandDialog,\r\n  CommandInput,\r\n  CommandList,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandItem,\r\n  CommandShortcut,\r\n  CommandSeparator,\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}