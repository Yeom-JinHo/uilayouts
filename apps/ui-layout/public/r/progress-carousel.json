{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress-carousel",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/progress-carousel.tsx",
      "content": "import React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  ReactNode,\r\n  FC,\r\n} from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport { cn } from '@/lib/utils';\r\n\r\n// Define the type for the context value\r\ninterface ProgressSliderContextType {\r\n  active: string;\r\n  progress: number;\r\n  handleButtonClick: (value: string) => void;\r\n  vertical: boolean;\r\n}\r\n\r\n// Define the type for the component props\r\ninterface ProgressSliderProps {\r\n  children: ReactNode;\r\n  duration?: number;\r\n  fastDuration?: number;\r\n  vertical?: boolean;\r\n  activeSlider: string;\r\n  className?: string;\r\n}\r\n\r\ninterface SliderContentProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\ninterface SliderWrapperProps {\r\n  children: ReactNode;\r\n  value: string;\r\n  className?: string;\r\n}\r\n\r\ninterface ProgressBarProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\ninterface SliderBtnProps {\r\n  children: ReactNode;\r\n  value: string;\r\n  className?: string;\r\n  progressBarClass?: string;\r\n}\r\n\r\n// Create the context with an undefined initial value\r\nconst ProgressSliderContext = createContext<\r\n  ProgressSliderContextType | undefined\r\n>(undefined);\r\n\r\nexport const useProgressSliderContext = (): ProgressSliderContextType => {\r\n  const context = useContext(ProgressSliderContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      'useProgressSliderContext must be used within a ProgressSlider'\r\n    );\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ProgressSlider: FC<ProgressSliderProps> = ({\r\n  children,\r\n  duration = 5000,\r\n  fastDuration = 400,\r\n  vertical = false,\r\n  activeSlider,\r\n  className,\r\n}) => {\r\n  const [active, setActive] = useState<string>(activeSlider);\r\n  const [progress, setProgress] = useState<number>(0);\r\n  const [isFastForward, setIsFastForward] = useState<boolean>(false);\r\n  const frame = useRef<number>(0);\r\n  const firstFrameTime = useRef<number>(performance.now());\r\n  const targetValue = useRef<string | null>(null);\r\n  const [sliderValues, setSliderValues] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const getChildren = React.Children.toArray(children).find(\r\n      (child) => (child as React.ReactElement<any>).type === SliderContent\r\n    ) as React.ReactElement<any> | undefined;\r\n\r\n    if (getChildren) {\r\n      const values = React.Children.toArray(getChildren.props.children).map(\r\n        (child) => (child as React.ReactElement<any>).props.value as string\r\n      );\r\n      setSliderValues(values);\r\n    }\r\n  }, [children]);\r\n\r\n  useEffect(() => {\r\n    if (sliderValues.length > 0) {\r\n      firstFrameTime.current = performance.now();\r\n      frame.current = requestAnimationFrame(animate);\r\n    }\r\n    return () => {\r\n      cancelAnimationFrame(frame.current);\r\n    };\r\n  }, [sliderValues, active, isFastForward]);\r\n\r\n  const animate = (now: number) => {\r\n    const currentDuration = isFastForward ? fastDuration : duration;\r\n    const elapsedTime = now - firstFrameTime.current;\r\n    const timeFraction = elapsedTime / currentDuration;\r\n\r\n    if (timeFraction <= 1) {\r\n      setProgress(\r\n        isFastForward\r\n          ? progress + (100 - progress) * timeFraction\r\n          : timeFraction * 100\r\n      );\r\n      frame.current = requestAnimationFrame(animate);\r\n    } else {\r\n      if (isFastForward) {\r\n        setIsFastForward(false);\r\n        if (targetValue.current !== null) {\r\n          setActive(targetValue.current);\r\n          targetValue.current = null;\r\n        }\r\n      } else {\r\n        // Move to the next slide\r\n        const currentIndex = sliderValues.indexOf(active);\r\n        const nextIndex = (currentIndex + 1) % sliderValues.length;\r\n        setActive(sliderValues[nextIndex]);\r\n      }\r\n      setProgress(0);\r\n      firstFrameTime.current = performance.now();\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = (value: string) => {\r\n    if (value !== active) {\r\n      const elapsedTime = performance.now() - firstFrameTime.current;\r\n      const currentProgress = (elapsedTime / duration) * 100;\r\n      setProgress(currentProgress);\r\n      targetValue.current = value;\r\n      setIsFastForward(true);\r\n      firstFrameTime.current = performance.now();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ProgressSliderContext.Provider\r\n      value={{ active, progress, handleButtonClick, vertical }}\r\n    >\r\n      <div className={cn('relative', className)}>{children}</div>\r\n    </ProgressSliderContext.Provider>\r\n  );\r\n};\r\n\r\nexport const SliderContent: FC<SliderContentProps> = ({\r\n  children,\r\n  className,\r\n}) => {\r\n  return <div className={cn('', className)}>{children}</div>;\r\n};\r\n\r\nexport const SliderWrapper: FC<SliderWrapperProps> = ({\r\n  children,\r\n  value,\r\n  className,\r\n}) => {\r\n  const { active } = useProgressSliderContext();\r\n\r\n  return (\r\n    <AnimatePresence mode='popLayout'>\r\n      {active === value && (\r\n        <motion.div\r\n          key={value}\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          className={cn('', className)}\r\n        >\r\n          {children}\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nexport const SliderBtnGroup: FC<ProgressBarProps> = ({\r\n  children,\r\n  className,\r\n}) => {\r\n  return <div className={cn('', className)}>{children}</div>;\r\n};\r\n\r\nexport const SliderBtn: FC<SliderBtnProps> = ({\r\n  children,\r\n  value,\r\n  className,\r\n  progressBarClass,\r\n}) => {\r\n  const { active, progress, handleButtonClick, vertical } =\r\n    useProgressSliderContext();\r\n\r\n  return (\r\n    <button\r\n      className={cn(\r\n        `relative ${active === value ? 'opacity-100' : 'opacity-50'}`,\r\n        className\r\n      )}\r\n      onClick={() => handleButtonClick(value)}\r\n    >\r\n      {children}\r\n      <div\r\n        className='absolute inset-0 overflow-hidden -z-10 max-h-full max-w-full '\r\n        role='progressbar'\r\n        aria-valuenow={active === value ? progress : 0}\r\n      >\r\n        <span\r\n          className={cn('absolute left-0 ', progressBarClass)}\r\n          style={{\r\n            [vertical ? 'height' : 'width']:\r\n              active === value ? `${progress}%` : '0%',\r\n          }}\r\n        />\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}