{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress-carousel",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/progress-carousel.tsx",
      "content": "import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  ReactNode,\n  FC,\n} from 'react';\nimport { motion, AnimatePresence } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\n// Define the type for the context value\ninterface ProgressSliderContextType {\n  active: string;\n  progress: number;\n  handleButtonClick: (value: string) => void;\n  vertical: boolean;\n}\n\n// Define the type for the component props\ninterface ProgressSliderProps {\n  children: ReactNode;\n  duration?: number;\n  fastDuration?: number;\n  vertical?: boolean;\n  activeSlider: string;\n  className?: string;\n}\n\ninterface SliderContentProps {\n  children: ReactNode;\n  className?: string;\n}\n\ninterface SliderWrapperProps {\n  children: ReactNode;\n  value: string;\n  className?: string;\n}\n\ninterface ProgressBarProps {\n  children: ReactNode;\n  className?: string;\n}\n\ninterface SliderBtnProps {\n  children: ReactNode;\n  value: string;\n  className?: string;\n  progressBarClass?: string;\n}\n\n// Create the context with an undefined initial value\nconst ProgressSliderContext = createContext<\n  ProgressSliderContextType | undefined\n>(undefined);\n\nexport const useProgressSliderContext = (): ProgressSliderContextType => {\n  const context = useContext(ProgressSliderContext);\n  if (!context) {\n    throw new Error(\n      'useProgressSliderContext must be used within a ProgressSlider'\n    );\n  }\n  return context;\n};\n\nexport const ProgressSlider: FC<ProgressSliderProps> = ({\n  children,\n  duration = 5000,\n  fastDuration = 400,\n  vertical = false,\n  activeSlider,\n  className,\n}) => {\n  const [active, setActive] = useState<string>(activeSlider);\n  const [progress, setProgress] = useState<number>(0);\n  const [isFastForward, setIsFastForward] = useState<boolean>(false);\n  const frame = useRef<number>(0);\n  const firstFrameTime = useRef<number>(performance.now());\n  const targetValue = useRef<string | null>(null);\n  const [sliderValues, setSliderValues] = useState<string[]>([]);\n\n  useEffect(() => {\n    const getChildren = React.Children.toArray(children).find(\n      (child) => (child as React.ReactElement<any>).type === SliderContent\n    ) as React.ReactElement<any> | undefined;\n\n    if (getChildren) {\n      const values = React.Children.toArray(getChildren.props.children).map(\n        (child) => (child as React.ReactElement<any>).props.value as string\n      );\n      setSliderValues(values);\n    }\n  }, [children]);\n\n  useEffect(() => {\n    if (sliderValues.length > 0) {\n      firstFrameTime.current = performance.now();\n      frame.current = requestAnimationFrame(animate);\n    }\n    return () => {\n      cancelAnimationFrame(frame.current);\n    };\n  }, [sliderValues, active, isFastForward]);\n\n  const animate = (now: number) => {\n    const currentDuration = isFastForward ? fastDuration : duration;\n    const elapsedTime = now - firstFrameTime.current;\n    const timeFraction = elapsedTime / currentDuration;\n\n    if (timeFraction <= 1) {\n      setProgress(\n        isFastForward\n          ? progress + (100 - progress) * timeFraction\n          : timeFraction * 100\n      );\n      frame.current = requestAnimationFrame(animate);\n    } else {\n      if (isFastForward) {\n        setIsFastForward(false);\n        if (targetValue.current !== null) {\n          setActive(targetValue.current);\n          targetValue.current = null;\n        }\n      } else {\n        // Move to the next slide\n        const currentIndex = sliderValues.indexOf(active);\n        const nextIndex = (currentIndex + 1) % sliderValues.length;\n        setActive(sliderValues[nextIndex]);\n      }\n      setProgress(0);\n      firstFrameTime.current = performance.now();\n    }\n  };\n\n  const handleButtonClick = (value: string) => {\n    if (value !== active) {\n      const elapsedTime = performance.now() - firstFrameTime.current;\n      const currentProgress = (elapsedTime / duration) * 100;\n      setProgress(currentProgress);\n      targetValue.current = value;\n      setIsFastForward(true);\n      firstFrameTime.current = performance.now();\n    }\n  };\n\n  return (\n    <ProgressSliderContext.Provider\n      value={{ active, progress, handleButtonClick, vertical }}\n    >\n      <div className={cn('relative', className)}>{children}</div>\n    </ProgressSliderContext.Provider>\n  );\n};\n\nexport const SliderContent: FC<SliderContentProps> = ({\n  children,\n  className,\n}) => {\n  return <div className={cn('', className)}>{children}</div>;\n};\n\nexport const SliderWrapper: FC<SliderWrapperProps> = ({\n  children,\n  value,\n  className,\n}) => {\n  const { active } = useProgressSliderContext();\n\n  return (\n    <AnimatePresence mode='popLayout'>\n      {active === value && (\n        <motion.div\n          key={value}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className={cn('', className)}\n        >\n          {children}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport const SliderBtnGroup: FC<ProgressBarProps> = ({\n  children,\n  className,\n}) => {\n  return <div className={cn('', className)}>{children}</div>;\n};\n\nexport const SliderBtn: FC<SliderBtnProps> = ({\n  children,\n  value,\n  className,\n  progressBarClass,\n}) => {\n  const { active, progress, handleButtonClick, vertical } =\n    useProgressSliderContext();\n\n  return (\n    <button\n      className={cn(\n        `relative ${active === value ? 'opacity-100' : 'opacity-50'}`,\n        className\n      )}\n      onClick={() => handleButtonClick(value)}\n    >\n      {children}\n      <div\n        className='absolute inset-0 overflow-hidden -z-10 max-h-full max-w-full '\n        role='progressbar'\n        aria-valuenow={active === value ? progress : 0}\n      >\n        <span\n          className={cn('absolute left-0 ', progressBarClass)}\n          style={{\n            [vertical ? 'height' : 'width']:\n              active === value ? `${progress}%` : '0%',\n          }}\n        />\n      </div>\n    </button>\n  );\n};\n",
      "type": "registry:component"
    }
  ]
}