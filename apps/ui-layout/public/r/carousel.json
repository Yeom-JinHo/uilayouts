{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:component",
  "dependencies": [
    "embla-carousel",
    "lucide-react",
    "embla-carousel-class-names",
    "embla-carousel-react",
    "embla-carousel-autoplay",
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/carousel.tsx",
      "content": "// @ts-nocheck\n\n'use client';\nimport React, {\n  ReactNode,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from 'react';\nimport { motion, AnimatePresence } from 'motion/react';\nimport Autoplay from 'embla-carousel-autoplay';\nimport {\n  EmblaCarouselType,\n  EmblaEventType,\n  EmblaOptionsType,\n} from 'embla-carousel';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport ClassNames from 'embla-carousel-class-names';\nimport { cn } from '@/lib/utils';\ntype UseDotButtonType = {\n  selectedIndex: number;\n  scrollSnaps: number[];\n  onDotButtonClick: (index: number) => void;\n};\n\ninterface CarouselProps {\n  children: React.ReactNode;\n  options: EmblaOptionsType;\n  className?: string;\n  activeSlider?: boolean;\n  isAutoPlay?: boolean;\n  isScale?: boolean;\n}\ninterface ThumbnailSlide {\n  src: string;\n  alt: string;\n}\ninterface CarouselContextType {\n  prevBtnDisabled: boolean;\n  nextBtnDisabled: boolean;\n  onPrevButtonClick: () => void;\n  onNextButtonClick: () => void;\n  selectedIndex: any;\n  scrollSnaps: any;\n  onDotButtonClick: any;\n  scrollProgress: any;\n  selectedSnap: any;\n  snapCount: any;\n  isScale: boolean;\n  slidesrArr: ThumbnailSlide[];\n  setSlidesArr: any;\n  emblaThumbsRef: any;\n  onThumbClick: any;\n  carouselId: string;\n}\n\nconst CarouselContext = createContext<CarouselContextType | undefined>(\n  undefined\n);\nconst TWEEN_FACTOR_BASE = 0.52;\n\nconst numberWithinRange = (number: number, min: number, max: number): number =>\n  Math.min(Math.max(number, min), max);\nexport const useCarouselContext = () => {\n  const context = useContext(CarouselContext);\n  if (!context) {\n    throw new Error(\n      'useCarouselContext must be used within a CarouselProvider'\n    );\n  }\n  return context;\n};\n\nconst Carousel: React.FC<CarouselProps> = ({\n  children,\n  options,\n  className,\n  activeSlider,\n  isScale = false,\n  isAutoPlay = false,\n}) => {\n  const carouselId = useId();\n  const [slidesrArr, setSlidesArr] = useState<Element[]>([]);\n  const plugins = [];\n\n  if (activeSlider) {\n    plugins.push(ClassNames());\n  }\n\n  if (isAutoPlay) {\n    plugins.push(\n      Autoplay({\n        playOnInit: true,\n        delay: 3000,\n        stopOnMouseEnter: true,\n        jump: false,\n        stopOnInteraction: false,\n      })\n    );\n  }\n  const [emblaRef, emblaApi] = useEmblaCarousel(options, plugins);\n  const [selectedThumbIndex, setSelectedThumbIndex] = useState(0);\n  const [emblaThumbsRef, emblaThumbsApi] = useEmblaCarousel({\n    containScroll: 'keepSnaps',\n    dragFree: true,\n  });\n\n  const onThumbClick = useCallback(\n    (index: number) => {\n      if (!emblaApi || !emblaThumbsApi) return;\n      emblaApi.scrollTo(index);\n    },\n    [emblaApi, emblaThumbsApi]\n  );\n\n  const onSelect = useCallback(() => {\n    if (!emblaApi || !emblaThumbsApi) return;\n    setSelectedThumbIndex(emblaApi.selectedScrollSnap()); // Use setSelectedThumbIndex here\n    emblaThumbsApi.scrollTo(emblaApi.selectedScrollSnap());\n  }, [emblaApi, emblaThumbsApi, setSelectedThumbIndex]);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n    onSelect();\n    emblaApi.on('select', onSelect);\n    emblaApi.on('reInit', onSelect);\n  }, [emblaApi, onSelect]);\n\n  const { selectedIndex, scrollSnaps, onDotButtonClick } =\n    useDotButton(emblaApi);\n  const [scrollProgress, setScrollProgress] = useState(0);\n  const {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick,\n  } = usePrevNextButtons(emblaApi);\n\n  const onScroll = useCallback((emblaApi: EmblaCarouselType) => {\n    const progress = Math.max(0, Math.min(1, emblaApi.scrollProgress()));\n    setScrollProgress(progress * 100);\n  }, []);\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    onScroll(emblaApi);\n    emblaApi.on('reInit', onScroll);\n    emblaApi.on('scroll', onScroll);\n  }, [emblaApi, onScroll]);\n  const { selectedSnap, snapCount } = useSelectedSnapDisplay(emblaApi);\n\n  // for scale animation\n\n  const tweenFactor = useRef(0);\n  const tweenNodes = useRef<HTMLElement[]>([]);\n  const setTweenNodes = useCallback(\n    (emblaApi: EmblaCarouselType): void => {\n      if (!isScale) return;\n      tweenNodes.current = emblaApi.slideNodes().map((slideNode, index) => {\n        const node = slideNode.querySelector('.slider_content') as HTMLElement;\n        if (!node) {\n          console.warn(`No .slider_content found for slide ${index}`);\n        }\n        return node;\n      });\n    },\n    [isScale]\n  );\n\n  const setTweenFactor = useCallback(\n    (emblaApi: EmblaCarouselType) => {\n      if (!isScale) return;\n      tweenFactor.current =\n        TWEEN_FACTOR_BASE * emblaApi.scrollSnapList().length;\n    },\n    [isScale]\n  );\n\n  const tweenScale = useCallback(\n    (emblaApi: EmblaCarouselType, eventName?: EmblaEventType) => {\n      if (!isScale) return;\n      const engine = emblaApi.internalEngine();\n      const scrollProgress = emblaApi.scrollProgress();\n      const slidesInView = emblaApi.slidesInView();\n      const isScrollEvent = eventName === 'scroll';\n\n      emblaApi.scrollSnapList().forEach((scrollSnap, snapIndex) => {\n        let diffToTarget = scrollSnap - scrollProgress;\n        const slidesInSnap = engine.slideRegistry[snapIndex];\n\n        slidesInSnap.forEach((slideIndex) => {\n          if (isScrollEvent && !slidesInView.includes(slideIndex)) return;\n\n          if (engine.options.loop) {\n            engine.slideLooper.loopPoints.forEach((loopItem) => {\n              const target = loopItem.target();\n\n              if (slideIndex === loopItem.index && target !== 0) {\n                const sign = Math.sign(target);\n\n                if (sign === -1) {\n                  diffToTarget = scrollSnap - (1 + scrollProgress);\n                }\n                if (sign === 1) {\n                  diffToTarget = scrollSnap + (1 - scrollProgress);\n                }\n              }\n            });\n          }\n\n          const tweenValue = 1 - Math.abs(diffToTarget * tweenFactor.current);\n          const scale = numberWithinRange(tweenValue, 0, 1).toString();\n          const tweenNode = tweenNodes.current[slideIndex];\n          // Add null check here\n          if (tweenNode) {\n            tweenNode.style.transform = `scale(${scale})`;\n          }\n        });\n      });\n    },\n    [isScale]\n  );\n\n  useEffect(() => {\n    if (!emblaApi) return;\n    if (isScale) {\n      setTweenNodes(emblaApi);\n      setTweenFactor(emblaApi);\n      tweenScale(emblaApi);\n\n      emblaApi\n        .on('reInit', setTweenNodes)\n        .on('reInit', setTweenFactor)\n        .on('reInit', tweenScale)\n        .on('scroll', tweenScale);\n    }\n  }, [emblaApi, tweenScale, isScale, setTweenNodes, setTweenFactor]);\n  return (\n    <CarouselContext.Provider\n      value={{\n        prevBtnDisabled,\n        nextBtnDisabled,\n        onPrevButtonClick,\n        onNextButtonClick,\n        selectedIndex,\n        scrollSnaps,\n        setSlidesArr,\n        onDotButtonClick,\n        scrollProgress,\n        selectedSnap,\n        snapCount,\n        carouselId,\n        isScale,\n        emblaThumbsRef,\n        onThumbClick,\n        slidesrArr,\n      }}\n    >\n      <div\n        className={cn(className, 'overflow-hidden  rounded-md ')}\n        ref={emblaRef}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n};\n\ninterface SliderProps {\n  children: React.ReactNode;\n  thumnailSrc?: string;\n  className?: string;\n}\n\nexport const SliderContainer = ({\n  className,\n  children,\n}: {\n  className?: string;\n  children: ReactNode;\n}) => {\n  return (\n    <div\n      className={cn('flex', className)}\n      style={{ touchAction: 'pan-y pinch-zoom' }}\n    >\n      {children}\n    </div>\n  );\n};\nexport const Slider: React.FC<SliderProps> = ({\n  children,\n  className,\n  thumnailSrc,\n}) => {\n  const { isScale, setSlidesArr } = useCarouselContext();\n  // console.log(thumnailSrc)\n\n  const addImgToSlider = useCallback(() => {\n    setSlidesArr((prev: any) => {\n      // Prevent adding duplicate images\n      return [...prev, thumnailSrc];\n    });\n  }, [setSlidesArr, thumnailSrc]);\n\n  useEffect(() => {\n    addImgToSlider();\n  }, [addImgToSlider]);\n\n  return (\n    <div className={cn('min-w-0 flex-grow-0 flex-shrink-0', className)}>\n      {isScale ? (\n        <>\n          <div className='slider_content'>{children}</div>\n        </>\n      ) : (\n        <>{children}</>\n      )}\n    </div>\n  );\n};\n\nexport const SliderPrevButton = ({\n  children,\n  className,\n}: {\n  children?: ReactNode;\n  className?: string;\n}) => {\n  const { onPrevButtonClick, prevBtnDisabled }: any = useCarouselContext();\n  return (\n    <button\n      className={cn('', className)}\n      type='button'\n      onClick={onPrevButtonClick}\n      disabled={prevBtnDisabled}\n    >\n      {children}\n    </button>\n  );\n};\nexport const SliderNextButton = ({\n  children,\n  className,\n}: {\n  children?: ReactNode;\n  className?: string;\n}) => {\n  const { onNextButtonClick, nextBtnDisabled }: any = useCarouselContext();\n  return (\n    <>\n      <button\n        className={cn('', className)}\n        type='button'\n        onClick={onNextButtonClick}\n        disabled={nextBtnDisabled}\n      >\n        {children}\n      </button>\n    </>\n  );\n};\nexport const SliderProgress = ({ className }: { className?: string }) => {\n  const { scrollProgress }: any = useCarouselContext();\n  return (\n    <div\n      className={cn(\n        '  bg-gray-500 relative rounded-md h-2 justify-end items-center sm:w-96 w-[80%] max-w-[90%] overflow-hidden',\n        className\n      )}\n    >\n      <div\n        className='dark:bg-white bg-black absolute w-full top-0 -left-[100%] bottom-0'\n        style={{ transform: `translate3d(${scrollProgress}%,0px,0px)` }}\n      />\n    </div>\n  );\n};\n\nexport const SliderSnapDisplay = ({ className }: { className?: string }) => {\n  const { selectedSnap, snapCount } = useCarouselContext();\n  const prevSnapRef = useRef(selectedSnap);\n  const [direction, setDirection] = useState<number>(0);\n\n  useEffect(() => {\n    setDirection(selectedSnap > prevSnapRef.current ? 1 : -1);\n    prevSnapRef.current = selectedSnap;\n  }, [selectedSnap]);\n\n  return (\n    <div\n      className={cn(\n        'mix-blend-difference overflow-hidden flex gap-1 items-center',\n        className\n      )}\n    >\n      <motion.div\n        key={selectedSnap}\n        custom={direction}\n        initial={(d: number) => ({ y: d * 20, opacity: 0 })}\n        animate={{ y: 0, opacity: 1 }}\n        exit={(d: number) => ({ y: d * -20, opacity: 0 })}\n      >\n        {selectedSnap + 1}\n      </motion.div>\n      <span>/ {snapCount}</span>\n    </div>\n  );\n};\nexport const SliderDotButton = ({\n  className,\n  activeclass,\n}: {\n  className?: string;\n  activeclass?: string;\n}) => {\n  const { selectedIndex, scrollSnaps, onDotButtonClick, carouselId }: any =\n    useCarouselContext();\n  return (\n    <div className={cn('flex', className)}>\n      <div className='flex gap-2'>\n        {scrollSnaps.map((_: any, index: React.Key | null | undefined) => (\n          <button\n            type='button'\n            key={index}\n            onClick={() => onDotButtonClick(index)}\n            className={`relative inline-flex  p-0 m-0 w-10 h-2 `}\n          >\n            <div className=' bg-gray-500/40  h-2 rounded-full w-10 '></div>\n            {index === selectedIndex && (\n              <AnimatePresence mode='wait'>\n                <motion.div\n                  transition={{\n                    layout: {\n                      duration: 0.4,\n                      ease: 'easeInOut',\n                      delay: 0.04,\n                    },\n                  }}\n                  layoutId={`hover-${carouselId}`}\n                  className={cn(\n                    'absolute z-[3] w-full h-full left-0 top-0 dark:bg-white bg-black rounded-full',\n                    activeclass\n                  )}\n                />\n              </AnimatePresence>\n            )}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport const useDotButton = (\n  emblaApi: EmblaCarouselType | undefined\n): UseDotButtonType => {\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([]);\n\n  const onDotButtonClick = useCallback(\n    (index: number) => {\n      if (!emblaApi) return;\n      emblaApi.scrollTo(index);\n    },\n    [emblaApi]\n  );\n\n  const onInit = useCallback((emblaApi: EmblaCarouselType) => {\n    setScrollSnaps(emblaApi.scrollSnapList());\n  }, []);\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setSelectedIndex(emblaApi.selectedScrollSnap());\n  }, []);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    onInit(emblaApi);\n    onSelect(emblaApi);\n    emblaApi.on('reInit', onInit);\n    emblaApi.on('reInit', onSelect);\n    emblaApi.on('select', onSelect);\n  }, [emblaApi, onInit, onSelect]);\n\n  return {\n    selectedIndex,\n    scrollSnaps,\n    onDotButtonClick,\n  };\n};\ntype UsePrevNextButtonsType = {\n  prevBtnDisabled: boolean;\n  nextBtnDisabled: boolean;\n  onPrevButtonClick: () => void;\n  onNextButtonClick: () => void;\n};\n\nexport const usePrevNextButtons = (\n  emblaApi: EmblaCarouselType | undefined\n): UsePrevNextButtonsType => {\n  const [prevBtnDisabled, setPrevBtnDisabled] = useState(true);\n  const [nextBtnDisabled, setNextBtnDisabled] = useState(true);\n\n  const onPrevButtonClick = useCallback(() => {\n    if (!emblaApi) return;\n    emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const onNextButtonClick = useCallback(() => {\n    if (!emblaApi) return;\n    emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\n    setPrevBtnDisabled(!emblaApi.canScrollPrev());\n    setNextBtnDisabled(!emblaApi.canScrollNext());\n  }, []);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    onSelect(emblaApi);\n    emblaApi.on('reInit', onSelect);\n    emblaApi.on('select', onSelect);\n  }, [emblaApi, onSelect]);\n\n  return {\n    prevBtnDisabled,\n    nextBtnDisabled,\n    onPrevButtonClick,\n    onNextButtonClick,\n  };\n};\n\ntype UseSelectedSnapDisplayType = {\n  selectedSnap: number;\n  snapCount: number;\n};\n\nexport const useSelectedSnapDisplay = (\n  emblaApi: EmblaCarouselType | undefined\n): UseSelectedSnapDisplayType => {\n  const [selectedSnap, setSelectedSnap] = useState(0);\n  const [snapCount, setSnapCount] = useState(0);\n\n  const updateScrollSnapState = useCallback((emblaApi: EmblaCarouselType) => {\n    setSnapCount(emblaApi.scrollSnapList().length);\n    setSelectedSnap(emblaApi.selectedScrollSnap());\n  }, []);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    updateScrollSnapState(emblaApi);\n    emblaApi.on('select', updateScrollSnapState);\n    emblaApi.on('reInit', updateScrollSnapState);\n  }, [emblaApi, updateScrollSnapState]);\n\n  return {\n    selectedSnap,\n    snapCount,\n  };\n};\n\nexport const ThumsSlider: React.FC = () => {\n  const { emblaThumbsRef, slidesrArr, selectedIndex, onThumbClick } =\n    useCarouselContext();\n  // console.log(slidesrArr);\n\n  return (\n    <div className='overflow-hidden mt-2' ref={emblaThumbsRef}>\n      <div className='flex flex-row gap-2'>\n        {slidesrArr.map((slide, index) => (\n          <div\n            key={`thumb-${index}`}\n            className={`min-w-0 w-full xl:h-24 aspect-auto border-2 rounded-md ${\n              index === selectedIndex\n                ? 'opacity-100'\n                : 'border-transparent opacity-30'\n            }`}\n            style={{ flex: '0 0 15%' }}\n            onClick={() => onThumbClick(index)}\n          >\n            <motion.img\n              src={slide}\n              className='w-full h-full object-cover rounded-sm'\n              width={400}\n              height={400}\n              alt={slide.alt || `Thumbnail ${index + 1}`}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Carousel;\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/constant.tsx",
      "content": "import { Icons } from '@/assets/icons/Icons';\nimport preview from '@/assets/preview/Preview';\nimport {\n  InlineAnnotation,\n  AnnotationHandler,\n  InnerLine,\n  InnerPre,\n  InnerToken,\n} from 'codehike/code';\n\nexport const wordWrap: AnnotationHandler = {\n  name: 'word-wrap',\n  Pre: (props) => <InnerPre merge={props} className='whitespace-pre-wrap' />,\n  Line: (props) => (\n    <InnerLine merge={props}>\n      <div\n        style={{\n          textIndent: `${-props.indentation}ch`,\n          marginLeft: `${props.indentation}ch`,\n        }}\n      >\n        {props.children}\n      </div>\n    </InnerLine>\n  ),\n  Token: (props) => <InnerToken merge={props} style={{ textIndent: 0 }} />,\n};\nexport const callout: AnnotationHandler = {\n  name: 'callout',\n  transform: (annotation: InlineAnnotation) => {\n    const { name, query, lineNumber, fromColumn, toColumn, data } = annotation;\n    return {\n      name,\n      query,\n      fromLineNumber: lineNumber,\n      toLineNumber: lineNumber,\n      data: { ...data, column: (fromColumn + toColumn) / 2 },\n    };\n  },\n  Block: ({ annotation, children }) => {\n    const { column } = annotation.data;\n    return (\n      <>\n        {children}\n        <div\n          style={{ minWidth: `${column + 4}ch` }}\n          className='w-fit border bg-background border-current rounded px-2 relative -ml-[1ch] mt-1 whitespace-break-spaces'\n        >\n          <div\n            style={{ left: `${column}ch` }}\n            className='absolute border-l border-t border-current w-2 h-2 rotate-45 -translate-y-1/2 -top-[1px] bg-background'\n          />\n          {annotation.query}\n        </div>\n      </>\n    );\n  },\n};\n\nexport const mark: AnnotationHandler = {\n  name: 'mark',\n  Line: ({ annotation, ...props }) => {\n    const color = annotation?.query || 'rgb(14 165 233)';\n    return (\n      <div\n        className='...'\n        style={{\n          borderLeft: 'solid 2px transparent',\n          borderLeftColor: annotation && color,\n          backgroundColor: annotation && `rgb(from ${color} r g b / 0.1)`,\n          padding: '3px 4px',\n        }}\n      >\n        <InnerLine merge={props} className='...' />\n      </div>\n    );\n  },\n  Inline: ({ annotation, children }) => {\n    const color = annotation?.query || 'rgb(14 165 233)';\n    return (\n      <span\n        className='...'\n        style={{\n          outline: `solid 1px rgb(from ${color} r g b / 0.5)`,\n          background: `rgb(from ${color} r g b / 0.13)`,\n          padding: '2px 3px',\n        }}\n      >\n        {children}\n      </span>\n    );\n  },\n};\n\nexport const lineNumbers: AnnotationHandler = {\n  name: 'line-numbers',\n  Line: (props) => {\n    const width = props.totalLines.toString().length + 1;\n    return (\n      <div className='flex'>\n        <span\n          className='text-right opacity-50 select-none'\n          style={{ minWidth: `${width}ch` }}\n        >\n          {props.lineNumber}\n        </span>\n        <InnerLine merge={props} className='flex-1 pl-2' />\n      </div>\n    );\n  },\n};\n\nexport function HoverContainer(props: { children: React.ReactNode }) {\n  return <div className='hover-container'>{props.children}</div>;\n}\n\nexport function Link(props: { href?: string; children?: React.ReactNode }) {\n  if (props.href?.startsWith('hover:')) {\n    const hover = props.href.slice('hover:'.length);\n    return (\n      <span\n        className='underline decoration-dotted underline-offset-4'\n        data-hover={hover}\n      >\n        {props.children}\n      </span>\n    );\n  } else {\n    return <a {...props} />;\n  }\n}\nexport const hover: AnnotationHandler = {\n  name: 'hover',\n  onlyIfAnnotated: true,\n  Line: ({ annotation, ...props }) => (\n    <InnerLine\n      merge={props}\n      className='transition-opacity'\n      data-line={annotation?.query || ''}\n    />\n  ),\n};\ninterface ComponentInfo {\n  componentName: string;\n  filesrc?: string;\n  iframeSrc?: string;\n  parentlink: string;\n  parentName: string;\n  isNew?: boolean;\n  iframelink?: string;\n}\n\ninterface Category {\n  name: string;\n  componentArray: ComponentInfo[];\n  type: string;\n}\n\ninterface SidebarItem {\n  name: string;\n  href: string;\n  isNew?: boolean;\n}\n\ninterface SidebarCategory {\n  name: string;\n  items: SidebarItem[];\n}\n\nexport const generateSidebarData = (data: Category[]): SidebarCategory[] => {\n  const sidebarData: SidebarCategory[] = [];\n  const processedCategories = new Set<string>();\n\n  data.forEach((category) => {\n    if (!processedCategories.has(category.name)) {\n      const sidebarCategory: SidebarCategory = {\n        name: category.name,\n        items: category.componentArray.map((component) => ({\n          name: component.parentName,\n          href: `/components/${component.parentlink}`,\n          isNew: component.isNew ? true : false, // You might want to determine this based on some criteria\n        })),\n      };\n\n      // Remove duplicates and sort items\n      sidebarCategory.items = Array.from(\n        new Set(sidebarCategory.items.map((item) => JSON.stringify(item)))\n      )\n        .map((item) => JSON.parse(item))\n        .sort((a, b) => a.name.localeCompare(b.name));\n\n      sidebarData.push(sidebarCategory);\n      processedCategories.add(category.name);\n    }\n  });\n\n  return sidebarData.sort((a, b) => a.name.localeCompare(b.name));\n};\nexport const CardArr = [\n  {\n    img: 'https://images.unsplash.com/photo-1543508282-6319a3e2621f?q=80&w=1200&auto=format&fit=crop',\n    title: 'Nike Air1',\n    color: '#202020',\n  },\n  {\n    img: 'https://images.unsplash.com/photo-1704677982215-a2248af6009b?q=80&w=1200&auto=format&fit=crop',\n    title: 'Nike Air2',\n    color: '#23acfc',\n  },\n  {\n    img: 'https://images.unsplash.com/photo-1520256862855-398228c41684?q=80&w=1200&auto=format&fit=crop',\n    title: 'Adidas',\n    color: '#a3fcff',\n  },\n  {\n    img: 'https://images.unsplash.com/photo-1605733160314-4fc7dac4bb16?q=80&w=1200&auto=format&fit=crop',\n    title: 'Brown Leather ',\n    color: '#A4636C',\n  },\n];\n\nexport const imgPreview = {\n  img1: 'https://images.unsplash.com/photo-1709949908058-a08659bfa922?q=80&w=1200&auto=format',\n  img2: 'https://images.unsplash.com/photo-1548192746-dd526f154ed9?q=80&w=1200&auto=format',\n  img3: 'https://images.unsplash.com/photo-1693581176773-a5f2362209e6?q=80&w=1200&auto=format',\n  img4: 'https://images.unsplash.com/photo-1584043204475-8cc101d6c77a?q=80&w=1200&auto=format',\n  img5: 'https://images.unsplash.com/photo-1709949908058-a08659bfa922?q=80&w=1200&auto=format',\n  img6: 'https://images.unsplash.com/photo-1518599904199-0ca897819ddb?q=80&w=1200&auto=format',\n  img7: 'https://images.unsplash.com/photo-1706049379414-437ec3a54e93?q=80&w=1200&auto=format',\n  img8: 'https://images.unsplash.com/photo-1709949908219-fd9046282019?q=80&w=1200&auto=format',\n  img9: 'https://images.unsplash.com/photo-1508873881324-c92a3fc536ba?q=80&w=1200&auto=format',\n  img10:\n    'https://images.unsplash.com/photo-1462989856370-729a9c1e2c91?q=80&w=1200&auto=format',\n  img11:\n    'https://images.unsplash.com/photo-1475727946784-2890c8fdb9c8?q=80&w=1200&auto=format',\n  img12:\n    'https://images.unsplash.com/photo-1546942113-a6c43b63104a?q=80&w=1200&auto=format',\n  img13:\n    'https://images.unsplash.com/photo-1726551195764-f98a8e8a57c3?q=80&w=1200&auto=format',\n  img14:\n    'https://images.unsplash.com/photo-1726551195795-612ca47c0b7d?q=80&w=1200&auto=format',\n  img15:\n    'https://images.unsplash.com/photo-1532423622396-10a3f979251a?q=80&w=1200&auto=format',\n  img16:\n    'https://images.unsplash.com/photo-1490750967868-88aa4486c946?q=80&w=1200&auto=format',\n  img17:\n    'https://images.unsplash.com/photo-1496861083958-175bb1bd5702?q=80&w=1200&auto=format',\n  img18:\n    'https://images.unsplash.com/photo-1469212044023-0e55b4b9745a?q=80&w=1200&auto=format',\n};\n\nexport const items = [\n  {\n    id: 1,\n    url: imgPreview.img1,\n    title: 'Misty Mountain Majesty',\n    description:\n      'A breathtaking view of misty mountains shrouded in clouds, creating an ethereal landscape.',\n    tags: ['Misty', 'Mountains', 'Clouds', 'Ethereal', 'Landscape'],\n  },\n  {\n    id: 2,\n    url: imgPreview.img2,\n    title: 'Winter Wonderland',\n    description:\n      \"A serene winter scene with snow-covered trees and mountains, showcasing nature's pristine beauty.\",\n    tags: ['Winter', 'Snow', 'Trees', 'Mountains', 'Serene'],\n  },\n  {\n    id: 3,\n    url: imgPreview.img3,\n    title: 'Autumn Mountain Retreat',\n    description:\n      'A cozy cabin nestled in the mountains, surrounded by the vibrant colors of autumn foliage.',\n    tags: ['Autumn', 'Cabin', 'Mountains', 'Foliage', 'Cozy'],\n  },\n  {\n    id: 4,\n    url: imgPreview.img4,\n    title: 'Tranquil Lake Reflection',\n    description:\n      'A calm mountain lake perfectly reflecting the surrounding peaks and sky, creating a mirror-like surface.',\n    tags: ['Lake', 'Reflection', 'Mountains', 'Tranquil', 'Mirror'],\n  },\n  {\n    id: 5,\n    url: imgPreview.img5,\n    title: 'Misty Mountain Peaks',\n    description:\n      \"Majestic mountain peaks emerging from a sea of clouds, showcasing nature's grandeur.\",\n    tags: ['Misty', 'Peaks', 'Clouds', 'Majestic', 'Nature'],\n  },\n  {\n    id: 6,\n    url: imgPreview.img6,\n    title: 'Golden Hour Glow',\n    description:\n      'A stunning mountain landscape bathed in the warm light of the golden hour, highlighting every contour.',\n    tags: ['Golden Hour', 'Mountains', 'Landscape', 'Warm', 'Scenic'],\n  },\n  {\n    id: 7,\n    url: imgPreview.img7,\n    title: 'Snowy Mountain Highway',\n    description:\n      'A winding road cutting through a snowy mountain landscape, inviting adventure and exploration.',\n    tags: ['Snow', 'Road', 'Mountains', 'Winter', 'Adventure'],\n  },\n  {\n    id: 8,\n    url: imgPreview.img8,\n    title: 'Foggy Mountain Forest',\n    description:\n      'A mysterious and enchanting forest shrouded in fog, with mountains looming in the background.',\n    tags: ['Fog', 'Forest', 'Mountains', 'Mysterious', 'Enchanting'],\n  },\n  {\n    id: 9,\n    url: imgPreview.img9,\n    title: 'Sunset Mountain Silhouette',\n    description:\n      'A dramatic silhouette of mountain peaks against a vibrant sunset sky, creating a stunning contrast.',\n    tags: ['Sunset', 'Silhouette', 'Mountains', 'Dramatic', 'Sky'],\n  },\n  {\n    id: 10,\n    url: imgPreview.img10,\n    title: 'Alpine Meadow Bliss',\n    description:\n      'A lush alpine meadow dotted with wildflowers, set against a backdrop of towering mountain peaks.',\n    tags: ['Alpine', 'Meadow', 'Wildflowers', 'Mountains', 'Peaceful'],\n  },\n  {\n    id: 11,\n    url: imgPreview.img11,\n    title: 'Mountain Lake Serenity',\n    description:\n      'A serene mountain lake surrounded by pine forests, reflecting the calm beauty of the wilderness.',\n    tags: ['Lake', 'Mountains', 'Forest', 'Reflection', 'Serenity'],\n  },\n  {\n    id: 12,\n    url: imgPreview.img12,\n    title: 'Icy Mountain Stream',\n    description:\n      \"A crystal-clear mountain stream flowing through a snowy landscape, showcasing winter's pristine beauty.\",\n    tags: ['Stream', 'Snow', 'Winter', 'Mountains', 'Crystal'],\n  },\n  {\n    id: 13,\n    url: imgPreview.img13,\n    title: 'Wildflower Mountain Meadow',\n    description:\n      'A colorful array of wildflowers carpeting a mountain meadow, with majestic peaks in the distance.',\n    tags: ['Wildflowers', 'Meadow', 'Mountains', 'Colorful', 'Nature'],\n  },\n  {\n    id: 14,\n    url: imgPreview.img14,\n    title: 'Mountain Valley Vista',\n    description:\n      'A sweeping view of a vast mountain valley, showcasing the grandeur of the natural landscape.',\n    tags: ['Valley', 'Mountains', 'Vista', 'Landscape', 'Grandeur'],\n  },\n  {\n    id: 15,\n    url: imgPreview.img15,\n    title: 'Rugged Mountain Terrain',\n    description:\n      'A close-up view of rugged mountain terrain, highlighting the raw beauty and texture of the rocks.',\n    tags: ['Rugged', 'Terrain', 'Mountains', 'Texture', 'Close-up'],\n  },\n  {\n    id: 16,\n    url: imgPreview.img16,\n    title: 'Mountain Wildflower Bloom',\n    description:\n      'A vibrant display of mountain wildflowers in full bloom, adding splashes of color to the alpine landscape.',\n    tags: ['Wildflowers', 'Bloom', 'Mountains', 'Vibrant', 'Alpine'],\n  },\n  {\n    id: 17,\n    url: imgPreview.img17,\n    title: 'Mountain River Rapids',\n    description:\n      'A rushing mountain river cutting through rocky terrain, showcasing the power and beauty of nature.',\n    tags: ['River', 'Rapids', 'Mountains', 'Power', 'Nature'],\n  },\n  {\n    id: 18,\n    url: imgPreview.img18,\n    title: 'Lush Mountain Valley',\n    description:\n      'A verdant mountain valley filled with lush vegetation and winding streams, epitomizing natural beauty.',\n    tags: ['Valley', 'Lush', 'Mountains', 'Streams', 'Verdant'],\n  },\n];\n\nexport const apps = [\n  {\n    id: 'carousel',\n    icon: Icons.doc_icon5,\n    name: 'Carousel',\n    imgSrc: preview.carousel,\n  },\n  {\n    id: 'tabs',\n    icon: Icons.doc_icon4,\n    name: 'Tabs',\n    imgSrc: preview.tabs,\n  },\n  {\n    id: 'faqs',\n    icon: Icons.doc_star,\n    name: 'Faqs',\n    imgSrc: preview.faqs,\n  },\n  {\n    id: 'grid',\n    icon: Icons.doc_icon3,\n    name: 'Grid',\n    imgSrc: preview.grid,\n  },\n  {\n    id: 'masking',\n    icon: Icons.doc_circle,\n    name: 'Masking',\n    onClick: () =>\n      window.open(\n        'https://www.ui-layout.com/components/magnified-doc',\n        '_blank',\n        'noopener,noreferrer'\n      ),\n    imgSrc: preview.image_masking,\n  },\n  {\n    id: 'mouseTrail',\n    icon: Icons.doc_rectangle,\n    name: 'MouseTrail',\n    onClick: () =>\n      window.open(\n        'https://naymur-rahman.com/',\n        '_blank',\n        'noopener,noreferrer'\n      ),\n    imgSrc: preview.image_mousetrail,\n  },\n  {\n    id: 'sticky',\n    icon: Icons.doc_icon2,\n    name: 'Sticky',\n    imgSrc: preview.sticky,\n  },\n  {\n    id: 'gallery',\n    icon: Icons.doc_triangle,\n    name: 'Gallery',\n    imgSrc: preview.galleryNew,\n  },\n];\n",
      "type": "registry:component"
    }
  ]
}