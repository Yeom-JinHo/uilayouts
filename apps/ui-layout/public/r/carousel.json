{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:component",
  "dependencies": [
    "embla-carousel",
    "lucide-react",
    "embla-carousel-class-names",
    "embla-carousel-react",
    "embla-carousel-autoplay",
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./components/ui/carousel.tsx",
      "content": "// @ts-nocheck\r\n\r\n'use client';\r\nimport React, {\r\n  ReactNode,\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useId,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport Autoplay from 'embla-carousel-autoplay';\r\nimport {\r\n  EmblaCarouselType,\r\n  EmblaEventType,\r\n  EmblaOptionsType,\r\n} from 'embla-carousel';\r\nimport useEmblaCarousel from 'embla-carousel-react';\r\nimport ClassNames from 'embla-carousel-class-names';\r\nimport { cn } from '@/lib/utils';\r\ntype UseDotButtonType = {\r\n  selectedIndex: number;\r\n  scrollSnaps: number[];\r\n  onDotButtonClick: (index: number) => void;\r\n};\r\n\r\ninterface CarouselProps {\r\n  children: React.ReactNode;\r\n  options: EmblaOptionsType;\r\n  className?: string;\r\n  activeSlider?: boolean;\r\n  isAutoPlay?: boolean;\r\n  isScale?: boolean;\r\n}\r\ninterface ThumbnailSlide {\r\n  src: string;\r\n  alt: string;\r\n}\r\ninterface CarouselContextType {\r\n  prevBtnDisabled: boolean;\r\n  nextBtnDisabled: boolean;\r\n  onPrevButtonClick: () => void;\r\n  onNextButtonClick: () => void;\r\n  selectedIndex: any;\r\n  scrollSnaps: any;\r\n  onDotButtonClick: any;\r\n  scrollProgress: any;\r\n  selectedSnap: any;\r\n  snapCount: any;\r\n  isScale: boolean;\r\n  slidesrArr: ThumbnailSlide[];\r\n  setSlidesArr: any;\r\n  emblaThumbsRef: any;\r\n  onThumbClick: any;\r\n  carouselId: string;\r\n}\r\n\r\nconst CarouselContext = createContext<CarouselContextType | undefined>(\r\n  undefined\r\n);\r\nconst TWEEN_FACTOR_BASE = 0.52;\r\n\r\nconst numberWithinRange = (number: number, min: number, max: number): number =>\r\n  Math.min(Math.max(number, min), max);\r\nexport const useCarouselContext = () => {\r\n  const context = useContext(CarouselContext);\r\n  if (!context) {\r\n    throw new Error(\r\n      'useCarouselContext must be used within a CarouselProvider'\r\n    );\r\n  }\r\n  return context;\r\n};\r\n\r\nconst Carousel: React.FC<CarouselProps> = ({\r\n  children,\r\n  options,\r\n  className,\r\n  activeSlider,\r\n  isScale = false,\r\n  isAutoPlay = false,\r\n}) => {\r\n  const carouselId = useId();\r\n  const [slidesrArr, setSlidesArr] = useState<Element[]>([]);\r\n  const plugins = [];\r\n\r\n  if (activeSlider) {\r\n    plugins.push(ClassNames());\r\n  }\r\n\r\n  if (isAutoPlay) {\r\n    plugins.push(\r\n      Autoplay({\r\n        playOnInit: true,\r\n        delay: 3000,\r\n        stopOnMouseEnter: true,\r\n        jump: false,\r\n        stopOnInteraction: false,\r\n      })\r\n    );\r\n  }\r\n  const [emblaRef, emblaApi] = useEmblaCarousel(options, plugins);\r\n  const [selectedThumbIndex, setSelectedThumbIndex] = useState(0);\r\n  const [emblaThumbsRef, emblaThumbsApi] = useEmblaCarousel({\r\n    containScroll: 'keepSnaps',\r\n    dragFree: true,\r\n  });\r\n\r\n  const onThumbClick = useCallback(\r\n    (index: number) => {\r\n      if (!emblaApi || !emblaThumbsApi) return;\r\n      emblaApi.scrollTo(index);\r\n    },\r\n    [emblaApi, emblaThumbsApi]\r\n  );\r\n\r\n  const onSelect = useCallback(() => {\r\n    if (!emblaApi || !emblaThumbsApi) return;\r\n    setSelectedThumbIndex(emblaApi.selectedScrollSnap()); // Use setSelectedThumbIndex here\r\n    emblaThumbsApi.scrollTo(emblaApi.selectedScrollSnap());\r\n  }, [emblaApi, emblaThumbsApi, setSelectedThumbIndex]);\r\n\r\n  useEffect(() => {\r\n    if (!emblaApi) return;\r\n    onSelect();\r\n    emblaApi.on('select', onSelect);\r\n    emblaApi.on('reInit', onSelect);\r\n  }, [emblaApi, onSelect]);\r\n\r\n  const { selectedIndex, scrollSnaps, onDotButtonClick } =\r\n    useDotButton(emblaApi);\r\n  const [scrollProgress, setScrollProgress] = useState(0);\r\n  const {\r\n    prevBtnDisabled,\r\n    nextBtnDisabled,\r\n    onPrevButtonClick,\r\n    onNextButtonClick,\r\n  } = usePrevNextButtons(emblaApi);\r\n\r\n  const onScroll = useCallback((emblaApi: EmblaCarouselType) => {\r\n    const progress = Math.max(0, Math.min(1, emblaApi.scrollProgress()));\r\n    setScrollProgress(progress * 100);\r\n  }, []);\r\n  useEffect(() => {\r\n    if (!emblaApi) return;\r\n\r\n    onScroll(emblaApi);\r\n    emblaApi.on('reInit', onScroll);\r\n    emblaApi.on('scroll', onScroll);\r\n  }, [emblaApi, onScroll]);\r\n  const { selectedSnap, snapCount } = useSelectedSnapDisplay(emblaApi);\r\n\r\n  // for scale animation\r\n\r\n  const tweenFactor = useRef(0);\r\n  const tweenNodes = useRef<HTMLElement[]>([]);\r\n  const setTweenNodes = useCallback(\r\n    (emblaApi: EmblaCarouselType): void => {\r\n      if (!isScale) return;\r\n      tweenNodes.current = emblaApi.slideNodes().map((slideNode, index) => {\r\n        const node = slideNode.querySelector('.slider_content') as HTMLElement;\r\n        if (!node) {\r\n          console.warn(`No .slider_content found for slide ${index}`);\r\n        }\r\n        return node;\r\n      });\r\n    },\r\n    [isScale]\r\n  );\r\n\r\n  const setTweenFactor = useCallback(\r\n    (emblaApi: EmblaCarouselType) => {\r\n      if (!isScale) return;\r\n      tweenFactor.current =\r\n        TWEEN_FACTOR_BASE * emblaApi.scrollSnapList().length;\r\n    },\r\n    [isScale]\r\n  );\r\n\r\n  const tweenScale = useCallback(\r\n    (emblaApi: EmblaCarouselType, eventName?: EmblaEventType) => {\r\n      if (!isScale) return;\r\n      const engine = emblaApi.internalEngine();\r\n      const scrollProgress = emblaApi.scrollProgress();\r\n      const slidesInView = emblaApi.slidesInView();\r\n      const isScrollEvent = eventName === 'scroll';\r\n\r\n      emblaApi.scrollSnapList().forEach((scrollSnap, snapIndex) => {\r\n        let diffToTarget = scrollSnap - scrollProgress;\r\n        const slidesInSnap = engine.slideRegistry[snapIndex];\r\n\r\n        slidesInSnap.forEach((slideIndex) => {\r\n          if (isScrollEvent && !slidesInView.includes(slideIndex)) return;\r\n\r\n          if (engine.options.loop) {\r\n            engine.slideLooper.loopPoints.forEach((loopItem) => {\r\n              const target = loopItem.target();\r\n\r\n              if (slideIndex === loopItem.index && target !== 0) {\r\n                const sign = Math.sign(target);\r\n\r\n                if (sign === -1) {\r\n                  diffToTarget = scrollSnap - (1 + scrollProgress);\r\n                }\r\n                if (sign === 1) {\r\n                  diffToTarget = scrollSnap + (1 - scrollProgress);\r\n                }\r\n              }\r\n            });\r\n          }\r\n\r\n          const tweenValue = 1 - Math.abs(diffToTarget * tweenFactor.current);\r\n          const scale = numberWithinRange(tweenValue, 0, 1).toString();\r\n          const tweenNode = tweenNodes.current[slideIndex];\r\n          // Add null check here\r\n          if (tweenNode) {\r\n            tweenNode.style.transform = `scale(${scale})`;\r\n          }\r\n        });\r\n      });\r\n    },\r\n    [isScale]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!emblaApi) return;\r\n    if (isScale) {\r\n      setTweenNodes(emblaApi);\r\n      setTweenFactor(emblaApi);\r\n      tweenScale(emblaApi);\r\n\r\n      emblaApi\r\n        .on('reInit', setTweenNodes)\r\n        .on('reInit', setTweenFactor)\r\n        .on('reInit', tweenScale)\r\n        .on('scroll', tweenScale);\r\n    }\r\n  }, [emblaApi, tweenScale, isScale, setTweenNodes, setTweenFactor]);\r\n  return (\r\n    <CarouselContext.Provider\r\n      value={{\r\n        prevBtnDisabled,\r\n        nextBtnDisabled,\r\n        onPrevButtonClick,\r\n        onNextButtonClick,\r\n        selectedIndex,\r\n        scrollSnaps,\r\n        setSlidesArr,\r\n        onDotButtonClick,\r\n        scrollProgress,\r\n        selectedSnap,\r\n        snapCount,\r\n        carouselId,\r\n        isScale,\r\n        emblaThumbsRef,\r\n        onThumbClick,\r\n        slidesrArr,\r\n      }}\r\n    >\r\n      <div\r\n        className={cn(className, 'overflow-hidden  rounded-md ')}\r\n        ref={emblaRef}\r\n      >\r\n        {children}\r\n      </div>\r\n    </CarouselContext.Provider>\r\n  );\r\n};\r\n\r\ninterface SliderProps {\r\n  children: React.ReactNode;\r\n  thumnailSrc?: string;\r\n  className?: string;\r\n}\r\n\r\nexport const SliderContainer = ({\r\n  className,\r\n  children,\r\n}: {\r\n  className?: string;\r\n  children: ReactNode;\r\n}) => {\r\n  return (\r\n    <div\r\n      className={cn('flex', className)}\r\n      style={{ touchAction: 'pan-y pinch-zoom' }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\nexport const Slider: React.FC<SliderProps> = ({\r\n  children,\r\n  className,\r\n  thumnailSrc,\r\n}) => {\r\n  const { isScale, setSlidesArr } = useCarouselContext();\r\n  // console.log(thumnailSrc)\r\n\r\n  const addImgToSlider = useCallback(() => {\r\n    setSlidesArr((prev: any) => {\r\n      // Prevent adding duplicate images\r\n      return [...prev, thumnailSrc];\r\n    });\r\n  }, [setSlidesArr, thumnailSrc]);\r\n\r\n  useEffect(() => {\r\n    addImgToSlider();\r\n  }, [addImgToSlider]);\r\n\r\n  return (\r\n    <div className={cn('min-w-0 flex-grow-0 flex-shrink-0', className)}>\r\n      {isScale ? (\r\n        <>\r\n          <div className='slider_content'>{children}</div>\r\n        </>\r\n      ) : (\r\n        <>{children}</>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const SliderPrevButton = ({\r\n  children,\r\n  className,\r\n}: {\r\n  children?: ReactNode;\r\n  className?: string;\r\n}) => {\r\n  const { onPrevButtonClick, prevBtnDisabled }: any = useCarouselContext();\r\n  return (\r\n    <button\r\n      className={cn('', className)}\r\n      type='button'\r\n      onClick={onPrevButtonClick}\r\n      disabled={prevBtnDisabled}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\nexport const SliderNextButton = ({\r\n  children,\r\n  className,\r\n}: {\r\n  children?: ReactNode;\r\n  className?: string;\r\n}) => {\r\n  const { onNextButtonClick, nextBtnDisabled }: any = useCarouselContext();\r\n  return (\r\n    <>\r\n      <button\r\n        className={cn('', className)}\r\n        type='button'\r\n        onClick={onNextButtonClick}\r\n        disabled={nextBtnDisabled}\r\n      >\r\n        {children}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\nexport const SliderProgress = ({ className }: { className?: string }) => {\r\n  const { scrollProgress }: any = useCarouselContext();\r\n  return (\r\n    <div\r\n      className={cn(\r\n        '  bg-gray-500 relative rounded-md h-2 justify-end items-center sm:w-96 w-[80%] max-w-[90%] overflow-hidden',\r\n        className\r\n      )}\r\n    >\r\n      <div\r\n        className='dark:bg-white bg-black absolute w-full top-0 -left-[100%] bottom-0'\r\n        style={{ transform: `translate3d(${scrollProgress}%,0px,0px)` }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const SliderSnapDisplay = ({ className }: { className?: string }) => {\r\n  const { selectedSnap, snapCount } = useCarouselContext();\r\n  const prevSnapRef = useRef(selectedSnap);\r\n  const [direction, setDirection] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    setDirection(selectedSnap > prevSnapRef.current ? 1 : -1);\r\n    prevSnapRef.current = selectedSnap;\r\n  }, [selectedSnap]);\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'mix-blend-difference overflow-hidden flex gap-1 items-center',\r\n        className\r\n      )}\r\n    >\r\n      <motion.div\r\n        key={selectedSnap}\r\n        custom={direction}\r\n        initial={(d: number) => ({ y: d * 20, opacity: 0 })}\r\n        animate={{ y: 0, opacity: 1 }}\r\n        exit={(d: number) => ({ y: d * -20, opacity: 0 })}\r\n      >\r\n        {selectedSnap + 1}\r\n      </motion.div>\r\n      <span>/ {snapCount}</span>\r\n    </div>\r\n  );\r\n};\r\nexport const SliderDotButton = ({\r\n  className,\r\n  activeclass,\r\n}: {\r\n  className?: string;\r\n  activeclass?: string;\r\n}) => {\r\n  const { selectedIndex, scrollSnaps, onDotButtonClick, carouselId }: any =\r\n    useCarouselContext();\r\n  return (\r\n    <div className={cn('flex', className)}>\r\n      <div className='flex gap-2'>\r\n        {scrollSnaps.map((_: any, index: React.Key | null | undefined) => (\r\n          <button\r\n            type='button'\r\n            key={index}\r\n            onClick={() => onDotButtonClick(index)}\r\n            className={`relative inline-flex  p-0 m-0 w-10 h-2 `}\r\n          >\r\n            <div className=' bg-gray-500/40  h-2 rounded-full w-10 '></div>\r\n            {index === selectedIndex && (\r\n              <AnimatePresence mode='wait'>\r\n                <motion.div\r\n                  transition={{\r\n                    layout: {\r\n                      duration: 0.4,\r\n                      ease: 'easeInOut',\r\n                      delay: 0.04,\r\n                    },\r\n                  }}\r\n                  layoutId={`hover-${carouselId}`}\r\n                  className={cn(\r\n                    'absolute z-[3] w-full h-full left-0 top-0 dark:bg-white bg-black rounded-full',\r\n                    activeclass\r\n                  )}\r\n                />\r\n              </AnimatePresence>\r\n            )}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const useDotButton = (\r\n  emblaApi: EmblaCarouselType | undefined\r\n): UseDotButtonType => {\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const [scrollSnaps, setScrollSnaps] = useState<number[]>([]);\r\n\r\n  const onDotButtonClick = useCallback(\r\n    (index: number) => {\r\n      if (!emblaApi) return;\r\n      emblaApi.scrollTo(index);\r\n    },\r\n    [emblaApi]\r\n  );\r\n\r\n  const onInit = useCallback((emblaApi: EmblaCarouselType) => {\r\n    setScrollSnaps(emblaApi.scrollSnapList());\r\n  }, []);\r\n\r\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\r\n    setSelectedIndex(emblaApi.selectedScrollSnap());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!emblaApi) return;\r\n\r\n    onInit(emblaApi);\r\n    onSelect(emblaApi);\r\n    emblaApi.on('reInit', onInit);\r\n    emblaApi.on('reInit', onSelect);\r\n    emblaApi.on('select', onSelect);\r\n  }, [emblaApi, onInit, onSelect]);\r\n\r\n  return {\r\n    selectedIndex,\r\n    scrollSnaps,\r\n    onDotButtonClick,\r\n  };\r\n};\r\ntype UsePrevNextButtonsType = {\r\n  prevBtnDisabled: boolean;\r\n  nextBtnDisabled: boolean;\r\n  onPrevButtonClick: () => void;\r\n  onNextButtonClick: () => void;\r\n};\r\n\r\nexport const usePrevNextButtons = (\r\n  emblaApi: EmblaCarouselType | undefined\r\n): UsePrevNextButtonsType => {\r\n  const [prevBtnDisabled, setPrevBtnDisabled] = useState(true);\r\n  const [nextBtnDisabled, setNextBtnDisabled] = useState(true);\r\n\r\n  const onPrevButtonClick = useCallback(() => {\r\n    if (!emblaApi) return;\r\n    emblaApi.scrollPrev();\r\n  }, [emblaApi]);\r\n\r\n  const onNextButtonClick = useCallback(() => {\r\n    if (!emblaApi) return;\r\n    emblaApi.scrollNext();\r\n  }, [emblaApi]);\r\n\r\n  const onSelect = useCallback((emblaApi: EmblaCarouselType) => {\r\n    setPrevBtnDisabled(!emblaApi.canScrollPrev());\r\n    setNextBtnDisabled(!emblaApi.canScrollNext());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!emblaApi) return;\r\n\r\n    onSelect(emblaApi);\r\n    emblaApi.on('reInit', onSelect);\r\n    emblaApi.on('select', onSelect);\r\n  }, [emblaApi, onSelect]);\r\n\r\n  return {\r\n    prevBtnDisabled,\r\n    nextBtnDisabled,\r\n    onPrevButtonClick,\r\n    onNextButtonClick,\r\n  };\r\n};\r\n\r\ntype UseSelectedSnapDisplayType = {\r\n  selectedSnap: number;\r\n  snapCount: number;\r\n};\r\n\r\nexport const useSelectedSnapDisplay = (\r\n  emblaApi: EmblaCarouselType | undefined\r\n): UseSelectedSnapDisplayType => {\r\n  const [selectedSnap, setSelectedSnap] = useState(0);\r\n  const [snapCount, setSnapCount] = useState(0);\r\n\r\n  const updateScrollSnapState = useCallback((emblaApi: EmblaCarouselType) => {\r\n    setSnapCount(emblaApi.scrollSnapList().length);\r\n    setSelectedSnap(emblaApi.selectedScrollSnap());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!emblaApi) return;\r\n\r\n    updateScrollSnapState(emblaApi);\r\n    emblaApi.on('select', updateScrollSnapState);\r\n    emblaApi.on('reInit', updateScrollSnapState);\r\n  }, [emblaApi, updateScrollSnapState]);\r\n\r\n  return {\r\n    selectedSnap,\r\n    snapCount,\r\n  };\r\n};\r\n\r\nexport const ThumsSlider: React.FC = () => {\r\n  const { emblaThumbsRef, slidesrArr, selectedIndex, onThumbClick } =\r\n    useCarouselContext();\r\n  // console.log(slidesrArr);\r\n\r\n  return (\r\n    <div className='overflow-hidden mt-2' ref={emblaThumbsRef}>\r\n      <div className='flex flex-row gap-2'>\r\n        {slidesrArr.map((slide, index) => (\r\n          <div\r\n            key={`thumb-${index}`}\r\n            className={`min-w-0 w-full xl:h-24 aspect-auto border-2 rounded-md ${\r\n              index === selectedIndex\r\n                ? 'opacity-100'\r\n                : 'border-transparent opacity-30'\r\n            }`}\r\n            style={{ flex: '0 0 15%' }}\r\n            onClick={() => onThumbClick(index)}\r\n          >\r\n            <motion.img\r\n              src={slide}\r\n              className='w-full h-full object-cover rounded-sm'\r\n              width={400}\r\n              height={400}\r\n              alt={slide.alt || `Thumbnail ${index + 1}`}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Carousel;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/website/constant.tsx",
      "content": "import { Icons } from '@/assets/icons/Icons';\r\nimport preview from '@/assets/preview/Preview';\r\nimport {\r\n  InlineAnnotation,\r\n  AnnotationHandler,\r\n  InnerLine,\r\n  InnerPre,\r\n  InnerToken,\r\n} from 'codehike/code';\r\n\r\nexport const wordWrap: AnnotationHandler = {\r\n  name: 'word-wrap',\r\n  Pre: (props) => <InnerPre merge={props} className='whitespace-pre-wrap' />,\r\n  Line: (props) => (\r\n    <InnerLine merge={props}>\r\n      <div\r\n        style={{\r\n          textIndent: `${-props.indentation}ch`,\r\n          marginLeft: `${props.indentation}ch`,\r\n        }}\r\n      >\r\n        {props.children}\r\n      </div>\r\n    </InnerLine>\r\n  ),\r\n  Token: (props) => <InnerToken merge={props} style={{ textIndent: 0 }} />,\r\n};\r\nexport const callout: AnnotationHandler = {\r\n  name: 'callout',\r\n  transform: (annotation: InlineAnnotation) => {\r\n    const { name, query, lineNumber, fromColumn, toColumn, data } = annotation;\r\n    return {\r\n      name,\r\n      query,\r\n      fromLineNumber: lineNumber,\r\n      toLineNumber: lineNumber,\r\n      data: { ...data, column: (fromColumn + toColumn) / 2 },\r\n    };\r\n  },\r\n  Block: ({ annotation, children }) => {\r\n    const { column } = annotation.data;\r\n    return (\r\n      <>\r\n        {children}\r\n        <div\r\n          style={{ minWidth: `${column + 4}ch` }}\r\n          className='w-fit border bg-background border-current rounded px-2 relative -ml-[1ch] mt-1 whitespace-break-spaces'\r\n        >\r\n          <div\r\n            style={{ left: `${column}ch` }}\r\n            className='absolute border-l border-t border-current w-2 h-2 rotate-45 -translate-y-1/2 -top-[1px] bg-background'\r\n          />\r\n          {annotation.query}\r\n        </div>\r\n      </>\r\n    );\r\n  },\r\n};\r\n\r\nexport const mark: AnnotationHandler = {\r\n  name: 'mark',\r\n  Line: ({ annotation, ...props }) => {\r\n    const color = annotation?.query || 'rgb(14 165 233)';\r\n    return (\r\n      <div\r\n        className='...'\r\n        style={{\r\n          borderLeft: 'solid 2px transparent',\r\n          borderLeftColor: annotation && color,\r\n          backgroundColor: annotation && `rgb(from ${color} r g b / 0.1)`,\r\n          padding: '3px 4px',\r\n        }}\r\n      >\r\n        <InnerLine merge={props} className='...' />\r\n      </div>\r\n    );\r\n  },\r\n  Inline: ({ annotation, children }) => {\r\n    const color = annotation?.query || 'rgb(14 165 233)';\r\n    return (\r\n      <span\r\n        className='...'\r\n        style={{\r\n          outline: `solid 1px rgb(from ${color} r g b / 0.5)`,\r\n          background: `rgb(from ${color} r g b / 0.13)`,\r\n          padding: '2px 3px',\r\n        }}\r\n      >\r\n        {children}\r\n      </span>\r\n    );\r\n  },\r\n};\r\n\r\nexport const lineNumbers: AnnotationHandler = {\r\n  name: 'line-numbers',\r\n  Line: (props) => {\r\n    const width = props.totalLines.toString().length + 1;\r\n    return (\r\n      <div className='flex'>\r\n        <span\r\n          className='text-right opacity-50 select-none'\r\n          style={{ minWidth: `${width}ch` }}\r\n        >\r\n          {props.lineNumber}\r\n        </span>\r\n        <InnerLine merge={props} className='flex-1 pl-2' />\r\n      </div>\r\n    );\r\n  },\r\n};\r\n\r\nexport function HoverContainer(props: { children: React.ReactNode }) {\r\n  return <div className='hover-container'>{props.children}</div>;\r\n}\r\n\r\nexport function Link(props: { href?: string; children?: React.ReactNode }) {\r\n  if (props.href?.startsWith('hover:')) {\r\n    const hover = props.href.slice('hover:'.length);\r\n    return (\r\n      <span\r\n        className='underline decoration-dotted underline-offset-4'\r\n        data-hover={hover}\r\n      >\r\n        {props.children}\r\n      </span>\r\n    );\r\n  } else {\r\n    return <a {...props} />;\r\n  }\r\n}\r\nexport const hover: AnnotationHandler = {\r\n  name: 'hover',\r\n  onlyIfAnnotated: true,\r\n  Line: ({ annotation, ...props }) => (\r\n    <InnerLine\r\n      merge={props}\r\n      className='transition-opacity'\r\n      data-line={annotation?.query || ''}\r\n    />\r\n  ),\r\n};\r\ninterface ComponentInfo {\r\n  componentName: string;\r\n  filesrc?: string;\r\n  iframeSrc?: string;\r\n  parentlink: string;\r\n  parentName: string;\r\n  isNew?: boolean;\r\n  iframelink?: string;\r\n}\r\n\r\ninterface Category {\r\n  name: string;\r\n  componentArray: ComponentInfo[];\r\n  type: string;\r\n}\r\n\r\ninterface SidebarItem {\r\n  name: string;\r\n  href: string;\r\n  isNew?: boolean;\r\n}\r\n\r\ninterface SidebarCategory {\r\n  name: string;\r\n  items: SidebarItem[];\r\n}\r\n\r\nexport const generateSidebarData = (data: Category[]): SidebarCategory[] => {\r\n  const sidebarData: SidebarCategory[] = [];\r\n  const processedCategories = new Set<string>();\r\n\r\n  data.forEach((category) => {\r\n    if (!processedCategories.has(category.name)) {\r\n      const sidebarCategory: SidebarCategory = {\r\n        name: category.name,\r\n        items: category.componentArray.map((component) => ({\r\n          name: component.parentName,\r\n          href: `/components/${component.parentlink}`,\r\n          isNew: component.isNew ? true : false, // You might want to determine this based on some criteria\r\n        })),\r\n      };\r\n\r\n      // Remove duplicates and sort items\r\n      sidebarCategory.items = Array.from(\r\n        new Set(sidebarCategory.items.map((item) => JSON.stringify(item)))\r\n      )\r\n        .map((item) => JSON.parse(item))\r\n        .sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n      sidebarData.push(sidebarCategory);\r\n      processedCategories.add(category.name);\r\n    }\r\n  });\r\n\r\n  return sidebarData.sort((a, b) => a.name.localeCompare(b.name));\r\n};\r\nexport const CardArr = [\r\n  {\r\n    img: 'https://images.unsplash.com/photo-1543508282-6319a3e2621f?q=80&w=1200&auto=format&fit=crop',\r\n    title: 'Nike Air1',\r\n    color: '#202020',\r\n  },\r\n  {\r\n    img: 'https://images.unsplash.com/photo-1704677982215-a2248af6009b?q=80&w=1200&auto=format&fit=crop',\r\n    title: 'Nike Air2',\r\n    color: '#23acfc',\r\n  },\r\n  {\r\n    img: 'https://images.unsplash.com/photo-1520256862855-398228c41684?q=80&w=1200&auto=format&fit=crop',\r\n    title: 'Adidas',\r\n    color: '#a3fcff',\r\n  },\r\n  {\r\n    img: 'https://images.unsplash.com/photo-1605733160314-4fc7dac4bb16?q=80&w=1200&auto=format&fit=crop',\r\n    title: 'Brown Leather ',\r\n    color: '#A4636C',\r\n  },\r\n];\r\n\r\nexport const imgPreview = {\r\n  img1: 'https://images.unsplash.com/photo-1709949908058-a08659bfa922?q=80&w=1200&auto=format',\r\n  img2: 'https://images.unsplash.com/photo-1548192746-dd526f154ed9?q=80&w=1200&auto=format',\r\n  img3: 'https://images.unsplash.com/photo-1693581176773-a5f2362209e6?q=80&w=1200&auto=format',\r\n  img4: 'https://images.unsplash.com/photo-1584043204475-8cc101d6c77a?q=80&w=1200&auto=format',\r\n  img5: 'https://images.unsplash.com/photo-1709949908058-a08659bfa922?q=80&w=1200&auto=format',\r\n  img6: 'https://images.unsplash.com/photo-1518599904199-0ca897819ddb?q=80&w=1200&auto=format',\r\n  img7: 'https://images.unsplash.com/photo-1706049379414-437ec3a54e93?q=80&w=1200&auto=format',\r\n  img8: 'https://images.unsplash.com/photo-1709949908219-fd9046282019?q=80&w=1200&auto=format',\r\n  img9: 'https://images.unsplash.com/photo-1508873881324-c92a3fc536ba?q=80&w=1200&auto=format',\r\n  img10:\r\n    'https://images.unsplash.com/photo-1462989856370-729a9c1e2c91?q=80&w=1200&auto=format',\r\n  img11:\r\n    'https://images.unsplash.com/photo-1475727946784-2890c8fdb9c8?q=80&w=1200&auto=format',\r\n  img12:\r\n    'https://images.unsplash.com/photo-1546942113-a6c43b63104a?q=80&w=1200&auto=format',\r\n  img13:\r\n    'https://images.unsplash.com/photo-1726551195764-f98a8e8a57c3?q=80&w=1200&auto=format',\r\n  img14:\r\n    'https://images.unsplash.com/photo-1726551195795-612ca47c0b7d?q=80&w=1200&auto=format',\r\n  img15:\r\n    'https://images.unsplash.com/photo-1532423622396-10a3f979251a?q=80&w=1200&auto=format',\r\n  img16:\r\n    'https://images.unsplash.com/photo-1490750967868-88aa4486c946?q=80&w=1200&auto=format',\r\n  img17:\r\n    'https://images.unsplash.com/photo-1496861083958-175bb1bd5702?q=80&w=1200&auto=format',\r\n  img18:\r\n    'https://images.unsplash.com/photo-1469212044023-0e55b4b9745a?q=80&w=1200&auto=format',\r\n};\r\n\r\nexport const items = [\r\n  {\r\n    id: 1,\r\n    url: imgPreview.img1,\r\n    title: 'Misty Mountain Majesty',\r\n    description:\r\n      'A breathtaking view of misty mountains shrouded in clouds, creating an ethereal landscape.',\r\n    tags: ['Misty', 'Mountains', 'Clouds', 'Ethereal', 'Landscape'],\r\n  },\r\n  {\r\n    id: 2,\r\n    url: imgPreview.img2,\r\n    title: 'Winter Wonderland',\r\n    description:\r\n      \"A serene winter scene with snow-covered trees and mountains, showcasing nature's pristine beauty.\",\r\n    tags: ['Winter', 'Snow', 'Trees', 'Mountains', 'Serene'],\r\n  },\r\n  {\r\n    id: 3,\r\n    url: imgPreview.img3,\r\n    title: 'Autumn Mountain Retreat',\r\n    description:\r\n      'A cozy cabin nestled in the mountains, surrounded by the vibrant colors of autumn foliage.',\r\n    tags: ['Autumn', 'Cabin', 'Mountains', 'Foliage', 'Cozy'],\r\n  },\r\n  {\r\n    id: 4,\r\n    url: imgPreview.img4,\r\n    title: 'Tranquil Lake Reflection',\r\n    description:\r\n      'A calm mountain lake perfectly reflecting the surrounding peaks and sky, creating a mirror-like surface.',\r\n    tags: ['Lake', 'Reflection', 'Mountains', 'Tranquil', 'Mirror'],\r\n  },\r\n  {\r\n    id: 5,\r\n    url: imgPreview.img5,\r\n    title: 'Misty Mountain Peaks',\r\n    description:\r\n      \"Majestic mountain peaks emerging from a sea of clouds, showcasing nature's grandeur.\",\r\n    tags: ['Misty', 'Peaks', 'Clouds', 'Majestic', 'Nature'],\r\n  },\r\n  {\r\n    id: 6,\r\n    url: imgPreview.img6,\r\n    title: 'Golden Hour Glow',\r\n    description:\r\n      'A stunning mountain landscape bathed in the warm light of the golden hour, highlighting every contour.',\r\n    tags: ['Golden Hour', 'Mountains', 'Landscape', 'Warm', 'Scenic'],\r\n  },\r\n  {\r\n    id: 7,\r\n    url: imgPreview.img7,\r\n    title: 'Snowy Mountain Highway',\r\n    description:\r\n      'A winding road cutting through a snowy mountain landscape, inviting adventure and exploration.',\r\n    tags: ['Snow', 'Road', 'Mountains', 'Winter', 'Adventure'],\r\n  },\r\n  {\r\n    id: 8,\r\n    url: imgPreview.img8,\r\n    title: 'Foggy Mountain Forest',\r\n    description:\r\n      'A mysterious and enchanting forest shrouded in fog, with mountains looming in the background.',\r\n    tags: ['Fog', 'Forest', 'Mountains', 'Mysterious', 'Enchanting'],\r\n  },\r\n  {\r\n    id: 9,\r\n    url: imgPreview.img9,\r\n    title: 'Sunset Mountain Silhouette',\r\n    description:\r\n      'A dramatic silhouette of mountain peaks against a vibrant sunset sky, creating a stunning contrast.',\r\n    tags: ['Sunset', 'Silhouette', 'Mountains', 'Dramatic', 'Sky'],\r\n  },\r\n  {\r\n    id: 10,\r\n    url: imgPreview.img10,\r\n    title: 'Alpine Meadow Bliss',\r\n    description:\r\n      'A lush alpine meadow dotted with wildflowers, set against a backdrop of towering mountain peaks.',\r\n    tags: ['Alpine', 'Meadow', 'Wildflowers', 'Mountains', 'Peaceful'],\r\n  },\r\n  {\r\n    id: 11,\r\n    url: imgPreview.img11,\r\n    title: 'Mountain Lake Serenity',\r\n    description:\r\n      'A serene mountain lake surrounded by pine forests, reflecting the calm beauty of the wilderness.',\r\n    tags: ['Lake', 'Mountains', 'Forest', 'Reflection', 'Serenity'],\r\n  },\r\n  {\r\n    id: 12,\r\n    url: imgPreview.img12,\r\n    title: 'Icy Mountain Stream',\r\n    description:\r\n      \"A crystal-clear mountain stream flowing through a snowy landscape, showcasing winter's pristine beauty.\",\r\n    tags: ['Stream', 'Snow', 'Winter', 'Mountains', 'Crystal'],\r\n  },\r\n  {\r\n    id: 13,\r\n    url: imgPreview.img13,\r\n    title: 'Wildflower Mountain Meadow',\r\n    description:\r\n      'A colorful array of wildflowers carpeting a mountain meadow, with majestic peaks in the distance.',\r\n    tags: ['Wildflowers', 'Meadow', 'Mountains', 'Colorful', 'Nature'],\r\n  },\r\n  {\r\n    id: 14,\r\n    url: imgPreview.img14,\r\n    title: 'Mountain Valley Vista',\r\n    description:\r\n      'A sweeping view of a vast mountain valley, showcasing the grandeur of the natural landscape.',\r\n    tags: ['Valley', 'Mountains', 'Vista', 'Landscape', 'Grandeur'],\r\n  },\r\n  {\r\n    id: 15,\r\n    url: imgPreview.img15,\r\n    title: 'Rugged Mountain Terrain',\r\n    description:\r\n      'A close-up view of rugged mountain terrain, highlighting the raw beauty and texture of the rocks.',\r\n    tags: ['Rugged', 'Terrain', 'Mountains', 'Texture', 'Close-up'],\r\n  },\r\n  {\r\n    id: 16,\r\n    url: imgPreview.img16,\r\n    title: 'Mountain Wildflower Bloom',\r\n    description:\r\n      'A vibrant display of mountain wildflowers in full bloom, adding splashes of color to the alpine landscape.',\r\n    tags: ['Wildflowers', 'Bloom', 'Mountains', 'Vibrant', 'Alpine'],\r\n  },\r\n  {\r\n    id: 17,\r\n    url: imgPreview.img17,\r\n    title: 'Mountain River Rapids',\r\n    description:\r\n      'A rushing mountain river cutting through rocky terrain, showcasing the power and beauty of nature.',\r\n    tags: ['River', 'Rapids', 'Mountains', 'Power', 'Nature'],\r\n  },\r\n  {\r\n    id: 18,\r\n    url: imgPreview.img18,\r\n    title: 'Lush Mountain Valley',\r\n    description:\r\n      'A verdant mountain valley filled with lush vegetation and winding streams, epitomizing natural beauty.',\r\n    tags: ['Valley', 'Lush', 'Mountains', 'Streams', 'Verdant'],\r\n  },\r\n];\r\n\r\nexport const apps = [\r\n  {\r\n    id: 'carousel',\r\n    icon: Icons.doc_icon5,\r\n    name: 'Carousel',\r\n    imgSrc: preview.carousel,\r\n  },\r\n  {\r\n    id: 'tabs',\r\n    icon: Icons.doc_icon4,\r\n    name: 'Tabs',\r\n    imgSrc: preview.tabs,\r\n  },\r\n  {\r\n    id: 'faqs',\r\n    icon: Icons.doc_star,\r\n    name: 'Faqs',\r\n    imgSrc: preview.faqs,\r\n  },\r\n  {\r\n    id: 'grid',\r\n    icon: Icons.doc_icon3,\r\n    name: 'Grid',\r\n    imgSrc: preview.grid,\r\n  },\r\n  {\r\n    id: 'masking',\r\n    icon: Icons.doc_circle,\r\n    name: 'Masking',\r\n    onClick: () =>\r\n      window.open(\r\n        'https://www.ui-layouts.com/components/magnified-doc',\r\n        '_blank',\r\n        'noopener,noreferrer'\r\n      ),\r\n    imgSrc: preview.image_masking,\r\n  },\r\n  {\r\n    id: 'mouseTrail',\r\n    icon: Icons.doc_rectangle,\r\n    name: 'MouseTrail',\r\n    onClick: () =>\r\n      window.open(\r\n        'https://naymur-rahman.com/',\r\n        '_blank',\r\n        'noopener,noreferrer'\r\n      ),\r\n    imgSrc: preview.image_mousetrail,\r\n  },\r\n  {\r\n    id: 'sticky',\r\n    icon: Icons.doc_icon2,\r\n    name: 'Sticky',\r\n    imgSrc: preview.sticky,\r\n  },\r\n  {\r\n    id: 'gallery',\r\n    icon: Icons.doc_triangle,\r\n    name: 'Gallery',\r\n    imgSrc: preview.galleryNew,\r\n  },\r\n];\r\n",
      "type": "registry:component"
    }
  ]
}